{
  final TwidereApplication app=TwidereApplication.getInstance(context);
  final SharedPreferences prefs=context.getSharedPreferences(TwidereConstants.SHARED_PREFERENCES_NAME,Context.MODE_PRIVATE);
  final int connectionTimeout=prefs.getInt(SharedPreferenceConstants.KEY_CONNECTION_TIMEOUT,10) * 1000;
  final boolean enableGzip=prefs.getBoolean(SharedPreferenceConstants.KEY_GZIP_COMPRESSING,true);
  final boolean ignoreSslError=prefs.getBoolean(SharedPreferenceConstants.KEY_IGNORE_SSL_ERROR,false);
  final boolean enableProxy=prefs.getBoolean(SharedPreferenceConstants.KEY_ENABLE_PROXY,false);
  final ConfigurationBuilder cb=new ConfigurationBuilder();
  cb.setHostAddressResolverFactory(new TwidereHostResolverFactory(app));
  cb.setHttpConnectionTimeout(connectionTimeout);
  cb.setGZIPEnabled(enableGzip);
  cb.setIgnoreSSLError(ignoreSslError);
  cb.setIncludeCards(true);
  cb.setCardsPlatform("Android-12");
  if (enableProxy) {
    final String proxy_host=prefs.getString(SharedPreferenceConstants.KEY_PROXY_HOST,null);
    final int proxy_port=ParseUtils.parseInt(prefs.getString(SharedPreferenceConstants.KEY_PROXY_PORT,"-1"));
    if (!isEmpty(proxy_host) && proxy_port > 0) {
      cb.setHttpProxyHost(proxy_host);
      cb.setHttpProxyPort(proxy_port);
    }
  }
  final String apiUrlFormat=credentials.api_url_format;
  final String consumerKey=Utils.trim(credentials.consumer_key);
  final String consumerSecret=Utils.trim(credentials.consumer_secret);
  final boolean sameOAuthSigningUrl=credentials.same_oauth_signing_url;
  final boolean noVersionSuffix=credentials.no_version_suffix;
  if (!isEmpty(apiUrlFormat)) {
    final String versionSuffix=noVersionSuffix ? null : "/1.1/";
    cb.setRestBaseURL(Utils.getApiUrl(apiUrlFormat,"api",versionSuffix));
    cb.setOAuthBaseURL(Utils.getApiUrl(apiUrlFormat,"api","/oauth/"));
    cb.setUploadBaseURL(Utils.getApiUrl(apiUrlFormat,"upload",versionSuffix));
    cb.setOAuthAuthorizationURL(Utils.getApiUrl(apiUrlFormat,null,null));
    if (!sameOAuthSigningUrl) {
      cb.setSigningRestBaseURL(TwitterConstants.DEFAULT_SIGNING_REST_BASE_URL);
      cb.setSigningOAuthBaseURL(TwitterConstants.DEFAULT_SIGNING_OAUTH_BASE_URL);
      cb.setSigningUploadBaseURL(TwitterConstants.DEFAULT_SIGNING_UPLOAD_BASE_URL);
    }
  }
  Utils.setClientUserAgent(context,consumerKey,consumerSecret,cb);
  cb.setIncludeEntitiesEnabled(includeEntities);
  cb.setIncludeRTsEnabled(includeRetweets);
  cb.setIncludeReplyCountEnabled(true);
  cb.setIncludeDescendentReplyCountEnabled(true);
  return cb.build();
}
