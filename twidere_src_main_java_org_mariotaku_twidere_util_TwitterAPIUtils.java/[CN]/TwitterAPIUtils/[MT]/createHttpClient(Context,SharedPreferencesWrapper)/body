{
  final int connectionTimeout=prefs.getInt(KEY_CONNECTION_TIMEOUT,10);
  final boolean ignoreSslError=prefs.getBoolean(KEY_IGNORE_SSL_ERROR,false);
  final boolean enableProxy=prefs.getBoolean(KEY_ENABLE_PROXY,false);
  final OkHttpClient client=new OkHttpClient();
  client.setConnectTimeout(connectionTimeout,TimeUnit.SECONDS);
  if (ignoreSslError) {
    client.setSslSocketFactory(SSLCertificateSocketFactory.getInsecure(0,null));
  }
 else {
    client.setSslSocketFactory(SSLCertificateSocketFactory.getDefault(0,null));
  }
  if (enableProxy) {
    client.setProxy(getProxy(prefs));
  }
  final HostAddressResolver resolver=TwidereApplication.getInstance(context).getHostAddressResolver();
  Internal.instance.setNetwork(client,new Network(){
    @Override public InetAddress[] resolveInetAddresses(    String host) throws UnknownHostException {
      try {
        return resolver.resolve(host);
      }
 catch (      IOException e) {
        if (e instanceof UnknownHostException)         throw (UnknownHostException)e;
        throw new UnknownHostException("Unable to resolve address " + e.getMessage());
      }
    }
  }
);
  return new OkHttpRestClient(client);
}
