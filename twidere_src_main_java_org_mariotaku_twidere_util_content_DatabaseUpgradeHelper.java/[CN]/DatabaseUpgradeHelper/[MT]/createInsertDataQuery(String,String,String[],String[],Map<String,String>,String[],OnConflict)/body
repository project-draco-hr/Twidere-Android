{
  final SQLInsertIntoQuery.Builder qb=insertInto(onConflict,table);
  final List<String> newInsertColsList=new ArrayList<String>();
  for (  final String newCol : newCols) {
    final String oldAliasedCol=colAliases != null ? colAliases.get(newCol) : null;
    if (ArrayUtils.contains(oldCols,newCol) || oldAliasedCol != null && ArrayUtils.contains(oldCols,oldAliasedCol)) {
      newInsertColsList.add(newCol);
    }
  }
  final String[] newInsertCols=newInsertColsList.toArray(new String[newInsertColsList.size()]);
  if (!ArrayUtils.contains(newInsertCols,notNullCols))   return null;
  qb.columns(newInsertCols);
  final Columns.Column[] oldDataCols=new Columns.Column[newInsertCols.length];
  for (int i=0, j=oldDataCols.length; i < j; i++) {
    final String newCol=newInsertCols[i];
    final String oldAliasedCol=colAliases != null ? colAliases.get(newCol) : null;
    if (oldAliasedCol != null && ArrayUtils.contains(oldCols,oldAliasedCol)) {
      oldDataCols[i]=new Columns.Column(oldAliasedCol,newCol);
    }
 else {
      oldDataCols[i]=new Columns.Column(newCol);
    }
  }
  final SQLSelectQuery.Builder selectOldBuilder=select(new Columns(oldDataCols));
  selectOldBuilder.from(new Tables(tempTable));
  qb.select(selectOldBuilder.build());
  return qb.buildSQL();
}
