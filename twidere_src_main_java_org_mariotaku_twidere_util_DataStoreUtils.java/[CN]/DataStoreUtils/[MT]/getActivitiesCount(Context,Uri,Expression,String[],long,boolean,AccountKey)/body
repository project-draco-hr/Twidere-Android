{
  if (context == null)   return 0;
  final RawItemArray idsIn;
  if (ArrayUtils.isEmpty(accountKeys)) {
    idsIn=new RawItemArray(AccountKey.getIds(getActivatedAccountKeys(context)));
  }
 else {
    idsIn=new RawItemArray(AccountKey.getIds(accountKeys));
  }
  Expression[] expressions;
  if (extraWhere != null) {
    expressions=new Expression[4];
    expressions[3]=extraWhere;
  }
 else {
    expressions=new Expression[3];
  }
  expressions[0]=Expression.in(new Column(Activities.ACCOUNT_KEY),idsIn);
  expressions[1]=Expression.greaterThan(Activities.TIMESTAMP,sinceTimestamp);
  expressions[2]=buildActivityFilterWhereClause(getTableNameByUri(uri),null);
  final Expression selection=Expression.and(expressions);
  if (followingOnly) {
    final ContentResolver resolver=context.getContentResolver();
    final String[] projection=new String[]{Activities.SOURCES};
    final Cursor cur=resolver.query(uri,projection,selection.getSQL(),extraWhereArgs,null);
    if (cur == null)     return -1;
    try {
      final JsonMapper<UserFollowState> mapper;
      try {
        mapper=LoganSquareMapperFinder.mapperFor(UserFollowState.class);
      }
 catch (      LoganSquareMapperFinder.ClassLoaderDeadLockException e) {
        return -1;
      }
      int total=0;
      cur.moveToFirst();
      while (cur.isAfterLast()) {
        final String string=cur.getString(0);
        if (TextUtils.isEmpty(string))         continue;
        boolean hasFollowing=false;
        try {
          for (          UserFollowState state : mapper.parseList(string)) {
            if (state.is_following) {
              hasFollowing=true;
              break;
            }
          }
        }
 catch (        IOException e) {
          continue;
        }
        if (hasFollowing) {
          total++;
        }
        cur.moveToNext();
      }
      return total;
    }
  finally {
      cur.close();
    }
  }
  return queryCount(context,uri,selection.getSQL(),extraWhereArgs);
}
