{
  if (context == null)   return;
  final ContentResolver resolver=context.getContentResolver();
  final int itemLimit=context.getSharedPreferences(SHARED_PREFERENCES_NAME,Context.MODE_PRIVATE).getInt(KEY_DATABASE_ITEM_LIMIT,DEFAULT_DATABASE_ITEM_LIMIT);
  for (  final UserKey accountKey : getAccountKeys(context)) {
    for (    final Uri uri : STATUSES_URIS) {
      if (CachedStatuses.CONTENT_URI.equals(uri)) {
        continue;
      }
      final String table=getTableNameByUri(uri);
      final SQLSelectQuery.Builder qb=new SQLSelectQuery.Builder();
      qb.select(new Column(Statuses._ID)).from(new Tables(table)).where(Expression.equalsArgs(Statuses.ACCOUNT_KEY)).orderBy(new OrderBy(Statuses.POSITION_KEY,false)).limit(itemLimit);
      final Expression where=Expression.and(Expression.notIn(new Column(Statuses._ID),qb.build()),Expression.equalsArgs(Statuses.ACCOUNT_KEY));
      final String[] whereArgs={String.valueOf(accountKey),String.valueOf(accountKey)};
      resolver.delete(uri,where.getSQL(),whereArgs);
    }
    for (    final Uri uri : ACTIVITIES_URIS) {
      final String table=getTableNameByUri(uri);
      final SQLSelectQuery.Builder qb=new SQLSelectQuery.Builder();
      qb.select(new Column(Activities._ID)).from(new Tables(table)).where(Expression.equalsArgs(Activities.ACCOUNT_KEY)).orderBy(new OrderBy(Activities.TIMESTAMP,false)).limit(itemLimit);
      final Expression where=Expression.and(Expression.notIn(new Column(Activities._ID),qb.build()),Expression.equalsArgs(Activities.ACCOUNT_KEY));
      final String[] whereArgs={String.valueOf(accountKey),String.valueOf(accountKey)};
      resolver.delete(uri,where.getSQL(),whereArgs);
    }
    for (    final Uri uri : DIRECT_MESSAGES_URIS) {
      final String table=getTableNameByUri(uri);
      final Expression accountWhere=Expression.equalsArgs(DirectMessages.ACCOUNT_KEY);
      final SQLSelectQuery.Builder qb=new SQLSelectQuery.Builder();
      qb.select(new Column(DirectMessages._ID)).from(new Tables(table)).where(accountWhere).orderBy(new OrderBy(DirectMessages.MESSAGE_ID,false)).limit(itemLimit * 10);
      final Expression where=Expression.and(Expression.notIn(new Column(DirectMessages._ID),qb.build()),Expression.equalsArgs(DirectMessages.ACCOUNT_KEY));
      final String[] whereArgs={String.valueOf(accountKey),String.valueOf(accountKey)};
      resolver.delete(uri,where.getSQL(),whereArgs);
    }
  }
  for (  final Uri uri : CACHE_URIS) {
    final String table=getTableNameByUri(uri);
    if (table == null)     continue;
    final SQLSelectQuery.Builder qb=new SQLSelectQuery.Builder();
    qb.select(new Column(BaseColumns._ID)).from(new Tables(table)).orderBy(new OrderBy(BaseColumns._ID,false)).limit(itemLimit * 20);
    final Expression where=Expression.notIn(new Column(BaseColumns._ID),qb.build());
    resolver.delete(uri,where.getSQL(),null);
  }
}
