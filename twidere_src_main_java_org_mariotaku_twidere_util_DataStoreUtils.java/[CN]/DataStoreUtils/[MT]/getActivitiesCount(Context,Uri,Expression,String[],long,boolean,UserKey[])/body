{
  if (accountKeys == null) {
    accountKeys=getActivatedAccountKeys(context);
  }
  Expression[] expressions;
  if (extraWhere != null) {
    expressions=new Expression[4];
    expressions[3]=extraWhere;
  }
 else {
    expressions=new Expression[3];
  }
  expressions[0]=Expression.inArgs(new Column(Activities.ACCOUNT_KEY),accountKeys.length);
  expressions[1]=Expression.greaterThanArgs(Activities.TIMESTAMP);
  expressions[2]=buildActivityFilterWhereClause(getTableNameByUri(uri),null);
  final Expression selection=Expression.and(expressions);
  String[] selectionArgs;
  if (extraWhereArgs != null) {
    selectionArgs=new String[accountKeys.length + 1 + extraWhereArgs.length];
    System.arraycopy(extraWhereArgs,0,selectionArgs,accountKeys.length + 1,extraWhereArgs.length);
  }
 else {
    selectionArgs=new String[accountKeys.length + 1];
  }
  for (int i=0; i < accountKeys.length; i++) {
    selectionArgs[i]=accountKeys[i].toString();
  }
  selectionArgs[accountKeys.length]=String.valueOf(sinceTimestamp);
  if (followingOnly) {
    final ContentResolver resolver=context.getContentResolver();
    final String[] projection=new String[]{Activities.SOURCES};
    final Cursor cur=resolver.query(uri,projection,selection.getSQL(),selectionArgs,null);
    if (cur == null)     return -1;
    try {
      final JsonMapper<UserFollowState> mapper;
      try {
        mapper=LoganSquareMapperFinder.mapperFor(UserFollowState.class);
      }
 catch (      LoganSquareMapperFinder.ClassLoaderDeadLockException e) {
        return -1;
      }
      int total=0;
      cur.moveToFirst();
      while (cur.isAfterLast()) {
        final String string=cur.getString(0);
        if (TextUtils.isEmpty(string))         continue;
        boolean hasFollowing=false;
        try {
          for (          UserFollowState state : mapper.parseList(string)) {
            if (state.is_following) {
              hasFollowing=true;
              break;
            }
          }
        }
 catch (        IOException e) {
          continue;
        }
        if (hasFollowing) {
          total++;
        }
        cur.moveToNext();
      }
      return total;
    }
  finally {
      cur.close();
    }
  }
  return queryCount(context,uri,selection.getSQL(),selectionArgs);
}
