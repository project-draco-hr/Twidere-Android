{
  final Context context=getContext();
  if (mAccountKey == null) {
    return ListResponse.getListInstance(new TwitterException("No Account"));
  }
  final ParcelableCredentials credentials=ParcelableCredentialsUtils.getCredentials(context,mAccountKey);
  if (credentials == null) {
    return ListResponse.getListInstance(new TwitterException("No Account"));
  }
  List<ParcelableStatus> data=getData();
  if (data == null) {
    data=new CopyOnWriteArrayList<>();
  }
  if (isFirstLoad() && getTabPosition() >= 0) {
    final List<ParcelableStatus> cached=getCachedData();
    if (cached != null) {
      data.addAll(cached);
      if (mComparator != null) {
        Collections.sort(data,mComparator);
      }
 else {
        Collections.sort(data);
      }
      return ListResponse.getListInstance(new CopyOnWriteArrayList<>(data));
    }
  }
  if (!isFromUser())   return ListResponse.getListInstance(data);
  final Twitter twitter=TwitterAPIFactory.getTwitterInstance(context,credentials,true,true);
  if (twitter == null) {
    return ListResponse.getListInstance(new TwitterException("No Account"));
  }
  final List<Status> statuses;
  final boolean noItemsBefore=data.isEmpty();
  final int loadItemLimit=mPreferences.getInt(KEY_LOAD_ITEM_LIMIT,DEFAULT_LOAD_ITEM_LIMIT);
  try {
    final Paging paging=new Paging();
    processPaging(credentials,loadItemLimit,paging);
    statuses=getStatuses(twitter,credentials,paging);
    if (!Utils.isOfficialCredentials(context,credentials)) {
      InternalTwitterContentUtils.getStatusesWithQuoteData(twitter,statuses);
    }
  }
 catch (  final TwitterException e) {
    if (BuildConfig.DEBUG) {
      Log.w(LOGTAG,e);
    }
    return ListResponse.getListInstance(new CopyOnWriteArrayList<>(data),e);
  }
  final String[] statusIds=new String[statuses.size()];
  int minIdx=-1;
  int rowsDeleted=0;
  for (int i=0, j=statuses.size(); i < j; i++) {
    final Status status=statuses.get(i);
    if (minIdx == -1 || status.compareTo(statuses.get(minIdx)) < 0) {
      minIdx=i;
    }
    statusIds[i]=status.getId();
    if (deleteStatus(data,status.getId())) {
      rowsDeleted++;
    }
  }
  final boolean deletedOldGap=rowsDeleted > 0 && ArrayUtils.contains(statusIds,mMaxId);
  final boolean noRowsDeleted=rowsDeleted == 0;
  final boolean insertGap=minIdx != -1 && (noRowsDeleted || deletedOldGap) && !noItemsBefore && statuses.size() >= loadItemLimit;
  for (int i=0, j=statuses.size(); i < j; i++) {
    final Status status=statuses.get(i);
    final ParcelableStatus item=ParcelableStatusUtils.fromStatus(status,mAccountKey,insertGap && isGapEnabled() && minIdx == i);
    item.account_color=credentials.color;
    data.add(item);
  }
  final SQLiteDatabase db=TwidereApplication.getInstance(context).getSQLiteDatabase();
  final ParcelableStatus[] array=data.toArray(new ParcelableStatus[data.size()]);
  for (int i=0, size=array.length; i < size; i++) {
    final ParcelableStatus status=array[i];
    if (shouldFilterStatus(db,status) && !status.is_gap && i != size - 1) {
      deleteStatus(data,status.id);
    }
  }
  if (mComparator != null) {
    Collections.sort(data,mComparator);
  }
 else {
    Collections.sort(data);
  }
  saveCachedData(data);
  return ListResponse.getListInstance(new CopyOnWriteArrayList<>(data));
}
