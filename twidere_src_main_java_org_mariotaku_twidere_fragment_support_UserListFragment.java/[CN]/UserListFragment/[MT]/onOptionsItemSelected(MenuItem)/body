{
  final AsyncTwitterWrapper twitter=mTwitterWrapper;
  final ParcelableUserList userList=mUserList;
  if (twitter == null || userList == null)   return false;
switch (item.getItemId()) {
case R.id.add:
{
      if (!userList.user_key.equals(userList.account_key))       return false;
      final Intent intent=new Intent(INTENT_ACTION_SELECT_USER);
      intent.setClass(getActivity(),UserListSelectorActivity.class);
      intent.putExtra(EXTRA_ACCOUNT_KEY,userList.account_key);
      startActivityForResult(intent,REQUEST_SELECT_USER);
      break;
    }
case R.id.delete:
{
    if (!userList.user_key.equals(userList.account_key))     return false;
    DestroyUserListDialogFragment.show(getFragmentManager(),userList);
    break;
  }
case R.id.edit:
{
  final Bundle args=new Bundle();
  args.putParcelable(EXTRA_ACCOUNT_KEY,userList.account_key);
  args.putString(EXTRA_LIST_NAME,userList.name);
  args.putString(EXTRA_DESCRIPTION,userList.description);
  args.putBoolean(EXTRA_IS_PUBLIC,userList.is_public);
  args.putLong(EXTRA_LIST_ID,userList.id);
  final DialogFragment f=new EditUserListDialogFragment();
  f.setArguments(args);
  f.show(getFragmentManager(),"edit_user_list_details");
  return true;
}
case R.id.follow:
{
if (userList.is_following) {
  DestroyUserListSubscriptionDialogFragment.show(getFragmentManager(),userList);
}
 else {
  twitter.createUserListSubscriptionAsync(userList.account_key,userList.id);
}
return true;
}
case R.id.open_with_account:
{
final Intent intent=new Intent(INTENT_ACTION_SELECT_ACCOUNT);
intent.setClass(getActivity(),AccountSelectorActivity.class);
intent.putExtra(EXTRA_SINGLE_SELECTION,true);
startActivityForResult(intent,REQUEST_SELECT_ACCOUNT);
break;
}
default :
{
if (item.getIntent() != null) {
try {
startActivity(item.getIntent());
}
 catch (final ActivityNotFoundException e) {
Log.w(LOGTAG,e);
return false;
}
}
break;
}
}
return true;
}
