{
  super.onActivityCreated(savedInstanceState);
  mReadStateManager=getReadStateManager();
  final View view=getView();
  if (view == null)   throw new AssertionError();
  final Context context=view.getContext();
  final boolean compact=Utils.isCompactCards(context);
  mDrawerCallback=new SimpleDrawerCallback(mRecyclerView);
  mSwipeRefreshLayout.setOnRefreshListener(this);
  mSwipeRefreshLayout.setColorSchemeColors(ThemeUtils.getUserAccentColor(context));
  final int backgroundColor=ThemeUtils.getThemeBackgroundColor(context);
  final int colorRes=ColorUtils.getContrastYIQ(backgroundColor,R.color.bg_refresh_progress_color_light,R.color.bg_refresh_progress_color_dark);
  mSwipeRefreshLayout.setProgressBackgroundColorSchemeResource(colorRes);
  mAdapter=onCreateAdapter(context,compact);
  mLayoutManager=new FixedLinearLayoutManager(context);
  mLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);
  mRecyclerView.setLayoutManager(mLayoutManager);
  mRecyclerView.setHasFixedSize(true);
  if (compact) {
    mRecyclerView.addItemDecoration(new DividerItemDecoration(context,mLayoutManager.getOrientation()));
  }
  mRecyclerView.setAdapter(mAdapter);
  final ContentListScrollListener scrollListener=new ContentListScrollListener(this);
  scrollListener.setTouchSlop(ViewConfiguration.get(context).getScaledTouchSlop());
  scrollListener.setOnScrollListener(new OnScrollListener(){
    @Override public void onScrollStateChanged(    RecyclerView recyclerView,    int newState){
      if (newState == RecyclerView.SCROLL_STATE_IDLE) {
        saveReadPosition();
      }
    }
  }
);
  mRecyclerView.setOnScrollListener(scrollListener);
  mAdapter.setListener(this);
  final Bundle loaderArgs=new Bundle(getArguments());
  loaderArgs.putBoolean(EXTRA_FROM_USER,true);
  getLoaderManager().initLoader(0,loaderArgs,this);
  setListShown(false);
}
