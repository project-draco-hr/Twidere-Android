{
  String action=handler.getKeyAction(CONTEXT_TAG_NAVIGATION,keyCode,event);
  if (ACTION_NAVIGATION_REFRESH.equals(action)) {
    triggerRefresh();
    return true;
  }
  final RecyclerView recyclerView=getRecyclerView();
  final LinearLayoutManager layoutManager=getLayoutManager();
  if (recyclerView == null || layoutManager == null)   return false;
  final View focusedChild=RecyclerViewUtils.findRecyclerViewChild(recyclerView,layoutManager.getFocusedChild());
  final int position;
  if (focusedChild != null && focusedChild.getParent() == recyclerView) {
    position=recyclerView.getChildLayoutPosition(focusedChild);
  }
 else {
    return false;
  }
  if (position == -1)   return false;
  final ParcelableStatus status=getAdapter().getStatus(position);
  if (status == null)   return false;
  if (keyCode == KeyEvent.KEYCODE_ENTER) {
    Utils.openStatus(getActivity(),status,null);
    return true;
  }
  if (action == null) {
    action=handler.getKeyAction(CONTEXT_TAG_STATUS,keyCode,event);
  }
  if (action == null)   return false;
switch (action) {
case ACTION_STATUS_REPLY:
{
      final Intent intent=new Intent(INTENT_ACTION_REPLY);
      intent.putExtra(EXTRA_STATUS,status);
      startActivity(intent);
      return true;
    }
case ACTION_STATUS_RETWEET:
{
    RetweetQuoteDialogFragment.show(getFragmentManager(),status);
    return true;
  }
case ACTION_STATUS_FAVORITE:
{
  final AsyncTwitterWrapper twitter=mTwitterWrapper;
  if (status.is_favorite) {
    twitter.destroyFavoriteAsync(status.account_id,status.id);
  }
 else {
    twitter.createFavoriteAsync(status.account_id,status.id);
  }
  return true;
}
}
return mNavigationHelper.handleKeyboardShortcutSingle(handler,keyCode,event);
}
