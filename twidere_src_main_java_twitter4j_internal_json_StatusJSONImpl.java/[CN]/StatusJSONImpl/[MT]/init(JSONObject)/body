{
  id=getLong("id",json);
  rawText=getRawString("text",json);
  text=getUnescapedString("text",json);
  source=getHTMLUnescapedString("source",json);
  createdAt=getDate("created_at",json);
  isTruncated=getBoolean("truncated",json);
  inReplyToStatusId=getLong("in_reply_to_status_id",json);
  inReplyToUserId=getLong("in_reply_to_user_id",json);
  isFavorited=getBoolean("favorited",json);
  inReplyToScreenName=getHTMLUnescapedString("in_reply_to_screen_name",json);
  isPossiblySensitive=getBoolean("possibly_sensitive",json);
  retweetCount=getLong("retweet_count",json);
  favoriteCount=getLong("favorite_count",json);
  replyCount=getLong("reply_count",json);
  descendentReplyCount=getLong("descendent_reply_count",json);
  try {
    if (!json.isNull("user")) {
      user=new UserJSONImpl(json.getJSONObject("user"));
    }
  }
 catch (  final JSONException jsone) {
    throw new TwitterException(jsone);
  }
  geoLocation=InternalJSONFactoryImpl.createGeoLocation(json);
  if (!json.isNull("place")) {
    try {
      place=new PlaceJSONImpl(json.getJSONObject("place"));
    }
 catch (    final JSONException ignore) {
      ignore.printStackTrace();
      logger.warn("failed to parse place:" + json);
    }
  }
  if (!json.isNull("retweeted_status")) {
    try {
      retweetedStatus=new StatusJSONImpl(json.getJSONObject("retweeted_status"));
    }
 catch (    final JSONException ignore) {
      ignore.printStackTrace();
      logger.warn("failed to parse retweeted_status:" + json);
    }
  }
  if (!json.isNull("contributors")) {
    try {
      final JSONArray contributorsArray=json.getJSONArray("contributors");
      contributorsIDs=new long[contributorsArray.length()];
      for (int i=0; i < contributorsArray.length(); i++) {
        contributorsIDs[i]=Long.parseLong(contributorsArray.getString(i));
      }
    }
 catch (    final NumberFormatException ignore) {
      ignore.printStackTrace();
      logger.warn("failed to parse contributors:" + json);
    }
catch (    final JSONException ignore) {
      ignore.printStackTrace();
      logger.warn("failed to parse contributors:" + json);
    }
  }
 else {
    contributors=null;
  }
  if (!json.isNull("entities")) {
    try {
      final JSONObject entities=json.getJSONObject("entities");
      int len;
      if (!entities.isNull("user_mentions")) {
        final JSONArray userMentionsArray=entities.getJSONArray("user_mentions");
        len=userMentionsArray.length();
        userMentionEntities=new UserMentionEntity[len];
        for (int i=0; i < len; i++) {
          userMentionEntities[i]=new UserMentionEntityJSONImpl(userMentionsArray.getJSONObject(i));
        }
      }
      if (!entities.isNull("urls")) {
        final JSONArray urlsArray=entities.getJSONArray("urls");
        len=urlsArray.length();
        urlEntities=new URLEntity[len];
        for (int i=0; i < len; i++) {
          urlEntities[i]=new URLEntityJSONImpl(urlsArray.getJSONObject(i));
        }
      }
      if (!entities.isNull("hashtags")) {
        final JSONArray hashtagsArray=entities.getJSONArray("hashtags");
        len=hashtagsArray.length();
        hashtagEntities=new HashtagEntity[len];
        for (int i=0; i < len; i++) {
          hashtagEntities[i]=new HashtagEntityJSONImpl(hashtagsArray.getJSONObject(i));
        }
      }
      if (!entities.isNull("media")) {
        final JSONArray mediaArray=entities.getJSONArray("media");
        len=mediaArray.length();
        mediaEntities=new MediaEntity[len];
        for (int i=0; i < len; i++) {
          mediaEntities[i]=new MediaEntityJSONImpl(mediaArray.getJSONObject(i));
        }
      }
    }
 catch (    final JSONException jsone) {
      throw new TwitterException(jsone);
    }
  }
  if (!json.isNull("extended_entities")) {
    try {
      final JSONObject entities=json.getJSONObject("extended_entities");
      if (!entities.isNull("media")) {
        int len;
        final JSONArray mediaArray=entities.getJSONArray("media");
        len=mediaArray.length();
        extendedMediaEntities=new MediaEntity[len];
        for (int i=0; i < len; i++) {
          extendedMediaEntities[i]=new MediaEntityJSONImpl(mediaArray.getJSONObject(i));
        }
      }
    }
 catch (    final JSONException jsone) {
      throw new TwitterException(jsone);
    }
  }
  if (!json.isNull("current_user_retweet")) {
    try {
      currentUserRetweet=getLong("id",json.getJSONObject("current_user_retweet"));
      wasRetweetedByMe=currentUserRetweet > 0;
    }
 catch (    final JSONException ignore) {
      ignore.printStackTrace();
      logger.warn("failed to parse current_user_retweet:" + json);
    }
  }
  if (!json.isNull("card")) {
    try {
      cardEntity=new CardEntityJSONImpl(json.getJSONObject("card"));
    }
 catch (    JSONException jsone) {
      throw new TwitterException(jsone);
    }
  }
}
