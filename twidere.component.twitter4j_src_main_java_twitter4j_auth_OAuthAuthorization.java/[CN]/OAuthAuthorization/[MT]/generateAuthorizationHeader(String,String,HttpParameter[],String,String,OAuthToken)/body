{
  if (null == params) {
    params=new HttpParameter[0];
  }
  final List<HttpParameter> oauthHeaderParams=new ArrayList<HttpParameter>(5);
  oauthHeaderParams.add(new HttpParameter("oauth_consumer_key",consumerKey));
  oauthHeaderParams.add(OAUTH_SIGNATURE_METHOD);
  oauthHeaderParams.add(new HttpParameter("oauth_timestamp",timestamp));
  oauthHeaderParams.add(new HttpParameter("oauth_nonce",nonce));
  oauthHeaderParams.add(new HttpParameter("oauth_version","1.0"));
  if (otoken != null) {
    oauthHeaderParams.add(new HttpParameter("oauth_token",otoken.getToken()));
  }
  final List<HttpParameter> signatureBaseParams=new ArrayList<HttpParameter>(oauthHeaderParams.size() + params.length);
  signatureBaseParams.addAll(oauthHeaderParams);
  if (!HttpParameter.containsFile(params)) {
    signatureBaseParams.addAll(toParamList(params));
  }
  parseGetParameters(sign_url,signatureBaseParams);
  final StringBuffer base=new StringBuffer(method).append("&").append(HttpParameter.encode(constructRequestURL(sign_url))).append("&");
  base.append(HttpParameter.encode(normalizeRequestParameters(signatureBaseParams)));
  final String oauthBaseString=base.toString();
  logger.debug("OAuth base string: ",oauthBaseString);
  final String signature=generateSignature(oauthBaseString,otoken);
  logger.debug("OAuth signature: ",signature);
  oauthHeaderParams.add(new HttpParameter("oauth_signature",signature));
  if (realm != null) {
    oauthHeaderParams.add(new HttpParameter("realm",realm));
  }
  return "OAuth " + encodeParameters(oauthHeaderParams,",",true);
}
