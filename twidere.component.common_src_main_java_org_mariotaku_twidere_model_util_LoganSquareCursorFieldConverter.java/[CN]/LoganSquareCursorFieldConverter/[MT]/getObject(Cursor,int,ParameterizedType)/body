{
  final String string=cursor.getString(columnIndex);
  if (TextUtils.isEmpty(string))   return null;
  if (isArray(fieldType)) {
    final Class<?> component=getArrayComponent(fieldType);
    JsonMapper<Object> mapper=(JsonMapper<Object>)LoganSquareMapperFinder.mapperFor(component);
    final List<Object> list=mapper.parseList(string);
    return (T)list.toArray((Object[])Array.newInstance(component,list.size()));
  }
 else   if (fieldType.getRawType() == List.class) {
    JsonMapper<Object> mapper=LoganSquareMapperFinder.mapperFor(fieldType.getActualTypeArguments()[0]);
    return (T)mapper.parseList(string);
  }
 else   if (fieldType.getRawType() == Map.class) {
    JsonMapper<Object> mapper=LoganSquareMapperFinder.mapperFor(fieldType.getActualTypeArguments()[1]);
    return (T)mapper.parseMap(string);
  }
 else {
    JsonMapper<T> mapper=LoganSquareMapperFinder.mapperFor(fieldType);
    return mapper.parse(string);
  }
}
