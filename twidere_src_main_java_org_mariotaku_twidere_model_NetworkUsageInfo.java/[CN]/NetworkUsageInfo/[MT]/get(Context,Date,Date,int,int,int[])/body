{
  final ContentResolver cr=context.getContentResolver();
  final long startTime=TimeUnit.HOURS.convert(start.getTime(),TimeUnit.MILLISECONDS);
  final long endTime=TimeUnit.HOURS.convert(end.getTime(),TimeUnit.MILLISECONDS);
  final Expression where=Expression.and(Expression.greaterEquals(NetworkUsages.TIME_IN_HOURS,startTime),Expression.lesserThan(NetworkUsages.TIME_IN_HOURS,endTime),Expression.in(new Columns.Column(NetworkUsages.REQUEST_NETWORK),new RawItemArray(networks)));
  final int days=(int)TimeUnit.DAYS.convert(endTime - startTime,TimeUnit.HOURS);
  final Cursor c=cr.query(NetworkUsages.CONTENT_URI,NetworkUsages.COLUMNS,where.getSQL(),null,NetworkUsages.TIME_IN_HOURS);
  final int idxDate=c.getColumnIndex(NetworkUsages.TIME_IN_HOURS);
  final int idxSent=c.getColumnIndex(NetworkUsages.KILOBYTES_SENT);
  final int idxReceived=c.getColumnIndex(NetworkUsages.KILOBYTES_RECEIVED);
  final int idxType=c.getColumnIndex(NetworkUsages.REQUEST_TYPE);
  final double[][] chartUsage=new double[days][RequestType.values().length];
  double totalReceived=0, totalSent=0;
  final double[] usageTotal=new double[RequestType.values().length];
  c.moveToFirst();
  while (!c.isAfterLast()) {
    final long hours=c.getLong(idxDate);
    final int idx=(int)TimeUnit.DAYS.convert((hours - startTime),TimeUnit.HOURS);
    final double sent=c.getDouble(idxSent);
    final double received=c.getDouble(idxReceived);
    final String type=c.getString(idxType);
    final double hourTypeTotal=sent + received;
    final int typeIdx=RequestType.getValue(type);
    chartUsage[idx][typeIdx]+=hourTypeTotal;
    totalReceived+=received;
    totalSent+=sent;
    usageTotal[typeIdx]+=hourTypeTotal;
    c.moveToNext();
  }
  c.close();
  double dayUsageMax=0;
  for (int i=0; i < days; i++) {
    final double[] dayUsage=chartUsage[i];
    dayUsageMax=Math.max(dayUsageMax,MathUtils.sum(dayUsage));
  }
  return new NetworkUsageInfo(chartUsage,usageTotal,totalReceived,totalSent,dayUsageMax,dayMin,dayMax);
}
