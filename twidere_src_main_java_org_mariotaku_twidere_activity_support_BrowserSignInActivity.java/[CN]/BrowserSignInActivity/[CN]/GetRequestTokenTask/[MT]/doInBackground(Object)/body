{
  final ConfigurationBuilder cb=new ConfigurationBuilder();
  final boolean enable_gzip_compressing=mPreferences.getBoolean(KEY_GZIP_COMPRESSING,false);
  final boolean ignore_ssl_error=mPreferences.getBoolean(KEY_IGNORE_SSL_ERROR,false);
  final boolean enable_proxy=mPreferences.getBoolean(KEY_ENABLE_PROXY,false);
  final String consumerKey=getNonEmptyString(mPreferences,KEY_CONSUMER_KEY,TWITTER_CONSUMER_KEY);
  final String consumerSecret=getNonEmptyString(mPreferences,KEY_CONSUMER_SECRET,TWITTER_CONSUMER_SECRET);
  cb.setHostAddressResolverFactory(new TwidereHostResolverFactory(mApplication));
  Utils.setClientUserAgent(mActivity,consumerKey,consumerSecret,cb);
  cb.setRestBaseURL(DEFAULT_REST_BASE_URL);
  cb.setOAuthBaseURL(DEFAULT_OAUTH_BASE_URL);
  cb.setSigningRestBaseURL(DEFAULT_SIGNING_REST_BASE_URL);
  cb.setSigningOAuthBaseURL(DEFAULT_SIGNING_OAUTH_BASE_URL);
  if (!isEmpty(mConsumerKey) && !isEmpty(mConsumerSecret)) {
    cb.setOAuthConsumerKey(mConsumerKey);
    cb.setOAuthConsumerSecret(mConsumerSecret);
  }
 else {
    cb.setOAuthConsumerKey(consumerKey);
    cb.setOAuthConsumerSecret(consumerSecret);
  }
  cb.setGZIPEnabled(enable_gzip_compressing);
  cb.setIgnoreSSLError(ignore_ssl_error);
  if (enable_proxy) {
    final String proxy_host=mPreferences.getString(KEY_PROXY_HOST,null);
    final int proxy_port=ParseUtils.parseInt(mPreferences.getString(KEY_PROXY_PORT,"-1"));
    if (!isEmpty(proxy_host) && proxy_port > 0) {
      cb.setHttpProxyHost(proxy_host);
      cb.setHttpProxyPort(proxy_port);
    }
  }
  try {
    final Configuration conf=cb.build();
    final TwitterOAuth twitter=new TwitterFactory(conf).getInstance(new OAuthAuthorization(conf.getOAuthConsumerKey(),conf.getOAuthConsumerSecret()),TwitterOAuth.class);
    return twitter.getRequestToken(OAUTH_CALLBACK_OOB);
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
  return null;
}
