{
  String endpointUrl, signEndpointUrl;
  endpointUrl=TwitterAPIUtils.getApiUrl(apiUrlFormat,"api",null);
  if (!sameOAuthSigningUrl) {
    signEndpointUrl=TwitterAPIUtils.getApiUrl(DEFAULT_TWITTER_API_URL_FORMAT,"api",null);
  }
 else {
    signEndpointUrl=endpointUrl;
  }
  Endpoint endpoint=new OAuthEndpoint(endpointUrl,signEndpointUrl);
  OAuthAuthorization auth=new OAuthAuthorization(consumerKey.getOauthToken(),consumerKey.getOauthTokenSecret());
  final TwitterOAuth oauth=TwitterAPIFactory.getInstance(context,endpoint,auth,TwitterOAuth.class);
  final OAuthPasswordAuthenticator authenticator=new OAuthPasswordAuthenticator(oauth);
  final OAuthToken accessToken=authenticator.getOAuthAccessToken(username,password);
  final long userId=accessToken.getUserId();
  if (userId <= 0)   return new SignInResponse(false,false,null);
  final String versionSuffix=noVersionSuffix ? null : "1.1";
  endpointUrl=TwitterAPIUtils.getApiUrl(apiUrlFormat,"api",versionSuffix);
  if (!sameOAuthSigningUrl) {
    signEndpointUrl=TwitterAPIUtils.getApiUrl(DEFAULT_TWITTER_API_URL_FORMAT,"api",versionSuffix);
  }
 else {
    signEndpointUrl=endpointUrl;
  }
  endpoint=new OAuthEndpoint(endpointUrl,signEndpointUrl);
  auth=new OAuthAuthorization(consumerKey.getOauthToken(),consumerKey.getOauthTokenSecret(),accessToken);
  final Twitter twitter=TwitterAPIFactory.getInstance(context,endpoint,auth,Twitter.class);
  final User user=twitter.verifyCredentials();
  final int color=analyseUserProfileColor(user);
  return new SignInResponse(isUserLoggedIn(context,userId),auth,user,ParcelableCredentials.AUTH_TYPE_OAUTH,color,apiUrlFormat,sameOAuthSigningUrl,noVersionSuffix);
}
