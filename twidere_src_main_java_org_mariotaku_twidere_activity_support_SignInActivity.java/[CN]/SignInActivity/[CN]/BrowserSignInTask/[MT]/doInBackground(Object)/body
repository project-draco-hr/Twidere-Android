{
  try {
    final String versionSuffix=noVersionSuffix ? null : "1.1";
    Endpoint endpoint=TwitterAPIFactory.getOAuthSignInEndpoint(apiUrlFormat,sameOauthSigningUrl);
    final TwitterOAuth oauth=TwitterAPIFactory.getInstance(context,endpoint,new OAuthAuthorization(consumerKey.getOauthToken(),consumerKey.getOauthTokenSecret()),TwitterOAuth.class);
    final OAuthToken accessToken;
    if (oauthVerifier != null) {
      accessToken=oauth.getAccessToken(requestToken,oauthVerifier);
    }
 else {
      accessToken=oauth.getAccessToken(requestToken);
    }
    final OAuthAuthorization auth=new OAuthAuthorization(consumerKey.getOauthToken(),consumerKey.getOauthTokenSecret(),accessToken);
    endpoint=TwitterAPIFactory.getOAuthEndpoint(apiUrlFormat,"api",versionSuffix,sameOauthSigningUrl);
    final Twitter twitter=TwitterAPIFactory.getInstance(context,endpoint,auth,Twitter.class);
    final User user=twitter.verifyCredentials();
    final int color=analyseUserProfileColor(user);
    return new SignInResponse(isUserLoggedIn(context,user.getId()),auth,user,ParcelableCredentials.AUTH_TYPE_OAUTH,color,apiUrlFormat,sameOauthSigningUrl,noVersionSuffix,detectAccountType(twitter,user));
  }
 catch (  final TwitterException e) {
    return new SignInResponse(false,false,e);
  }
}
