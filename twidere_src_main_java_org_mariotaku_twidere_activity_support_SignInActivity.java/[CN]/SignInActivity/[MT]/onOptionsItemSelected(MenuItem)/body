{
switch (item.getItemId()) {
case android.R.id.home:
{
      final AccountKey[] accountKeys=getActivatedAccountKeys(this);
      if (accountKeys.length > 0) {
        onBackPressed();
      }
      break;
    }
case R.id.settings:
{
    if (mTask != null && mTask.getStatus() == AsyncTask.Status.RUNNING)     return false;
    final Intent intent=new Intent(this,SettingsActivity.class);
    startActivity(intent);
    break;
  }
case R.id.edit_api:
{
  if (mTask != null && mTask.getStatus() == AsyncTask.Status.RUNNING)   return false;
  setDefaultAPI();
  final Intent intent=new Intent(this,APIEditorActivity.class);
  intent.putExtra(Accounts.API_URL_FORMAT,mAPIUrlFormat);
  intent.putExtra(Accounts.AUTH_TYPE,mAuthType);
  intent.putExtra(Accounts.SAME_OAUTH_SIGNING_URL,mSameOAuthSigningUrl);
  intent.putExtra(Accounts.NO_VERSION_SUFFIX,mNoVersionSuffix);
  intent.putExtra(Accounts.CONSUMER_KEY,mConsumerKey);
  intent.putExtra(Accounts.CONSUMER_SECRET,mConsumerSecret);
  startActivityForResult(intent,REQUEST_EDIT_API);
  break;
}
case R.id.open_in_browser:
{
if (mAuthType != ParcelableCredentials.AUTH_TYPE_OAUTH || mTask != null && mTask.getStatus() == AsyncTask.Status.RUNNING) return false;
saveEditedText();
final Intent intent=new Intent(this,BrowserSignInActivity.class);
intent.putExtra(Accounts.CONSUMER_KEY,mConsumerKey);
intent.putExtra(Accounts.CONSUMER_SECRET,mConsumerSecret);
startActivityForResult(intent,REQUEST_BROWSER_SIGN_IN);
break;
}
}
return super.onOptionsItemSelected(item);
}
