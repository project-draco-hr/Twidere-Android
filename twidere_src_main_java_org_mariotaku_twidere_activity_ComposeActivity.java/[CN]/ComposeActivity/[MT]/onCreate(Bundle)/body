{
  super.onCreate(savedInstanceState);
  GeneralComponentHelper.build(this).inject(this);
  mLocationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  mNameFirst=mPreferences.getBoolean(KEY_NAME_FIRST);
  setContentView(R.layout.activity_compose);
  setFinishOnTouchOutside(false);
  final ParcelableCredentials[] accounts=DataStoreUtils.getCredentialsArray(this,false,false);
  if (accounts.length <= 0) {
    final Intent intent=new Intent(INTENT_ACTION_TWITTER_LOGIN);
    intent.setClass(this,SignInActivity.class);
    startActivity(intent);
    finish();
    return;
  }
  final UserKey[] defaultAccountIds=ParcelableAccountUtils.getAccountKeys(accounts);
  mMenuBar.setOnMenuItemClickListener(this);
  setupEditText();
  mAccountSelectorContainer.setOnClickListener(this);
  mAccountSelectorButton.setOnClickListener(this);
  mReplyLabel.setOnClickListener(this);
  mLocationSwitch.setMax(LOCATION_OPTIONS.length);
  final boolean attachLocation=mPreferences.getBoolean(KEY_ATTACH_LOCATION);
  final boolean attachPreciseLocation=mPreferences.getBoolean(KEY_ATTACH_PRECISE_LOCATION);
  if (attachLocation) {
    if (attachPreciseLocation) {
      mLocationSwitch.setCheckedPosition(ArrayUtils.indexOf(LOCATION_OPTIONS,LOCATION_VALUE_COORDINATE));
    }
 else {
      mLocationSwitch.setCheckedPosition(ArrayUtils.indexOf(LOCATION_OPTIONS,LOCATION_VALUE_PLACE));
    }
  }
 else {
    mLocationSwitch.setCheckedPosition(ArrayUtils.indexOf(LOCATION_OPTIONS,LOCATION_VALUE_NONE));
  }
  mLocationSwitch.setOnCheckedChangeListener(new MultiValueSwitch.OnCheckedChangeListener(){
    @Override public void onCheckedChange(    int position){
      final String value=LOCATION_OPTIONS[mLocationSwitch.getCheckedPosition()];
      boolean attachLocation=false, attachPreciseLocation=false;
switch (value) {
case LOCATION_VALUE_COORDINATE:
{
          attachLocation=true;
          attachPreciseLocation=true;
          mLocationText.setTag(null);
          break;
        }
case LOCATION_VALUE_PLACE:
{
        attachLocation=true;
        attachPreciseLocation=false;
        break;
      }
  }
  SharedPreferences.Editor editor=mPreferences.edit();
  editor.putBoolean(KEY_ATTACH_LOCATION,attachLocation);
  editor.putBoolean(KEY_ATTACH_PRECISE_LOCATION,attachPreciseLocation);
  editor.apply();
  if (attachLocation) {
    requestOrUpdateLocation();
  }
 else   if (mLocationListener != null) {
    try {
      mLocationManager.removeUpdates(mLocationListener);
      mLocationListener=null;
    }
 catch (    SecurityException e) {
    }
  }
  updateLocationState();
  setMenu();
  updateTextCount();
}
}
);
final LinearLayoutManager linearLayoutManager=new FixedLinearLayoutManager(this);
linearLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);
linearLayoutManager.setStackFromEnd(true);
mAccountSelector.setLayoutManager(linearLayoutManager);
mAccountSelector.setItemAnimator(new DefaultItemAnimator());
mAccountsAdapter=new AccountIconsAdapter(this);
mAccountSelector.setAdapter(mAccountsAdapter);
mAccountsAdapter.setAccounts(accounts);
mMediaPreviewAdapter=new MediaPreviewAdapter(this,new PreviewGridOnStartDragListener(this));
mItemTouchHelper=new ItemTouchHelper(new AttachedMediaItemTouchHelperCallback(mMediaPreviewAdapter));
final LinearLayoutManager layoutManager=new LinearLayoutManager(this);
layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);
mAttachedMediaPreview.setLayoutManager(layoutManager);
mAttachedMediaPreview.setAdapter(mMediaPreviewAdapter);
registerForContextMenu(mAttachedMediaPreview);
mItemTouchHelper.attachToRecyclerView(mAttachedMediaPreview);
final int previewGridSpacing=getResources().getDimensionPixelSize(R.dimen.element_spacing_small);
mAttachedMediaPreview.addItemDecoration(new PreviewGridItemDecoration(previewGridSpacing));
final Intent intent=getIntent();
if (savedInstanceState != null) {
final UserKey[] selected=Utils.newParcelableArray(savedInstanceState.getParcelableArray(EXTRA_ACCOUNT_KEYS),UserKey.CREATOR);
mAccountsAdapter.setSelectedAccountIds(selected);
mIsPossiblySensitive=savedInstanceState.getBoolean(EXTRA_IS_POSSIBLY_SENSITIVE);
final ArrayList<ParcelableMediaUpdate> mediaList=savedInstanceState.getParcelableArrayList(EXTRA_MEDIA);
if (mediaList != null) {
  addMedia(mediaList);
}
mInReplyToStatus=savedInstanceState.getParcelable(EXTRA_STATUS);
mMentionUser=savedInstanceState.getParcelable(EXTRA_USER);
mDraft=savedInstanceState.getParcelable(EXTRA_DRAFT);
mShouldSaveAccounts=savedInstanceState.getBoolean(EXTRA_SHOULD_SAVE_ACCOUNTS);
mOriginalText=savedInstanceState.getString(EXTRA_ORIGINAL_TEXT);
setLabel(intent);
}
 else {
final int notificationId=intent.getIntExtra(EXTRA_NOTIFICATION_ID,-1);
final UserKey notificationAccount=intent.getParcelableExtra(EXTRA_NOTIFICATION_ACCOUNT);
if (notificationId != -1) {
  mTwitterWrapper.clearNotificationAsync(notificationId,notificationAccount);
}
if (!handleIntent(intent)) {
  handleDefaultIntent(intent);
}
setLabel(intent);
final UserKey[] selectedAccountIds=mAccountsAdapter.getSelectedAccountKeys();
if (ArrayUtils.isEmpty(selectedAccountIds)) {
  final UserKey[] idsInPrefs=UserKey.arrayOf(mPreferences.getString(KEY_COMPOSE_ACCOUNTS,null));
  UserKey[] intersection=null;
  if (idsInPrefs != null) {
    intersection=TwidereArrayUtils.intersection(idsInPrefs,defaultAccountIds);
  }
  mAccountsAdapter.setSelectedAccountIds(ArrayUtils.isEmpty(intersection) ? defaultAccountIds : intersection);
}
mOriginalText=ParseUtils.parseString(mEditText.getText());
}
final Menu menu=mMenuBar.getMenu();
getMenuInflater().inflate(R.menu.menu_compose,menu);
ThemeUtils.wrapMenuIcon(mMenuBar);
mSendView.setOnClickListener(this);
mSendView.setOnLongClickListener(this);
final Intent composeExtensionsIntent=new Intent(INTENT_ACTION_EXTENSION_COMPOSE);
MenuUtils.addIntentToMenu(this,menu,composeExtensionsIntent,MENU_GROUP_COMPOSE_EXTENSION);
final Intent imageExtensionsIntent=new Intent(INTENT_ACTION_EXTENSION_EDIT_IMAGE);
final MenuItem mediaMenuItem=menu.findItem(R.id.media_menu);
if (mediaMenuItem != null && mediaMenuItem.hasSubMenu()) {
MenuUtils.addIntentToMenu(this,mediaMenuItem.getSubMenu(),imageExtensionsIntent,MENU_GROUP_IMAGE_EXTENSION);
}
setMenu();
updateLocationState();
notifyAccountSelectionChanged();
mTextChanged=false;
updateAttachedMediaView();
}
