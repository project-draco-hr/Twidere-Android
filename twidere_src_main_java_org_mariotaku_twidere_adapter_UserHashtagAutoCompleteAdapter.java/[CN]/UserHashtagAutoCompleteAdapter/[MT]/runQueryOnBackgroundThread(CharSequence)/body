{
  char token=mToken;
  if (mEditText != null && constraint != null) {
    final CharSequence text=mEditText.getText();
    token=text.charAt(mEditText.getSelectionEnd() - constraint.length() - 1);
  }
  if (isAtSymbol(token) == isAtSymbol(mToken)) {
    final FilterQueryProvider filter=getFilterQueryProvider();
    if (filter != null)     return filter.runQuery(constraint);
  }
  mToken=token;
  final String constraintEscaped=constraint != null ? constraint.toString().replaceAll("_","^_") : null;
  if (isAtSymbol(token)) {
    final Expression selection;
    final String[] selectionArgs;
    if (constraintEscaped != null) {
      final long[] nicknameIds=Utils.getMatchedNicknameIds(ParseUtils.parseString(constraint),mUserNicknamePreferences);
      selection=Expression.or(Expression.likeRaw(new Column(CachedUsers.SCREEN_NAME),"?||'%'","^"),Expression.likeRaw(new Column(CachedUsers.NAME),"?||'%'","^"),Expression.in(new Column(CachedUsers.USER_ID),new RawItemArray(nicknameIds)));
      selectionArgs=new String[]{constraintEscaped,constraintEscaped};
    }
 else {
      selection=null;
      selectionArgs=null;
    }
    final OrderBy orderBy=new OrderBy(CachedUsers.SCREEN_NAME,CachedUsers.NAME);
    return mResolver.query(CachedUsers.CONTENT_URI,CachedUsers.BASIC_COLUMNS,selection != null ? selection.getSQL() : null,selectionArgs,orderBy.getSQL());
  }
 else {
    final String selection=constraintEscaped != null ? CachedHashtags.NAME + " LIKE ?||'%' ESCAPE '^'" : null;
    final String[] selectionArgs=constraintEscaped != null ? new String[]{constraintEscaped} : null;
    return mDatabase.query(true,CachedHashtags.TABLE_NAME,CachedHashtags.COLUMNS,selection,selectionArgs,null,null,CachedHashtags.NAME,null);
  }
}
