{
  final LinkedList<String> names=new LinkedList<String>();
  if (cns != null && cns.length > 0 && cns[0] != null) {
    names.add(cns[0]);
  }
  if (subjectAlts != null) {
    for (    final String subjectAlt : subjectAlts) {
      if (subjectAlt != null) {
        names.add(subjectAlt);
      }
    }
  }
  if (names.isEmpty())   return false;
  final StringBuilder buf=new StringBuilder();
  final String hostName=normaliseIPv6Address(host.trim().toLowerCase(Locale.US));
  boolean match=false;
  for (final Iterator<String> it=names.iterator(); it.hasNext(); ) {
    String cn=it.next();
    cn=cn.toLowerCase(Locale.US);
    buf.append(" <");
    buf.append(cn);
    buf.append('>');
    if (it.hasNext()) {
      buf.append(" OR");
    }
    final String parts[]=cn.split("\\.");
    final boolean doWildcard=parts.length >= 3 && parts[0].endsWith("*") && validCountryWildcard(cn) && !isIPAddress(host);
    if (doWildcard) {
      final String firstpart=parts[0];
      if (firstpart.length() > 1) {
        final String prefix=firstpart.substring(0,firstpart.length() - 1);
        final String suffix=cn.substring(firstpart.length());
        final String hostSuffix=hostName.substring(prefix.length());
        match=hostName.startsWith(prefix) && hostSuffix.endsWith(suffix);
      }
 else {
        match=hostName.endsWith(cn.substring(1));
      }
      if (match && strictWithSubDomains) {
        match=countDots(hostName) == countDots(cn);
      }
    }
 else {
      match=hostName.equals(normaliseIPv6Address(cn));
    }
    if (match) {
      break;
    }
  }
  return match;
}
