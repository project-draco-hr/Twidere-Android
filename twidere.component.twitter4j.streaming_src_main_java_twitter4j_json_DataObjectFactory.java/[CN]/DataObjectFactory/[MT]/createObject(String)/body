{
  try {
    final JSONObject json=new JSONObject(rawJSON);
    final JSONObjectType.Type jsonObjectType=JSONObjectType.determine(json);
switch (jsonObjectType) {
case SENDER:
      return registerJSONObject(directMessageConstructor.newInstance(json.getJSONObject("direct_message")),json);
case STATUS:
    return registerJSONObject(statusConstructor.newInstance(json),json);
case DIRECT_MESSAGE:
  return registerJSONObject(directMessageConstructor.newInstance(json.getJSONObject("direct_message")),json);
case DELETE:
return registerJSONObject(statusDeletionNoticeConstructor.newInstance(json.getJSONObject("delete").getJSONObject("status")),json);
case LIMIT:
return json;
case SCRUB_GEO:
return json;
default :
return json;
}
}
 catch (final InstantiationException e) {
throw new TwitterException(e);
}
catch (final IllegalAccessException e) {
throw new AssertionError(e);
}
catch (final InvocationTargetException e) {
throw new TwitterException(e);
}
catch (final JSONException e) {
throw new TwitterException(e);
}
}
