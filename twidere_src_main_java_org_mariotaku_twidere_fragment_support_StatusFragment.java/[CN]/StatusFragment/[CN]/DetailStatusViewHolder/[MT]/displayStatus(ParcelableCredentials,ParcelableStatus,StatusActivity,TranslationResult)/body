{
  if (account == null || status == null)   return;
  final StatusFragment fragment=adapter.getFragment();
  final Context context=adapter.getContext();
  final MediaLoaderWrapper loader=adapter.getMediaLoader();
  final UserColorNameManager manager=adapter.getUserColorNameManager();
  AsyncTwitterWrapper twitter=adapter.getTwitterWrapper();
  final boolean nameFirst=adapter.isNameFirst();
  linkClickHandler.setStatus(status);
  if (status.retweet_id > 0) {
    final String retweetedBy=manager.getDisplayName(status.retweeted_by_user_id,status.retweeted_by_user_name,status.retweeted_by_user_screen_name,nameFirst,false);
    retweetedByView.setText(context.getString(R.string.name_retweeted,retweetedBy));
    retweetedByView.setVisibility(View.VISIBLE);
  }
 else {
    retweetedByView.setText(null);
    retweetedByView.setVisibility(View.GONE);
  }
  profileContainer.drawEnd(Utils.getAccountColor(context,status.account_id));
  final int layoutPosition=getLayoutPosition();
  if (status.is_quote && ArrayUtils.isEmpty(status.media)) {
    quoteOriginalLink.setVisibility(View.VISIBLE);
    quotedNameContainer.setVisibility(View.VISIBLE);
    quotedTextView.setVisibility(View.VISIBLE);
    quoteIndicator.setVisibility(View.VISIBLE);
    quotedNameView.setText(manager.getUserNickname(status.quoted_user_id,status.quoted_user_name,false));
    quotedScreenNameView.setText(String.format("@%s",status.quoted_user_screen_name));
    final Spanned quotedText=HtmlSpanBuilder.fromHtml(status.quoted_text_html);
    quotedTextView.setText(linkify.applyAllLinks(quotedText,status.account_id,layoutPosition,status.is_possibly_sensitive));
    quoteIndicator.setColor(manager.getUserColor(status.user_id,false));
    profileContainer.drawStart(manager.getUserColor(status.quoted_user_id,false));
  }
 else {
    quoteOriginalLink.setVisibility(View.GONE);
    quotedNameContainer.setVisibility(View.GONE);
    quotedTextView.setVisibility(View.GONE);
    quoteIndicator.setVisibility(View.GONE);
    profileContainer.drawStart(manager.getUserColor(status.user_id,false));
  }
  final long timestamp;
  if (status.is_retweet) {
    timestamp=status.retweet_timestamp;
  }
 else {
    timestamp=status.timestamp;
  }
  nameView.setText(manager.getUserNickname(status.user_id,status.user_name,false));
  screenNameView.setText(String.format("@%s",status.user_screen_name));
  loader.displayProfileImage(profileImageView,status.user_profile_image_url);
  final int typeIconRes=Utils.getUserTypeIconRes(status.user_is_verified,status.user_is_protected);
  final int typeDescriptionRes=Utils.getUserTypeDescriptionRes(status.user_is_verified,status.user_is_protected);
  if (typeIconRes != 0 && typeDescriptionRes != 0) {
    profileTypeView.setImageResource(typeIconRes);
    profileTypeView.setContentDescription(context.getString(typeDescriptionRes));
    profileTypeView.setVisibility(View.VISIBLE);
  }
 else {
    profileTypeView.setImageDrawable(null);
    profileTypeView.setContentDescription(null);
    profileTypeView.setVisibility(View.GONE);
  }
  final String timeString=Utils.formatToLongTimeString(context,timestamp);
  if (!TextUtils.isEmpty(timeString) && !TextUtils.isEmpty(status.source)) {
    timeSourceView.setText(HtmlSpanBuilder.fromHtml(context.getString(R.string.time_source,timeString,status.source)));
  }
 else   if (TextUtils.isEmpty(timeString) && !TextUtils.isEmpty(status.source)) {
    timeSourceView.setText(HtmlSpanBuilder.fromHtml(context.getString(R.string.source,status.source)));
  }
 else   if (!TextUtils.isEmpty(timeString) && TextUtils.isEmpty(status.source)) {
    timeSourceView.setText(timeString);
  }
  timeSourceView.setMovementMethod(LinkMovementMethod.getInstance());
  final Spanned text=HtmlSpanBuilder.fromHtml(status.text_html);
  textView.setText(linkify.applyAllLinks(text,status.account_id,layoutPosition,status.is_possibly_sensitive));
  if (!TextUtils.isEmpty(status.place_full_name)) {
    locationView.setVisibility(View.VISIBLE);
    locationView.setText(status.place_full_name);
    locationView.setClickable(ParcelableLocation.isValidLocation(status.location));
  }
 else   if (ParcelableLocation.isValidLocation(status.location)) {
    locationView.setVisibility(View.VISIBLE);
    locationView.setText(R.string.view_map);
    locationView.setClickable(true);
  }
 else {
    locationView.setVisibility(View.GONE);
    locationView.setText(null);
  }
  final long repliesCount, retweetCount, favoriteCount;
  if (statusActivity != null) {
    repliesCount=statusActivity.getReplyCount();
    retweetCount=statusActivity.getRetweetCount();
    favoriteCount=statusActivity.getFavoriteCount();
  }
 else {
    repliesCount=status.reply_count;
    retweetCount=status.retweet_count;
    favoriteCount=status.favorite_count;
  }
  repliesContainer.setVisibility(repliesCount > 0 ? View.VISIBLE : View.GONE);
  retweetsContainer.setVisibility(!status.user_is_protected && retweetCount > 0 ? View.VISIBLE : View.GONE);
  favoritesContainer.setVisibility(favoriteCount > 0 ? View.VISIBLE : View.GONE);
  if (retweetsContainer.getVisibility() == View.VISIBLE || favoritesContainer.getVisibility() == View.VISIBLE || repliesContainer.getVisibility() == View.VISIBLE) {
    countsContainer.setVisibility(View.VISIBLE);
  }
 else {
    countsContainer.setVisibility(View.GONE);
  }
  final Locale locale=context.getResources().getConfiguration().locale;
  repliesCountView.setText(Utils.getLocalizedNumber(locale,repliesCount));
  retweetsCountView.setText(Utils.getLocalizedNumber(locale,retweetCount));
  favoritesCountView.setText(Utils.getLocalizedNumber(locale,favoriteCount));
  final UserProfileImagesAdapter interactUsersAdapter=(UserProfileImagesAdapter)interactUsersView.getAdapter();
  if (interactUsersAdapter != null) {
    interactUsersAdapter.clear();
    if (statusActivity != null && statusActivity.retweeters != null) {
      interactUsersAdapter.addAll(statusActivity.retweeters);
    }
  }
  final ParcelableMedia[] media=Utils.getPrimaryMedia(status);
  if (media == null) {
    mediaPreviewContainer.setVisibility(View.GONE);
    mediaPreview.setVisibility(View.GONE);
    mediaPreviewLoad.setVisibility(View.GONE);
    mediaPreview.displayMedia();
  }
 else   if (adapter.isDetailMediaExpanded()) {
    mediaPreviewContainer.setVisibility(View.VISIBLE);
    mediaPreview.setVisibility(View.VISIBLE);
    mediaPreviewLoad.setVisibility(View.GONE);
    mediaPreview.displayMedia(media,loader,status.account_id,adapter.getFragment(),adapter.getMediaLoadingHandler());
  }
 else {
    mediaPreviewContainer.setVisibility(View.VISIBLE);
    mediaPreview.setVisibility(View.GONE);
    mediaPreviewLoad.setVisibility(View.VISIBLE);
    mediaPreview.displayMedia();
  }
  if (TwitterCardUtils.isCardSupported(status.card)) {
    final Point size=TwitterCardUtils.getCardSize(status.card);
    twitterCard.setVisibility(View.VISIBLE);
    if (size != null) {
      twitterCard.setCardSize(size.x,size.y);
    }
 else {
      twitterCard.setCardSize(0,0);
    }
    final Fragment cardFragment=TwitterCardUtils.createCardFragment(status.card);
    final FragmentManager fm=fragment.getChildFragmentManager();
    if (cardFragment != null && !FragmentManagerTrojan.isStateSaved(fm)) {
      final FragmentTransaction ft=fm.beginTransaction();
      ft.replace(R.id.twitter_card,cardFragment);
      ft.commit();
    }
 else {
      twitterCard.setVisibility(View.GONE);
    }
  }
 else {
    twitterCard.setVisibility(View.GONE);
  }
  Utils.setMenuForStatus(context,fragment.mPreferences,menuBar.getMenu(),status,adapter.getStatusAccount(),twitter);
  final String lang=status.lang;
  if (!Utils.isOfficialCredentials(context,account) || TextUtils.isEmpty(lang)) {
    translateLabelView.setText(R.string.unknown_language);
    translateContainer.setVisibility(View.GONE);
  }
 else {
    translateLabelView.setText(new Locale(lang).getDisplayLanguage());
    translateContainer.setVisibility(View.VISIBLE);
    if (translation != null) {
      translateResultView.setVisibility(View.VISIBLE);
      translateResultView.setText(translation.getText());
    }
 else {
      translateResultView.setVisibility(View.GONE);
    }
  }
  textView.setTextIsSelectable(true);
  quotedTextView.setTextIsSelectable(true);
  textView.setMovementMethod(LinkMovementMethod.getInstance());
  quotedTextView.setMovementMethod(LinkMovementMethod.getInstance());
}
