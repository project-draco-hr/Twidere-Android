{
  final long timestamp=System.currentTimeMillis() / 1000;
  final long nonce=timestamp + RAND.nextInt();
  final List<HttpParameter> oauthHeaderParams=new ArrayList<HttpParameter>(5);
  oauthHeaderParams.add(new HttpParameter("oauth_consumer_key",consumerKey));
  oauthHeaderParams.add(OAUTH_SIGNATURE_METHOD);
  oauthHeaderParams.add(new HttpParameter("oauth_timestamp",timestamp));
  oauthHeaderParams.add(new HttpParameter("oauth_nonce",nonce));
  oauthHeaderParams.add(new HttpParameter("oauth_version","1.0"));
  if (oauthToken != null) {
    oauthHeaderParams.add(new HttpParameter("oauth_token",oauthToken.getToken()));
  }
  final List<HttpParameter> signatureBaseParams=new ArrayList<HttpParameter>(oauthHeaderParams.size());
  signatureBaseParams.addAll(oauthHeaderParams);
  parseGetParameters(sign_url,signatureBaseParams);
  final StringBuffer base=new StringBuffer(method).append("&").append(HttpParameter.encode(constructRequestURL(sign_url))).append("&");
  base.append(HttpParameter.encode(normalizeRequestParameters(signatureBaseParams)));
  final String oauthBaseString=base.toString();
  final String signature=generateSignature(oauthBaseString,oauthToken);
  oauthHeaderParams.add(new HttpParameter("oauth_signature",signature));
  return oauthHeaderParams;
}
