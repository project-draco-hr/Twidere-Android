{
  if (args == null || args.length == 0)   return null;
  final ContentResolver resolver=context.getContentResolver();
  final Extractor extractor=new Extractor();
  for (  final TwitterListResponse<org.mariotaku.twidere.api.twitter.model.Status> response : args) {
    if (response == null || response.list == null) {
      continue;
    }
    final List<org.mariotaku.twidere.api.twitter.model.Status> list=response.list;
    for (int bulkIdx=0, totalSize=list.size(); bulkIdx < totalSize; bulkIdx+=100) {
      for (int idx=bulkIdx, end=Math.min(totalSize,bulkIdx + ContentResolverUtils.MAX_BULK_COUNT); idx < end; idx++) {
        final org.mariotaku.twidere.api.twitter.model.Status status=list.get(idx);
        final Set<ContentValues> usersValues=new HashSet<>();
        final Set<ContentValues> statusesValues=new HashSet<>();
        final Set<ContentValues> hashTagValues=new HashSet<>();
        statusesValues.add(createStatus(status,response.accountId));
        final String text=TwitterContentUtils.unescapeTwitterStatusText(status.getText());
        for (        final String hashtag : extractor.extractHashtags(text)) {
          final ContentValues values=new ContentValues();
          values.put(CachedHashtags.NAME,hashtag);
          hashTagValues.add(values);
        }
        usersValues.add(createCachedUser(status.getUser()));
        if (status.isRetweet()) {
          usersValues.add(createCachedUser(status.getRetweetedStatus().getUser()));
        }
        bulkInsert(resolver,CachedStatuses.CONTENT_URI,statusesValues);
        bulkInsert(resolver,CachedHashtags.CONTENT_URI,hashTagValues);
        bulkInsert(resolver,CachedUsers.CONTENT_URI,usersValues);
      }
    }
  }
  return null;
}
