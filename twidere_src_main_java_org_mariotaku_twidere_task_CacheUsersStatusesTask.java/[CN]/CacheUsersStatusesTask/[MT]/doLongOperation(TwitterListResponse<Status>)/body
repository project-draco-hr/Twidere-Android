{
  final ContentResolver resolver=context.getContentResolver();
  final Extractor extractor=new Extractor();
  if (params == null || !params.hasData()) {
    return null;
  }
  final List<Status> list=params.getData();
  for (int bulkIdx=0, totalSize=list.size(); bulkIdx < totalSize; bulkIdx+=100) {
    for (int idx=bulkIdx, end=Math.min(totalSize,bulkIdx + ContentResolverUtils.MAX_BULK_COUNT); idx < end; idx++) {
      final Status status=list.get(idx);
      final Set<ContentValues> usersValues=new HashSet<>();
      final Set<ContentValues> statusesValues=new HashSet<>();
      final Set<ContentValues> hashTagValues=new HashSet<>();
      statusesValues.add(ContentValuesCreator.createStatus(status,params.accountId));
      final String text=TwitterContentUtils.unescapeTwitterStatusText(status.getText());
      for (      final String hashtag : extractor.extractHashtags(text)) {
        final ContentValues values=new ContentValues();
        values.put(CachedHashtags.NAME,hashtag);
        hashTagValues.add(values);
      }
      final ContentValues cachedUser=ContentValuesCreator.createCachedUser(status.getUser());
      cachedUser.put(CachedUsers.LAST_SEEN,System.currentTimeMillis());
      usersValues.add(cachedUser);
      if (status.isRetweet()) {
        final ContentValues cachedRetweetedUser=ContentValuesCreator.createCachedUser(status.getRetweetedStatus().getUser());
        cachedRetweetedUser.put(CachedUsers.LAST_SEEN,System.currentTimeMillis());
        usersValues.add(cachedRetweetedUser);
      }
      ContentResolverUtils.bulkInsert(resolver,CachedStatuses.CONTENT_URI,statusesValues);
      ContentResolverUtils.bulkInsert(resolver,CachedHashtags.CONTENT_URI,hashTagValues);
      ContentResolverUtils.bulkInsert(resolver,CachedUsers.CONTENT_URI,usersValues);
    }
  }
  return null;
}
