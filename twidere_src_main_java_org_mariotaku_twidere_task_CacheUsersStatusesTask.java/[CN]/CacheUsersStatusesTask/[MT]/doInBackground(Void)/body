{
  if (responses == null || responses.length == 0)   return null;
  final ContentResolver resolver=context.getContentResolver();
  final Extractor extractor=new Extractor();
  final Set<ContentValues> usersValues=new HashSet<>();
  final Set<ContentValues> statusesValues=new HashSet<>();
  final Set<ContentValues> hashTagValues=new HashSet<>();
  final Set<Long> allStatusIds=new HashSet<>();
  final Set<String> allHashTags=new HashSet<>();
  final Set<User> users=new HashSet<>();
  for (  final TwitterListResponse<twitter4j.Status> response : responses) {
    if (response == null || response.list == null) {
      continue;
    }
    final List<twitter4j.Status> list=response.list;
    final Set<Long> userIds=new HashSet<>();
    for (    final twitter4j.Status status : list) {
      if (status == null || status.getId() <= 0) {
        continue;
      }
      if (status.isRetweet()) {
        final User retweetUser=status.getRetweetedStatus().getUser();
        userIds.add(retweetUser.getId());
      }
      allStatusIds.add(status.getId());
      statusesValues.add(createStatus(status,response.account_id));
      allHashTags.addAll(extractor.extractHashtags(status.getText()));
      final User user=status.getUser();
      users.add(user);
      userIds.add(user.getId());
      final ContentValues filtered_users_values=new ContentValues();
      filtered_users_values.put(Filters.Users.NAME,user.getName());
      filtered_users_values.put(Filters.Users.SCREEN_NAME,user.getScreenName());
      final String filtered_users_where=Expression.equals(Filters.Users.USER_ID,user.getId()).getSQL();
      resolver.update(Filters.Users.CONTENT_URI,filtered_users_values,filtered_users_where,null);
    }
  }
  bulkDelete(resolver,CachedStatuses.CONTENT_URI,CachedStatuses.STATUS_ID,allStatusIds,null,false);
  bulkInsert(resolver,CachedStatuses.CONTENT_URI,statusesValues);
  for (  final String hashtag : allHashTags) {
    final ContentValues values=new ContentValues();
    values.put(CachedHashtags.NAME,hashtag);
    hashTagValues.add(values);
  }
  bulkDelete(resolver,CachedHashtags.CONTENT_URI,CachedHashtags.NAME,allHashTags,null,true);
  bulkInsert(resolver,CachedHashtags.CONTENT_URI,hashTagValues);
  for (  final User user : users) {
    usersValues.add(createCachedUser(user));
  }
  bulkInsert(resolver,CachedUsers.CONTENT_URI,usersValues);
  return null;
}
