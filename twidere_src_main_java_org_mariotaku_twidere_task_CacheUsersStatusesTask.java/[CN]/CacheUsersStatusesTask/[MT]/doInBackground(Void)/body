{
  if (all_statuses == null || all_statuses.length == 0)   return null;
  final Extractor extractor=new Extractor();
  final Set<ContentValues> cachedUsersValues=new HashSet<>();
  final Set<ContentValues> cached_statuses_values=new HashSet<>();
  final Set<ContentValues> hashtag_values=new HashSet<>();
  final Set<Long> userIds=new HashSet<>();
  final Set<Long> status_ids=new HashSet<>();
  final Set<String> hashtags=new HashSet<>();
  final Set<User> users=new HashSet<>();
  for (  final TwitterListResponse<twitter4j.Status> values : all_statuses) {
    if (values == null || values.list == null) {
      continue;
    }
    final List<twitter4j.Status> list=values.list;
    for (    final twitter4j.Status status : list) {
      if (status == null || status.getId() <= 0) {
        continue;
      }
      status_ids.add(status.getId());
      cached_statuses_values.add(createStatus(status,values.account_id));
      hashtags.addAll(extractor.extractHashtags(status.getText()));
      final User user=status.getUser();
      if (user != null && user.getId() > 0) {
        users.add(user);
        final ContentValues filtered_users_values=new ContentValues();
        filtered_users_values.put(Filters.Users.NAME,user.getName());
        filtered_users_values.put(Filters.Users.SCREEN_NAME,user.getScreenName());
        final String filtered_users_where=Expression.equals(Filters.Users.USER_ID,user.getId()).getSQL();
        resolver.update(Filters.Users.CONTENT_URI,filtered_users_values,filtered_users_where,null);
      }
    }
  }
  bulkDelete(resolver,CachedStatuses.CONTENT_URI,CachedStatuses.STATUS_ID,status_ids,null,false);
  bulkInsert(resolver,CachedStatuses.CONTENT_URI,cached_statuses_values);
  for (  final String hashtag : hashtags) {
    final ContentValues hashtag_value=new ContentValues();
    hashtag_value.put(CachedHashtags.NAME,hashtag);
    hashtag_values.add(hashtag_value);
  }
  bulkDelete(resolver,CachedHashtags.CONTENT_URI,CachedHashtags.NAME,hashtags,null,true);
  bulkInsert(resolver,CachedHashtags.CONTENT_URI,hashtag_values);
  for (  final User user : users) {
    userIds.add(user.getId());
    cachedUsersValues.add(createCachedUser(user));
  }
  bulkInsert(resolver,CachedUsers.CONTENT_URI,cachedUsersValues);
  return null;
}
