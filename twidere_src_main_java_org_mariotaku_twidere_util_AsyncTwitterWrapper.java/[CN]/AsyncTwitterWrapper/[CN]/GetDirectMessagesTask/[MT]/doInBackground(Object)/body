{
  final List<MessageListResponse> result=new ArrayList<>();
  if (accountIds == null)   return result;
  int idx=0;
  final int loadItemLimit=mPreferences.getInt(KEY_LOAD_ITEM_LIMIT,DEFAULT_LOAD_ITEM_LIMIT);
  for (  final long accountId : accountIds) {
    final Twitter twitter=TwitterAPIFactory.getTwitterInstance(mContext,accountId,true);
    if (twitter == null)     continue;
    try {
      final Paging paging=new Paging();
      paging.setCount(loadItemLimit);
      long max_id=-1, since_id=-1;
      if (isMaxIdsValid() && maxIds[idx] > 0) {
        max_id=maxIds[idx];
        paging.setMaxId(max_id);
      }
      if (isSinceIdsValid() && sinceIds[idx] > 0) {
        since_id=sinceIds[idx];
        paging.setSinceId(since_id - 1);
      }
      final List<DirectMessage> messages=new ArrayList<>();
      final boolean truncated=Utils.truncateMessages(getDirectMessages(twitter,paging),messages,since_id);
      result.add(new MessageListResponse(accountId,max_id,since_id,messages,truncated));
      storeMessages(accountId,messages,isOutgoing(),true);
      mErrorInfoStore.remove(ErrorInfoStore.KEY_DIRECT_MESSAGES,accountId);
    }
 catch (    final TwitterException e) {
      if (e.getErrorCode() == TwitterErrorCode.NO_DM_PERMISSION) {
        mErrorInfoStore.put(ErrorInfoStore.KEY_DIRECT_MESSAGES,accountId,ErrorInfoStore.CODE_NO_DM_PERMISSION);
      }
 else       if (e.isCausedByNetworkIssue()) {
        mErrorInfoStore.put(ErrorInfoStore.KEY_DIRECT_MESSAGES,accountId,ErrorInfoStore.CODE_NETWORK_ERROR);
      }
      if (BuildConfig.DEBUG) {
        Log.w(LOGTAG,e);
      }
      result.add(new MessageListResponse(accountId,e));
    }
    idx++;
  }
  return result;
}
