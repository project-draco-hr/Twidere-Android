{
  if (statuses == null || statuses.isEmpty()) {
    return true;
  }
  final Uri uri=getDatabaseUri();
  final boolean noItemsBefore=getStatusCountInDatabase(mContext,uri,accountId) <= 0;
  final ContentValues[] values=new ContentValues[statuses.size()];
  final long[] statusIds=new long[statuses.size()];
  for (int i=0, j=statuses.size(); i < j; i++) {
    final twitter4j.Status status=statuses.get(i);
    values[i]=createStatus(status,accountId);
    statusIds[i]=status.getId();
  }
  final Expression accountWhere=Expression.equals(Statuses.ACCOUNT_ID,accountId);
  final Expression statusWhere=Expression.in(new Column(Statuses.STATUS_ID),new RawItemArray(statusIds));
  final String deleteWhere=Expression.and(accountWhere,statusWhere).getSQL();
  final Uri deleteUri=UriUtils.appendQueryParameters(uri,QUERY_PARAM_NOTIFY,false);
  final int rowsDeleted=mResolver.delete(deleteUri,deleteWhere,null);
  ProfilingUtil.profile(mContext,accountId,"Download tweets, " + TwidereArrayUtils.toString(statusIds,',',true));
  SpiceProfilingUtil.profile(mContext,accountId,accountId + ",Refresh," + TwidereArrayUtils.toString(statusIds,',',true));
  final Uri insertUri=UriUtils.appendQueryParameters(uri,QUERY_PARAM_NOTIFY,notify);
  bulkInsert(mResolver,insertUri,values);
  final long minId=statusIds.length != 0 ? TwidereArrayUtils.min(statusIds) : -1;
  final boolean deletedOldGap=rowsDeleted > 0 && ArrayUtils.contains(statusIds,maxId);
  final boolean noRowsDeleted=rowsDeleted == 0;
  final boolean insertGap=minId > 0 && (noRowsDeleted || deletedOldGap) && !truncated && !noItemsBefore && statuses.size() > 1;
  if (insertGap) {
    final ContentValues gapValue=new ContentValues();
    gapValue.put(Statuses.IS_GAP,1);
    final Expression where=Expression.and(Expression.equals(Statuses.ACCOUNT_ID,accountId),Expression.equals(Statuses.STATUS_ID,minId));
    final Uri updateUri=UriUtils.appendQueryParameters(uri,QUERY_PARAM_NOTIFY,true);
    mResolver.update(updateUri,gapValue,where.getSQL(),null);
  }
  return false;
}
