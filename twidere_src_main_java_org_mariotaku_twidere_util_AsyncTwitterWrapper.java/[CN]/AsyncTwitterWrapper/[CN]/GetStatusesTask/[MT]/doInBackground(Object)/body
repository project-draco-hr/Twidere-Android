{
  final List<StatusListResponse> result=new ArrayList<>();
  if (mAccountIds == null)   return result;
  int idx=0;
  final int loadItemLimit=mPreferences.getInt(KEY_LOAD_ITEM_LIMIT,DEFAULT_LOAD_ITEM_LIMIT);
  for (  final long accountId : mAccountIds) {
    final Twitter twitter=TwitterAPIUtils.getTwitterInstance(mContext,accountId,true);
    if (twitter == null)     continue;
    try {
      final Paging paging=new Paging();
      paging.setCount(loadItemLimit);
      final long maxId, sinceId;
      if (isMaxIdsValid() && mMaxIds[idx] > 0) {
        maxId=mMaxIds[idx];
        paging.setMaxId(maxId);
      }
 else {
        maxId=-1;
      }
      if (isSinceIdsValid() && mSinceIds[idx] > 0) {
        sinceId=mSinceIds[idx];
        paging.setSinceId(sinceId - 1);
      }
 else {
        sinceId=-1;
      }
      final List<org.mariotaku.twidere.api.twitter.model.Status> statuses=new ArrayList<>();
      final boolean truncated=truncateStatuses(getStatuses(twitter,paging),statuses,sinceId);
      storeStatus(accountId,statuses,maxId,truncated,true);
      publishProgress(new StatusListResponse(accountId,statuses));
    }
 catch (    final TwitterException e) {
      Log.w(LOGTAG,e);
      result.add(new StatusListResponse(accountId,e));
    }
    idx++;
  }
  return result;
}
