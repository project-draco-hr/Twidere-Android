{
  final ParcelableCredentials credentials=ParcelableCredentialsUtils.getCredentials(mContext,mAccountKey);
  if (credentials == null)   return SingleResponse.getInstance();
  final Twitter twitter=TwitterAPIFactory.getTwitterInstance(mContext,credentials,true,true);
  if (twitter == null)   return SingleResponse.getInstance();
  try {
    final ParcelableStatus result;
switch (ParcelableAccountUtils.getAccountType(credentials)) {
case ParcelableAccount.Type.FANFOU:
{
        result=ParcelableStatusUtils.fromStatus(twitter.createFanfouFavorite(mStatusId),mAccountKey,false);
        break;
      }
default :
{
      result=ParcelableStatusUtils.fromStatus(twitter.createFavorite(mStatusId),mAccountKey,false);
    }
}
Utils.setLastSeen(mContext,result.mentions,System.currentTimeMillis());
final ContentValues values=new ContentValues();
values.put(Statuses.IS_FAVORITE,true);
values.put(Statuses.REPLY_COUNT,result.reply_count);
values.put(Statuses.RETWEET_COUNT,result.retweet_count);
values.put(Statuses.FAVORITE_COUNT,result.favorite_count);
final Expression where=Expression.and(Expression.equalsArgs(AccountSupportColumns.ACCOUNT_KEY),Expression.or(Expression.equalsArgs(Statuses.STATUS_ID),Expression.equalsArgs(Statuses.RETWEET_ID)));
final String[] whereArgs={mAccountKey.toString(),String.valueOf(mStatusId),String.valueOf(mStatusId)};
for (final Uri uri : TwidereDataStore.STATUSES_URIS) {
  mResolver.update(uri,values,where.getSQL(),whereArgs);
}
return SingleResponse.getInstance(result);
}
 catch (final TwitterException e) {
if (BuildConfig.DEBUG) {
  Log.w(LOGTAG,e);
}
return SingleResponse.getInstance(e);
}
}
