{
  final Twitter twitter=TwitterAPIFactory.getTwitterInstance(mContext,mAccountId,false);
  if (twitter == null)   return SingleResponse.getInstance();
  try {
    final User user=twitter.createBlock(mUserId);
    Utils.setLastSeen(mContext,user.getId(),-1);
    for (    final Uri uri : TwidereDataStore.STATUSES_URIS) {
      final Expression where=Expression.and(Utils.getAccountCompareExpression(),Expression.equalsArgs(Statuses.USER_ID));
      final String[] whereArgs={String.valueOf(mAccountId.getId()),mAccountId.getHost(),String.valueOf(mUserId)};
      mResolver.delete(uri,where.getSQL(),whereArgs);
    }
    final ContentValues values=new ContentValues();
    values.put(CachedRelationships.ACCOUNT_ID,mAccountId.getId());
    values.put(CachedRelationships.ACCOUNT_HOST,mAccountId.getHost());
    values.put(CachedRelationships.USER_ID,mUserId);
    values.put(CachedRelationships.BLOCKING,true);
    mResolver.insert(CachedRelationships.CONTENT_URI,values);
    return SingleResponse.getInstance(ParcelableUserUtils.fromUser(user,mAccountId),null);
  }
 catch (  final TwitterException e) {
    return SingleResponse.getInstance(null,e);
  }
}
