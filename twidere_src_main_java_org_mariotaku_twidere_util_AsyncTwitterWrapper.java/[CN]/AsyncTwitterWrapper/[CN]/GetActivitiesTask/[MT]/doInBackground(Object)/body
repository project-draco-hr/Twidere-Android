{
  final Context context=twitterWrapper.getContext();
  final ContentResolver cr=context.getContentResolver();
  for (int i=0; i < accountIds.length; i++) {
    final long accountId=accountIds[i];
    final boolean noItemsBefore=DataStoreUtils.getActivityCountInDatabase(context,getContentUri(),accountId) <= 0;
    final Twitter twitter=TwitterAPIFactory.getTwitterInstance(context,accountId,true);
    final Paging paging=new Paging();
    if (maxIds != null && maxIds[i] > 0) {
      paging.maxId(maxIds[i]);
    }
    if (sinceIds != null && sinceIds[i] > 0) {
      paging.sinceId(sinceIds[i]);
    }
    long[] deleteBound=new long[2];
    Arrays.fill(deleteBound,-1);
    try {
      List<ContentValues> valuesList=new ArrayList<>();
      for (      Activity activity : getActivities(accountId,twitter,paging)) {
        final ParcelableActivity parcelableActivity=new ParcelableActivity(activity,accountId,false);
        if (deleteBound[0] < 0) {
          deleteBound[0]=parcelableActivity.timestamp;
        }
 else {
          deleteBound[0]=Math.min(deleteBound[0],parcelableActivity.timestamp);
        }
        if (deleteBound[1] < 0) {
          deleteBound[1]=parcelableActivity.timestamp;
        }
 else {
          deleteBound[1]=Math.max(deleteBound[1],parcelableActivity.timestamp);
        }
        valuesList.add(ContentValuesCreator.createActivity(parcelableActivity));
      }
      if (deleteBound[0] > 0 && deleteBound[1] > 0) {
        Expression where=Expression.and(Expression.equals(Activities.ACCOUNT_ID,accountId),Expression.greaterEquals(Activities.TIMESTAMP,deleteBound[0]),Expression.lesserEquals(Activities.TIMESTAMP,deleteBound[1]));
        int rowsDeleted=cr.delete(getContentUri(),where.getSQL(),null);
        boolean insertGap=!noItemsBefore && rowsDeleted <= 0;
        if (insertGap && !valuesList.isEmpty()) {
          valuesList.get(valuesList.size() - 1).put(Activities.IS_GAP,true);
        }
      }
      ContentResolverUtils.bulkInsert(cr,getContentUri(),valuesList);
    }
 catch (    TwitterException e) {
    }
  }
  return null;
}
