{
  boolean succeed=false;
  for (  final StatusListResponse response : responses) {
    final long accountId=response.account_id;
    final List<twitter4j.Status> statuses=response.list;
    if (statuses == null || statuses.isEmpty()) {
      continue;
    }
    final ArrayList<Long> ids_in_db=getStatusIdsInDatabase(mContext,uri,accountId);
    final boolean noItemsBefore=ids_in_db.isEmpty();
    final ContentValues[] values=new ContentValues[statuses.size()];
    final long[] statusIds=new long[statuses.size()];
    for (int i=0, j=statuses.size(); i < j; i++) {
      final twitter4j.Status status=statuses.get(i);
      values[i]=makeStatusContentValues(status,accountId);
      statusIds[i]=status.getId();
    }
    final Expression accountWhere=Expression.equals(Statuses.ACCOUNT_ID,accountId);
    final Expression statusWhere=Expression.in(new Column(Statuses.STATUS_ID),new RawItemArray(statusIds));
    final String deleteWhere=Expression.and(accountWhere,statusWhere).getSQL();
    final Uri deleteUri=appendQueryParameters(uri,new NameValuePairImpl(QUERY_PARAM_NOTIFY,false));
    final int rowsDeleted=mResolver.delete(deleteUri,deleteWhere,null);
    ProfilingUtil.profile(mContext,accountId,"Download tweets, " + ArrayUtils.toString(statusIds,',',true));
    all_statuses.addAll(Arrays.asList(values));
    final Uri insertUri=appendQueryParameters(uri,new NameValuePairImpl(QUERY_PARAM_NOTIFY,notify));
    bulkInsert(mResolver,insertUri,values);
    final long minId=statusIds.length != 0 ? ArrayUtils.min(statusIds) : -1;
    final boolean deletedOldGap=rowsDeleted > 0 && ArrayUtils.contains(statusIds,response.max_id);
    final boolean noRowsDeleted=rowsDeleted == 0;
    final boolean insertGap=minId > 0 && (noRowsDeleted || deletedOldGap) && !response.truncated && !noItemsBefore && statuses.size() > 1;
    if (insertGap) {
      final ContentValues gapValue=new ContentValues();
      gapValue.put(Statuses.IS_GAP,1);
      final Expression where=Expression.and(Expression.equals(Statuses.ACCOUNT_ID,accountId),Expression.equals(Statuses.STATUS_ID,minId));
      final Uri updateUri=appendQueryParameters(uri,new NameValuePairImpl(QUERY_PARAM_NOTIFY,true));
      mResolver.update(updateUri,gapValue,where.getSQL(),null);
    }
    succeed=true;
  }
  return SingleResponse.getInstance(succeed,null);
}
