{
  final Bus bus=mBus;
  if (bus == null)   return;
  TaskStarter.execute(new AbstractTask<Object,SingleResponse<Relationship>,Bus>(){
    @Override public SingleResponse<Relationship> doLongOperation(    Object param){
      final MicroBlog twitter=MicroBlogAPIFactory.getInstance(mContext,accountKey,true);
      try {
        final Relationship relationship=twitter.updateFriendship(userKey.getId(),update);
        if (!relationship.isSourceWantRetweetsFromTarget()) {
          final Expression where=Expression.and(Expression.equalsArgs(Statuses.ACCOUNT_KEY),Expression.equalsArgs(Statuses.RETWEETED_BY_USER_KEY));
          final String[] selectionArgs={accountKey.toString(),userKey.toString()};
          mContext.getContentResolver().delete(Statuses.CONTENT_URI,where.getSQL(),selectionArgs);
        }
        return SingleResponse.Companion.getInstance(relationship);
      }
 catch (      MicroBlogException e) {
        return SingleResponse.Companion.getInstance(e);
      }
    }
    @Override public void afterExecute(    Bus handler,    SingleResponse<Relationship> result){
      if (result.hasData()) {
        handler.post(new FriendshipUpdatedEvent(accountKey,userKey,result.getData()));
      }
 else       if (result.hasException()) {
        if (BuildConfig.DEBUG) {
          Log.w(LOGTAG,"Unable to update friendship",result.getException());
        }
      }
    }
  }
.setCallback(bus));
}
