{
  final List<ParcelableCredentials> accountsList=DataStoreUtils.getCredentialsList(this,true);
  final UserKey[] accountKeys=new UserKey[accountsList.size()];
  for (int i=0, j=accountKeys.length; i < j; i++) {
    final ParcelableCredentials credentials=accountsList.get(i);
    accountKeys[i]=credentials.account_key;
  }
  final AccountPreferences[] activatedPreferences=AccountPreferences.getAccountPreferences(this,accountKeys);
  if (BuildConfig.DEBUG) {
    Log.d(Constants.LOGTAG,"Setting up twitter stream instances");
  }
  mAccountKeys=accountKeys;
  clearTwitterInstances();
  boolean result=false;
  for (int i=0, j=accountsList.size(); i < j; i++) {
    final AccountPreferences preferences=activatedPreferences[i];
    if (!preferences.isStreamingEnabled())     continue;
    final ParcelableCredentials account=accountsList.get(i);
    final Endpoint endpoint=MicroBlogAPIFactory.getEndpoint(account,TwitterUserStream.class);
    final Authorization authorization=MicroBlogAPIFactory.getAuthorization(account);
    final TwitterUserStream twitter=MicroBlogAPIFactory.getInstance(this,endpoint,authorization,TwitterUserStream.class);
    final TwidereUserStreamCallback callback=new TwidereUserStreamCallback(this,account);
    mCallbacks.put(account.account_key,callback);
    new Thread(){
      @Override public void run(){
        twitter.getUserStream(callback);
        Log.d(Constants.LOGTAG,String.format("Stream %s disconnected",account.account_key));
        mCallbacks.remove(account.account_key);
        updateStreamState();
      }
    }
.start();
    result|=true;
  }
  return result;
}
