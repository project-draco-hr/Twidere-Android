{
  if (treeNode == null)   return null;
 else   if (treeNode instanceof JsonBoolean)   return treeNode == JsonBoolean.TRUE;
 else   if (treeNode instanceof JsonNumber)   return ((JsonNumber)treeNode).getValue();
 else   if (treeNode instanceof JsonString)   return ((JsonString)treeNode).getValue();
 else   if (treeNode instanceof JsonArray) {
    return new AbstractList<Object>(){
      @Override public Object get(      int index){
        return valueOf(treeNode.get(index));
      }
      @Override public int size(){
        return treeNode.size();
      }
    }
;
  }
 else   if (treeNode instanceof JsonObject) {
    return new AbstractMap<String,Object>(){
      @Override public Set<Entry<String,Object>> entrySet(){
        return new AbstractSet<Entry<String,Object>>(){
          @Override public Iterator<Entry<String,Object>> iterator(){
            return new Iterator<Entry<String,Object>>(){
              final Iterator<String> delegate=treeNode.fieldNames();
              @Override public boolean hasNext(){
                return delegate.hasNext();
              }
              @Override public Entry<String,Object> next(){
                final String key=delegate.next();
                return new Entry<String,Object>(){
                  @Override public String getKey(){
                    return key;
                  }
                  @Override public Object getValue(){
                    return valueOf(treeNode.get(key));
                  }
                  @Override public Object setValue(                  Object value){
                    throw new UnsupportedOperationException();
                  }
                }
;
              }
              @Override public void remove(){
                throw new UnsupportedOperationException();
              }
            }
;
          }
          @Override public int size(){
            return treeNode.size();
          }
        }
;
      }
    }
;
  }
 else   return treeNode;
}
