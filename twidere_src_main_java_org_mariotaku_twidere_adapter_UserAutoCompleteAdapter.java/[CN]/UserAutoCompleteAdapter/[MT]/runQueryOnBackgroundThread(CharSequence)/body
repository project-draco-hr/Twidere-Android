{
  if (TextUtils.isEmpty(constraint))   return null;
  final FilterQueryProvider filter=getFilterQueryProvider();
  if (filter != null)   return filter.runQuery(constraint);
  final String query=constraint.toString();
  final String queryEscaped=query.replace("_","^_");
  final String[] nicknameKeys=Utils.getMatchedNicknameKeys(query,mUserColorNameManager);
  final Expression usersSelection=Expression.or(Expression.likeRaw(new Columns.Column(CachedUsers.SCREEN_NAME),"?||'%'","^"),Expression.likeRaw(new Columns.Column(CachedUsers.NAME),"?||'%'","^"),Expression.inArgs(new Columns.Column(CachedUsers.USER_KEY),nicknameKeys.length));
  final String[] selectionArgs=new String[nicknameKeys.length + 2];
  selectionArgs[0]=selectionArgs[1]=queryEscaped;
  System.arraycopy(nicknameKeys,0,selectionArgs,2,nicknameKeys.length);
  final String[] order={CachedUsers.LAST_SEEN,CachedUsers.SCORE,CachedUsers.SCREEN_NAME,CachedUsers.NAME};
  final boolean[] ascending={false,false,true,true};
  final OrderBy orderBy=new OrderBy(order,ascending);
  final Uri uri=Uri.withAppendedPath(CachedUsers.CONTENT_URI_WITH_SCORE,String.valueOf(mAccountKey));
  return mContext.getContentResolver().query(uri,CachedUsers.COLUMNS,usersSelection.getSQL(),selectionArgs,orderBy.getSQL());
}
