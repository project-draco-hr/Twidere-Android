{
  if (!uri.toLowerCase().startsWith("data:")) {
    throw new IllegalArgumentException("URI must start with a case-insensitive `data:'");
  }
  if (-1 == uri.indexOf(',')) {
    throw new IllegalArgumentException("URI must contain a `,'");
  }
  Collection<String> supportedContentEncodings=Arrays.asList("base64");
  String mimeType="text/plain";
  String contentEncoding="";
  boolean contentEncodingAlreadySet=false;
  final Map<String,String> supportedValues=new HashMap<String,String>(){
{
      put(CHARSET_OPTION_NAME,"");
      put(FILENAME_OPTION_NAME,"");
      put(CONTENT_DISPOSITION_OPTION_NAME,"");
    }
  }
;
  final Map<String,Boolean> supportedValueSetBits=new HashMap<String,Boolean>(){
{
      for (      String key : supportedValues.keySet()) {
        put(key,false);
      }
    }
  }
;
  int comma=uri.indexOf(',');
  String temp=uri.substring("data:".length(),comma);
  String[] headers=temp.split(";");
  for (int header=0; header < headers.length; ++header) {
    String s=headers[header];
    s=s.toLowerCase();
    int eq=s.indexOf('=');
    String name;
    String value="";
    if (-1 == eq) {
      name=percentDecode(s,charset);
      name=name.trim();
    }
 else {
      name=s.substring(0,eq);
      name=percentDecode(name,charset);
      name=name.trim();
      value=s.substring(eq + 1);
      value=percentDecode(value,charset);
      value=value.trim();
    }
    if ((0 == header) && (-1 == eq) && !name.isEmpty()) {
      mimeType=name;
    }
 else {
      if (-1 == eq) {
        final String nameCaseInsensitive=name.toLowerCase();
        if (supportedContentEncodings.contains(nameCaseInsensitive)) {
          if (!contentEncodingAlreadySet) {
            contentEncoding=name;
            contentEncodingAlreadySet=true;
          }
        }
      }
 else {
        final String nameCaseInsensitive=name.toLowerCase();
        if (!value.isEmpty() && supportedValues.containsKey(nameCaseInsensitive)) {
          boolean valueSet=supportedValueSetBits.get(nameCaseInsensitive);
          if (!valueSet) {
            supportedValues.put(nameCaseInsensitive,value);
            supportedValueSetBits.put(nameCaseInsensitive,true);
          }
        }
      }
    }
  }
  String data=uri.substring(comma + 1);
  data=percentDecode(data,charset);
  final String finalMimeType=mimeType;
  final Charset finalCharset=supportedValues.get(CHARSET_OPTION_NAME).isEmpty() ? null : Charset.forName(supportedValues.get(CHARSET_OPTION_NAME));
  final String finalFilename=supportedValues.get(FILENAME_OPTION_NAME).isEmpty() ? null : supportedValues.get(FILENAME_OPTION_NAME);
  final String finalContentDisposition=supportedValues.get(CONTENT_DISPOSITION_OPTION_NAME).isEmpty() ? null : supportedValues.get(CONTENT_DISPOSITION_OPTION_NAME);
  final byte[] finalData="base64".equalsIgnoreCase(contentEncoding) ? Base64.decode(data,Base64.DEFAULT) : data.getBytes(charset);
  DataUri dataURIObject=new DataUri(finalMimeType,finalCharset,finalFilename,finalContentDisposition,finalData);
  return dataURIObject;
}
