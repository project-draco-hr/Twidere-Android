{
  if (!json.isNull("sender"))   return Type.SENDER;
 else   if (!json.isNull("text"))   return Type.STATUS;
 else   if (!json.isNull("direct_message"))   return Type.DIRECT_MESSAGE;
 else   if (!json.isNull("delete"))   return Type.DELETE;
 else   if (!json.isNull("limit"))   return Type.LIMIT;
 else   if (!json.isNull("warning"))   return Type.STALL_WARNING;
 else   if (!json.isNull("scrub_geo"))   return Type.SCRUB_GEO;
 else   if (!json.isNull("friends"))   return Type.FRIENDS;
 else   if (!json.isNull("event")) {
    String event;
    try {
      event=json.getString("event");
      if ("favorite".equals(event))       return Type.FAVORITE;
 else       if ("unfavorite".equals(event))       return Type.UNFAVORITE;
 else       if ("follow".equals(event))       return Type.FOLLOW;
 else       if ("unfollow".equals(event))       return Type.UNFOLLOW;
 else       if (event.startsWith("list")) {
        if ("list_member_added".equals(event))         return Type.USER_LIST_MEMBER_ADDED;
 else         if ("list_member_removed".equals(event))         return Type.USER_LIST_MEMBER_DELETED;
 else         if ("list_user_subscribed".equals(event))         return Type.USER_LIST_SUBSCRIBED;
 else         if ("list_user_unsubscribed".equals(event))         return Type.USER_LIST_UNSUBSCRIBED;
 else         if ("list_created".equals(event))         return Type.USER_LIST_CREATED;
 else         if ("list_updated".equals(event))         return Type.USER_LIST_UPDATED;
 else         if ("list_destroyed".equals(event))         return Type.USER_LIST_DESTROYED;
      }
 else       if ("user_update".equals(event))       return Type.USER_UPDATE;
 else       if ("block".equals(event))       return Type.BLOCK;
 else       if ("unblock".equals(event))       return Type.UNBLOCK;
    }
 catch (    final JSONException jsone) {
      try {
        logger.warn("Failed to get event element: ",json.toString(2));
      }
 catch (      final JSONException ignore) {
      }
    }
  }
 else   if (!json.isNull("disconnect"))   return Type.DISCONNECTION;
  return Type.UNKNOWN;
}
