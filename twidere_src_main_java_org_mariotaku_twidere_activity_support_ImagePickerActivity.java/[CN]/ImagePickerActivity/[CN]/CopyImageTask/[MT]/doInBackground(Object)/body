{
  final ContentResolver cr=mActivity.getContentResolver();
  InputStream is=null;
  OutputStream os=null;
  try {
    final File cacheDir=mActivity.getCacheDir();
    final Uri uri=this.mUri;
    final String mimeType;
    final String scheme=uri.getScheme();
    if (SCHEME_HTTP.equals(scheme) || SCHEME_HTTPS.equals(scheme)) {
      final NetworkStreamDownloader downloader=new RestFuNetworkStreamDownloader(mActivity);
      final NetworkStreamDownloader.DownloadResult result=downloader.get(uri);
      is=result.stream;
      mimeType=result.mimeType;
    }
 else     if (SCHEME_DATA.equals(scheme)) {
      final DataUri dataUri=DataUri.parse(uri.toString(),Charset.defaultCharset());
      is=new ByteArrayInputStream(dataUri.getData());
      mimeType=dataUri.getMime();
    }
 else {
      is=cr.openInputStream(uri);
      final BitmapFactory.Options opts=new BitmapFactory.Options();
      opts.inJustDecodeBounds=true;
      BitmapFactory.decodeStream(cr.openInputStream(uri),null,opts);
      mimeType=opts.outMimeType;
    }
    final String suffix=mimeType != null ? "." + MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType) : null;
    final File outFile=File.createTempFile("temp_image_",suffix,cacheDir);
    os=new FileOutputStream(outFile);
    Utils.copyStream(is,os);
    if (mDeleteSource && SCHEME_FILE.equals(scheme)) {
      final File sourceFile=new File(mUri.getPath());
      sourceFile.delete();
    }
    return SingleResponse.getInstance(outFile);
  }
 catch (  final IOException e) {
    return SingleResponse.getInstance(e);
  }
 finally {
    Utils.closeSilently(os);
    Utils.closeSilently(is);
  }
}
