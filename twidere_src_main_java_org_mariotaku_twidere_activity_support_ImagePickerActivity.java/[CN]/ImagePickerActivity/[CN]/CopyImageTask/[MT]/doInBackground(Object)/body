{
  final ContentResolver cr=mActivity.getContentResolver();
  InputStream is=null;
  OutputStream os=null;
  try {
    final File cacheDir=mActivity.getCacheDir();
    final Uri uri=this.mUri;
    final String mimeType;
    if (SCHEME_HTTP.equals(uri.getScheme()) || SCHEME_HTTPS.equals(uri.getScheme())) {
      final RestHttpClient client=TwitterAPIUtils.getDefaultHttpClient(mActivity);
      final RestHttpRequest.Builder builder=new RestHttpRequest.Builder();
      builder.method(GET.METHOD);
      builder.url(uri.toString());
      final RestHttpResponse response=client.execute(builder.build());
      if (response.isSuccessful()) {
        final TypedData body=response.getBody();
        is=body.stream();
        final ContentType contentType=body.contentType();
        mimeType=contentType != null ? contentType.getContentType() : "image/*";
      }
 else {
        throw new IOException("Unable to get " + uri);
      }
    }
 else {
      is=cr.openInputStream(uri);
      final BitmapFactory.Options opts=new BitmapFactory.Options();
      opts.inJustDecodeBounds=true;
      BitmapFactory.decodeStream(cr.openInputStream(uri),null,opts);
      mimeType=opts.outMimeType;
    }
    final String suffix=mimeType != null ? "." + MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType) : null;
    final File outFile=File.createTempFile("temp_image_",suffix,cacheDir);
    os=new FileOutputStream(outFile);
    IoUtils.copyStream(is,os,null);
    return SingleResponse.getInstance(outFile);
  }
 catch (  final IOException e) {
    return SingleResponse.getInstance(e);
  }
 finally {
    IoUtils.closeSilently(os);
    IoUtils.closeSilently(is);
  }
}
