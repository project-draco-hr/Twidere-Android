{
  final DialogPreference preference=getPreference();
  final Dialog dialog=super.onCreateDialog(savedInstanceState);
  dialog.setOnShowListener(new DialogInterface.OnShowListener(){
    @Override public void onShow(    DialogInterface dialog){
      final Dialog editDialog=(Dialog)dialog;
      mEditAPIUrlFormat=(EditText)editDialog.findViewById(R.id.api_url_format);
      mEditAuthType=(RadioGroup)editDialog.findViewById(R.id.auth_type);
      mButtonOAuth=(RadioButton)editDialog.findViewById(R.id.oauth);
      mButtonxAuth=(RadioButton)editDialog.findViewById(R.id.xauth);
      mButtonBasic=(RadioButton)editDialog.findViewById(R.id.basic);
      mButtonTwipOMode=(RadioButton)editDialog.findViewById(R.id.twip_o);
      mEditSameOAuthSigningUrl=(CheckBox)editDialog.findViewById(R.id.same_oauth_signing_url);
      mEditNoVersionSuffix=(CheckBox)editDialog.findViewById(R.id.no_version_suffix);
      mEditConsumerKey=(EditText)editDialog.findViewById(R.id.consumer_key);
      mEditConsumerSecret=(EditText)editDialog.findViewById(R.id.consumer_secret);
      mAPIFormatHelpButton=editDialog.findViewById(R.id.api_url_format_help);
      mEditNoVersionSuffix.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
        @Override public void onCheckedChanged(        CompoundButton buttonView,        boolean isChecked){
          mEditNoVersionSuffixChanged=true;
        }
      }
);
      mEditAuthType.setOnCheckedChangeListener(new OnCheckedChangeListener(){
        @Override public void onCheckedChanged(        RadioGroup group,        int checkedId){
          final int authType=APIEditorActivity.getCheckedAuthType(checkedId);
          final boolean isOAuth=authType == ParcelableCredentials.AUTH_TYPE_OAUTH || authType == ParcelableCredentials.AUTH_TYPE_XAUTH;
          mEditSameOAuthSigningUrl.setVisibility(isOAuth ? View.VISIBLE : View.GONE);
          mEditConsumerKey.setVisibility(isOAuth ? View.VISIBLE : View.GONE);
          mEditConsumerSecret.setVisibility(isOAuth ? View.VISIBLE : View.GONE);
          if (!mEditNoVersionSuffixChanged) {
            mEditNoVersionSuffix.setChecked(authType == ParcelableCredentials.AUTH_TYPE_TWIP_O_MODE);
          }
        }
      }
);
      mAPIFormatHelpButton.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          Toast.makeText(getContext(),R.string.api_url_format_help,Toast.LENGTH_LONG).show();
        }
      }
);
      if (savedInstanceState != null) {
        final String apiUrlFormat=savedInstanceState.getString(Accounts.API_URL_FORMAT);
        final int authType=savedInstanceState.getInt(Accounts.AUTH_TYPE);
        final boolean sameOAuthSigningUrl=savedInstanceState.getBoolean(Accounts.SAME_OAUTH_SIGNING_URL);
        final boolean noVersionSuffix=savedInstanceState.getBoolean(Accounts.NO_VERSION_SUFFIX);
        final String consumerKey=trim(savedInstanceState.getString(Accounts.CONSUMER_KEY));
        final String consumerSecret=trim(savedInstanceState.getString(Accounts.CONSUMER_SECRET));
        setValues(apiUrlFormat,authType,sameOAuthSigningUrl,noVersionSuffix,consumerKey,consumerSecret);
      }
 else {
        final SharedPreferences preferences=preference.getSharedPreferences();
        final String apiUrlFormat=preferences.getString(KEY_API_URL_FORMAT,DEFAULT_TWITTER_API_URL_FORMAT);
        final int authType=preferences.getInt(KEY_AUTH_TYPE,ParcelableCredentials.AUTH_TYPE_OAUTH);
        final boolean sameOAuthSigningUrl=preferences.getBoolean(KEY_SAME_OAUTH_SIGNING_URL,true);
        final boolean noVersionSuffix=preferences.getBoolean(KEY_NO_VERSION_SUFFIX,false);
        final String consumerKey=trim(preferences.getString(KEY_CONSUMER_KEY,TWITTER_CONSUMER_KEY));
        final String consumerSecret=trim(preferences.getString(KEY_CONSUMER_SECRET,TWITTER_CONSUMER_SECRET));
        setValues(apiUrlFormat,authType,sameOAuthSigningUrl,noVersionSuffix,consumerKey,consumerSecret);
      }
    }
  }
);
  return dialog;
}
