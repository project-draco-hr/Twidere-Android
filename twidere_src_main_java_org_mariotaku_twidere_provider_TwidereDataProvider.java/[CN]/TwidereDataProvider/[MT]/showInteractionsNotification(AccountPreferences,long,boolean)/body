{
  final Context context=getContext();
  if (context == null)   return;
  final long accountId=pref.getAccountId();
  final String where=Expression.and(Expression.equals(Activities.ACCOUNT_ID,pref.getAccountId()),Expression.greaterEquals(Activities.TIMESTAMP,position)).getSQL();
  Cursor c=query(Activities.AboutMe.CONTENT_URI,Activities.COLUMNS,where,null,new OrderBy(Activities.TIMESTAMP,false).getSQL());
  if (c == null)   return;
  final NotificationCompat.Builder builder=new NotificationCompat.Builder(context);
  try {
    final int count=c.getCount();
    if (count == 0)     return;
    c.moveToFirst();
    builder.setSmallIcon(R.drawable.ic_stat_notification);
    builder.setNumber(count);
    builder.setCategory(NotificationCompat.CATEGORY_SOCIAL);
    applyNotificationPreferences(builder,pref,pref.getHomeTimelineNotificationType());
    final Resources resources=context.getResources();
    final String title=resources.getQuantityString(R.plurals.N_new_interactions,count,count);
    final String accountName=DataStoreUtils.getAccountDisplayName(context,accountId,mNameFirst);
    builder.setContentTitle(title);
    builder.setContentText(accountName);
    final InboxStyle style=new InboxStyle();
    builder.setStyle(style);
    builder.setAutoCancel(true);
    style.setBigContentTitle(title);
    style.setSummaryText(accountName);
    final ParcelableActivityCursorIndices ci=new ParcelableActivityCursorIndices(c);
    int messageLines=0;
    long timestamp=-1;
    while (!c.isAfterLast()) {
      if (messageLines == 5) {
        style.addLine(resources.getString(R.string.and_N_more,count - c.getPosition()));
        break;
      }
      final ParcelableActivity activity=ci.newObject(c);
      if (timestamp == -1) {
        timestamp=activity.timestamp;
      }
      final ActivityTitleSummaryMessage message=ActivityTitleSummaryMessage.get(context,mUserColorNameManager,activity,activity.sources,0,false,mUseStarForLikes,mNameFirst);
      if (message != null) {
        final CharSequence summary=message.getSummary();
        if (TextUtils.isEmpty(summary)) {
          style.addLine(message.getTitle());
        }
 else {
          style.addLine(SpanFormatter.format(resources.getString(R.string.title_summary_line_format),message.getTitle(),summary));
        }
        messageLines++;
      }
      c.moveToNext();
    }
    builder.setContentIntent(getContentIntent(context,CustomTabType.NOTIFICATIONS_TIMELINE,NotificationType.INTERACTIONS,accountId));
    if (timestamp != -1) {
      builder.setDeleteIntent(getMarkReadDeleteIntent(context,NotificationType.INTERACTIONS,accountId,timestamp,false));
    }
  }
  finally {
    c.close();
  }
  final int notificationId=Utils.getNotificationId(NOTIFICATION_ID_INTERACTIONS_TIMELINE,accountId);
  mNotificationManager.notify("interactions",notificationId,builder.build());
}
