{
  final Context context=getContext();
  if (context == null)   return;
  final UserKey accountKey=pref.getAccountKey();
  final String where=Expression.and(Expression.equalsArgs(AccountSupportColumns.ACCOUNT_KEY),Expression.greaterThanArgs(Activities.TIMESTAMP)).getSQL();
  final String[] whereArgs={accountKey.toString(),String.valueOf(position)};
  Cursor c=query(Activities.AboutMe.CONTENT_URI,Activities.COLUMNS,where,whereArgs,new OrderBy(Activities.TIMESTAMP,false).getSQL());
  if (c == null)   return;
  final NotificationCompat.Builder builder=new NotificationCompat.Builder(context);
  try {
    final int count=c.getCount();
    if (count == 0)     return;
    builder.setSmallIcon(R.drawable.ic_stat_notification);
    builder.setCategory(NotificationCompat.CATEGORY_SOCIAL);
    applyNotificationPreferences(builder,pref,pref.getMentionsNotificationType());
    final Resources resources=context.getResources();
    final String accountName=DataStoreUtils.getAccountDisplayName(context,accountKey,mNameFirst);
    builder.setContentText(accountName);
    final InboxStyle style=new InboxStyle();
    builder.setStyle(style);
    builder.setAutoCancel(true);
    style.setSummaryText(accountName);
    final ParcelableActivityCursorIndices ci=new ParcelableActivityCursorIndices(c);
    int messageLines=0;
    long timestamp=-1;
    c.moveToPosition(-1);
    while (c.moveToNext()) {
      if (messageLines == 5) {
        style.addLine(resources.getString(R.string.and_N_more,count - c.getPosition()));
        break;
      }
      final ParcelableActivity activity=ci.newObject(c);
      if (pref.isNotificationMentionsOnly() && !ArrayUtils.contains(Activity.Action.MENTION_ACTIONS,activity.action)) {
        continue;
      }
      final long[] filteredUserIds=DataStoreUtils.getFilteredUserIds(context);
      if (timestamp == -1) {
        timestamp=activity.timestamp;
      }
      ParcelableActivityUtils.initAfterFilteredSourceIds(activity,filteredUserIds,pref.isNotificationFollowingOnly());
      final ParcelableUser[] sources=ParcelableActivityUtils.getAfterFilteredSources(activity);
      if (ArrayUtils.isEmpty(sources))       continue;
      final ActivityTitleSummaryMessage message=ActivityTitleSummaryMessage.get(context,mUserColorNameManager,activity,sources,0,false,mUseStarForLikes,mNameFirst);
      if (message != null) {
        final CharSequence summary=message.getSummary();
        if (TextUtils.isEmpty(summary)) {
          style.addLine(message.getTitle());
        }
 else {
          style.addLine(SpanFormatter.format(resources.getString(R.string.title_summary_line_format),message.getTitle(),summary));
        }
        messageLines++;
      }
    }
    if (messageLines == 0)     return;
    final int displayCount=messageLines + count - c.getPosition();
    final String title=resources.getQuantityString(R.plurals.N_new_interactions,displayCount,displayCount);
    builder.setContentTitle(title);
    style.setBigContentTitle(title);
    builder.setNumber(displayCount);
    builder.setContentIntent(getContentIntent(context,CustomTabType.NOTIFICATIONS_TIMELINE,NotificationType.INTERACTIONS,accountKey,timestamp));
    if (timestamp != -1) {
      builder.setDeleteIntent(getMarkReadDeleteIntent(context,NotificationType.INTERACTIONS,accountKey,timestamp,false));
    }
  }
  finally {
    c.close();
  }
  final int notificationId=Utils.getNotificationId(NOTIFICATION_ID_INTERACTIONS_TIMELINE,accountKey);
  mNotificationManager.notify("interactions",notificationId,builder.build());
}
