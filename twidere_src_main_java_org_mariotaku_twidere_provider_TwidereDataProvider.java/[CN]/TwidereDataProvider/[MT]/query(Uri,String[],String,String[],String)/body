{
  try {
    final int tableId=DataStoreUtils.getTableId(uri);
    final String table=DataStoreUtils.getTableNameById(tableId);
    checkReadPermission(tableId,table,projection);
switch (tableId) {
case VIRTUAL_TABLE_ID_DATABASE_READY:
{
        if (mDatabaseWrapper.isReady())         return new MatrixCursor(projection != null ? projection : new String[0]);
        return null;
      }
case VIRTUAL_TABLE_ID_PERMISSIONS:
{
      final Context context=getContext();
      if (context == null)       return null;
      final MatrixCursor c=new MatrixCursor(Permissions.MATRIX_COLUMNS);
      final PackageManager pm=context.getPackageManager();
      if (Binder.getCallingUid() == Process.myUid()) {
        final Map<String,String> map=mPermissionsManager.getAll();
        for (        final Map.Entry<String,String> item : map.entrySet()) {
          c.addRow(new Object[]{item.getKey(),item.getValue()});
        }
      }
 else {
        final Map<String,String> map=mPermissionsManager.getAll();
        final String[] callingPackages=pm.getPackagesForUid(Binder.getCallingUid());
        for (        final Map.Entry<String,String> item : map.entrySet()) {
          final String key=item.getKey();
          if (ArrayUtils.contains(callingPackages,key)) {
            c.addRow(new Object[]{key,item.getValue()});
          }
        }
      }
      return c;
    }
case VIRTUAL_TABLE_ID_ALL_PREFERENCES:
{
    return getPreferencesCursor(mPreferences,null);
  }
case VIRTUAL_TABLE_ID_PREFERENCES:
{
  return getPreferencesCursor(mPreferences,uri.getLastPathSegment());
}
case VIRTUAL_TABLE_ID_DNS:
{
return getDNSCursor(uri.getLastPathSegment());
}
case VIRTUAL_TABLE_ID_CACHED_IMAGES:
{
return getCachedImageCursor(uri.getQueryParameter(QUERY_PARAM_URL));
}
case VIRTUAL_TABLE_ID_NOTIFICATIONS:
{
final List<String> segments=uri.getPathSegments();
if (segments.size() == 2) {
final int def=-1;
return getNotificationsCursor(NumberUtils.toInt(segments.get(1),def));
}
 else return getNotificationsCursor();
}
case VIRTUAL_TABLE_ID_UNREAD_COUNTS:
{
final List<String> segments=uri.getPathSegments();
if (segments.size() == 2) {
final int def=-1;
return getUnreadCountsCursor(NumberUtils.toInt(segments.get(1),def));
}
 else return getUnreadCountsCursor();
}
case VIRTUAL_TABLE_ID_UNREAD_COUNTS_BY_TYPE:
{
final List<String> segments=uri.getPathSegments();
if (segments.size() != 3) return null;
return getUnreadCountsCursorByType(segments.get(2));
}
case TABLE_ID_DIRECT_MESSAGES_CONVERSATION:
{
final List<String> segments=uri.getPathSegments();
if (segments.size() != 4) return null;
final UserKey accountId=UserKey.valueOf(segments.get(2));
final String conversationId=segments.get(3);
final Pair<SQLSelectQuery,String[]> query=ConversationQueryBuilder.buildByConversationId(projection,accountId,conversationId,selection,sortOrder);
final Cursor c=mDatabaseWrapper.rawQuery(query.first.getSQL(),query.second);
setNotificationUri(c,DirectMessages.CONTENT_URI);
return c;
}
case TABLE_ID_DIRECT_MESSAGES_CONVERSATION_SCREEN_NAME:
{
final List<String> segments=uri.getPathSegments();
if (segments.size() != 4) return null;
final UserKey accountKey=UserKey.valueOf(segments.get(2));
final String screenName=segments.get(3);
final Pair<SQLSelectQuery,String[]> query=ConversationQueryBuilder.byScreenName(projection,accountKey,screenName,selection,sortOrder);
final Cursor c=mDatabaseWrapper.rawQuery(query.first.getSQL(),query.second);
setNotificationUri(c,DirectMessages.CONTENT_URI);
return c;
}
case VIRTUAL_TABLE_ID_CACHED_USERS_WITH_RELATIONSHIP:
{
final UserKey accountKey=UserKey.valueOf(uri.getLastPathSegment());
final Pair<SQLSelectQuery,String[]> query=CachedUsersQueryBuilder.withRelationship(projection,selection,sortOrder,accountKey);
final Cursor c=mDatabaseWrapper.rawQuery(query.first.getSQL(),query.second);
setNotificationUri(c,CachedUsers.CONTENT_URI);
return c;
}
case VIRTUAL_TABLE_ID_CACHED_USERS_WITH_SCORE:
{
final UserKey accountKey=UserKey.valueOf(uri.getLastPathSegment());
final Pair<SQLSelectQuery,String[]> query=CachedUsersQueryBuilder.withScore(projection,selection,sortOrder,accountKey,0);
final Cursor c=mDatabaseWrapper.rawQuery(query.first.getSQL(),query.second);
setNotificationUri(c,CachedUsers.CONTENT_URI);
return c;
}
case VIRTUAL_TABLE_ID_DRAFTS_UNSENT:
{
final AsyncTwitterWrapper twitter=mTwitterWrapper;
final RawItemArray sendingIds=new RawItemArray(twitter.getSendingDraftIds());
final Expression where;
if (selection != null) {
where=Expression.and(new Expression(selection),Expression.notIn(new Column(Drafts._ID),sendingIds));
}
 else {
where=Expression.and(Expression.notIn(new Column(Drafts._ID),sendingIds));
}
final Cursor c=mDatabaseWrapper.query(Drafts.TABLE_NAME,projection,where.getSQL(),selectionArgs,null,null,sortOrder);
setNotificationUri(c,Utils.getNotificationUri(tableId,uri));
return c;
}
case VIRTUAL_TABLE_ID_SUGGESTIONS_AUTO_COMPLETE:
{
return getAutoCompleteSuggestionsCursor(uri);
}
case VIRTUAL_TABLE_ID_SUGGESTIONS_SEARCH:
{
return getSearchSuggestionCursor(uri);
}
case VIRTUAL_TABLE_ID_EMPTY:
{
return new MatrixCursor(projection);
}
case VIRTUAL_TABLE_ID_RAW_QUERY:
{
if (projection != null || selection != null || sortOrder != null) {
throw new IllegalArgumentException();
}
return mDatabaseWrapper.rawQuery(uri.getLastPathSegment(),selectionArgs);
}
}
if (table == null) return null;
final Cursor c=mDatabaseWrapper.query(table,projection,selection,selectionArgs,null,null,sortOrder);
setNotificationUri(c,Utils.getNotificationUri(tableId,uri));
return c;
}
 catch (final SQLException e) {
throw new IllegalStateException(e);
}
}
