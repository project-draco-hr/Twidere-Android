{
  final long accountId=pref.getAccountId();
  final long prevOldestId=mReadStateManager.getPosition(TAG_OLDEST_MESSAGES,String.valueOf(accountId));
  long oldestId=-1;
  for (  final ContentValues contentValues : valuesArray) {
    final long messageId=contentValues.getAsLong(DirectMessages.MESSAGE_ID);
    oldestId=oldestId < 0 ? messageId : Math.min(oldestId,messageId);
    if (messageId <= prevOldestId)     return;
  }
  mReadStateManager.setPosition(TAG_OLDEST_MESSAGES,String.valueOf(accountId),oldestId,false);
  final Context context=getContext();
  final Resources resources=context.getResources();
  final NotificationManager nm=getNotificationManager();
  final ArrayList<Expression> orExpressions=new ArrayList<>();
  final String prefix=accountId + "-";
  final int prefixLength=prefix.length();
  final Set<Long> senderIds=new CompactHashSet<>();
  for (  StringLongPair pair : pairs) {
    final String key=pair.getKey();
    if (key.startsWith(prefix)) {
      final long senderId=Long.parseLong(key.substring(prefixLength));
      senderIds.add(senderId);
      final Expression expression=Expression.and(Expression.equals(DirectMessages.SENDER_ID,senderId),Expression.greaterThan(DirectMessages.MESSAGE_ID,pair.getValue()));
      orExpressions.add(expression);
    }
  }
  orExpressions.add(Expression.notIn(new Column(DirectMessages.SENDER_ID),new RawItemArray(senderIds.toArray())));
  final Expression selection=Expression.and(Expression.equals(DirectMessages.ACCOUNT_ID,accountId),Expression.greaterThan(DirectMessages.MESSAGE_ID,prevOldestId),Expression.or(orExpressions.toArray(new Expression[orExpressions.size()])));
  final String filteredSelection=selection.getSQL();
  final String[] userProjection={DirectMessages.SENDER_ID,DirectMessages.SENDER_NAME,DirectMessages.SENDER_SCREEN_NAME};
  final String[] messageProjection={DirectMessages.MESSAGE_ID,DirectMessages.SENDER_ID,DirectMessages.SENDER_NAME,DirectMessages.SENDER_SCREEN_NAME,DirectMessages.TEXT_UNESCAPED,DirectMessages.MESSAGE_TIMESTAMP};
  final Cursor messageCursor=mDatabaseWrapper.query(DirectMessages.Inbox.TABLE_NAME,messageProjection,filteredSelection,null,null,null,DirectMessages.DEFAULT_SORT_ORDER);
  final Cursor userCursor=mDatabaseWrapper.query(DirectMessages.Inbox.TABLE_NAME,userProjection,filteredSelection,null,DirectMessages.SENDER_ID,null,DirectMessages.DEFAULT_SORT_ORDER);
  try {
    final int usersCount=userCursor.getCount();
    final int messagesCount=messageCursor.getCount();
    if (messagesCount == 0 || usersCount == 0)     return;
    final String accountName=Utils.getAccountName(context,accountId);
    final String accountScreenName=Utils.getAccountScreenName(context,accountId);
    final int idxMessageText=messageCursor.getColumnIndex(DirectMessages.TEXT_UNESCAPED), idxMessageTimestamp=messageCursor.getColumnIndex(DirectMessages.MESSAGE_TIMESTAMP), idxMessageId=messageCursor.getColumnIndex(DirectMessages.MESSAGE_ID), idxMessageUserId=messageCursor.getColumnIndex(DirectMessages.SENDER_ID), idxMessageUserName=messageCursor.getColumnIndex(DirectMessages.SENDER_NAME), idxMessageUserScreenName=messageCursor.getColumnIndex(DirectMessages.SENDER_SCREEN_NAME), idxUserName=userCursor.getColumnIndex(DirectMessages.SENDER_NAME), idxUserScreenName=userCursor.getColumnIndex(DirectMessages.SENDER_NAME), idxUserId=userCursor.getColumnIndex(DirectMessages.SENDER_NAME);
    final CharSequence notificationTitle=resources.getQuantityString(R.plurals.N_new_messages,messagesCount,messagesCount);
    final String notificationContent;
    userCursor.moveToFirst();
    final String displayName=UserColorNameUtils.getUserNickname(context,userCursor.getLong(idxUserId),mNameFirst ? userCursor.getString(idxUserName) : userCursor.getString(idxUserScreenName));
    if (usersCount == 1) {
      if (messagesCount == 1) {
        notificationContent=context.getString(R.string.notification_direct_message,displayName);
      }
 else {
        notificationContent=context.getString(R.string.notification_direct_message_multiple_messages,displayName,messagesCount);
      }
    }
 else {
      notificationContent=context.getString(R.string.notification_direct_message_multiple_users,displayName,usersCount - 1,messagesCount);
    }
    final LongSparseArray<Long> idsMap=new LongSparseArray<>();
    long when=-1;
    final InboxStyle style=new InboxStyle();
    for (int i=0; messageCursor.moveToPosition(i) && i < messagesCount; i++) {
      if (when < 0) {
        when=messageCursor.getLong(idxMessageTimestamp);
      }
      if (i < 5) {
        final SpannableStringBuilder sb=new SpannableStringBuilder();
        sb.append(UserColorNameUtils.getUserNickname(context,messageCursor.getLong(idxUserId),mNameFirst ? messageCursor.getString(idxMessageUserName) : messageCursor.getString(idxMessageUserScreenName)));
        sb.setSpan(new StyleSpan(Typeface.BOLD),0,sb.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        sb.append(' ');
        sb.append(messageCursor.getString(idxMessageText));
        style.addLine(sb);
      }
      final long userId=messageCursor.getLong(idxMessageUserId);
      final long messageId=messageCursor.getLong(idxMessageId);
      idsMap.put(userId,Math.max(idsMap.get(userId,-1L),messageId));
    }
    if (mNameFirst) {
      style.setSummaryText(accountName);
    }
 else {
      style.setSummaryText("@" + accountScreenName);
    }
    final StringLongPair[] positions=new StringLongPair[idsMap.size()];
    for (int i=0, j=idsMap.size(); i < j; i++) {
      positions[i]=new StringLongPair(String.valueOf(idsMap.keyAt(i)),idsMap.valueAt(i));
    }
    final NotificationCompat.Builder builder=new NotificationCompat.Builder(context);
    builder.setAutoCancel(true);
    builder.setSmallIcon(R.drawable.ic_stat_direct_message);
    builder.setTicker(notificationTitle);
    builder.setContentTitle(notificationTitle);
    builder.setContentText(notificationContent);
    builder.setCategory(NotificationCompat.CATEGORY_SOCIAL);
    builder.setContentIntent(getContentIntent(context,AUTHORITY_DIRECT_MESSAGES,accountId));
    builder.setDeleteIntent(getDeleteIntent(context,AUTHORITY_DIRECT_MESSAGES,accountId,positions));
    builder.setNumber(messagesCount);
    builder.setWhen(when);
    builder.setStyle(style);
    builder.setColor(pref.getNotificationLightColor());
    setNotificationPreferences(builder,pref,pref.getDirectMessagesNotificationType());
    nm.notify("messages_" + accountId,NOTIFICATION_ID_DIRECT_MESSAGES,builder.build());
    Utils.sendPebbleNotification(context,notificationContent);
  }
  finally {
    messageCursor.close();
    userCursor.close();
  }
}
