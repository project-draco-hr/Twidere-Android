{
  sInstance=this;
  if (BuildConfig.DEBUG) {
    StrictModeUtils.detectAllVmPolicy();
  }
  ATE.registerViewProcessor(TabPagerIndicator.class,new TabPagerIndicatorViewProcessor());
  ATE.registerViewProcessor(FloatingActionButton.class,new FloatingActionButtonViewProcessor());
  ATE.registerViewProcessor(ActionBarContextView.class,new ActionBarContextViewViewProcessor());
  final SharedPreferences preferences=getSharedPreferences();
  if (!ATE.config(this,null).isConfigured()) {
    final int themeColor=preferences.getInt(KEY_THEME_COLOR,ContextCompat.getColor(this,R.color.branding_color));
    ATE.config(this,"light").primaryColor(themeColor).accentColor(themeColor).coloredActionBar(true).commit();
    ATE.config(this,"dark").accentColor(themeColor).coloredActionBar(false).commit();
    ATE.config(this,null).primaryColor(themeColor).accentColor(themeColor).commit();
  }
  resetTheme(preferences);
  super.onCreate();
  initializeAsyncTask();
  initDebugMode();
  initBugReport();
  mHandler=new Handler();
  final PackageManager pm=getPackageManager();
  final ComponentName main=new ComponentName(this,MainActivity.class);
  final ComponentName main2=new ComponentName(this,MainHondaJOJOActivity.class);
  final boolean mainDisabled=pm.getComponentEnabledSetting(main) != PackageManager.COMPONENT_ENABLED_STATE_ENABLED;
  final boolean main2Disabled=pm.getComponentEnabledSetting(main2) != PackageManager.COMPONENT_ENABLED_STATE_ENABLED;
  final boolean noEntry=mainDisabled && main2Disabled;
  if (noEntry) {
    pm.setComponentEnabledSetting(main,PackageManager.COMPONENT_ENABLED_STATE_ENABLED,PackageManager.DONT_KILL_APP);
  }
 else   if (!mainDisabled) {
    pm.setComponentEnabledSetting(main2,PackageManager.COMPONENT_ENABLED_STATE_DISABLED,PackageManager.DONT_KILL_APP);
  }
  if (!Utils.isComposeNowSupported(this)) {
    final ComponentName assist=new ComponentName(this,AssistLauncherActivity.class);
    pm.setComponentEnabledSetting(assist,PackageManager.COMPONENT_ENABLED_STATE_DISABLED,PackageManager.DONT_KILL_APP);
  }
  migrateUsageStatisticsPreferences();
  Utils.startRefreshServiceIfNeeded(this);
  DependencyHolder holder=DependencyHolder.get(this);
  registerActivityLifecycleCallbacks(holder.getActivityTracker());
  final IntentFilter packageFilter=new IntentFilter();
  packageFilter.addAction(Intent.ACTION_PACKAGE_CHANGED);
  packageFilter.addAction(Intent.ACTION_PACKAGE_ADDED);
  packageFilter.addAction(Intent.ACTION_PACKAGE_REMOVED);
  packageFilter.addAction(Intent.ACTION_PACKAGE_REPLACED);
  registerReceiver(new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      final int uid=intent.getIntExtra(Intent.EXTRA_UID,-1);
      final String[] packages=getPackageManager().getPackagesForUid(uid);
      DependencyHolder holder=DependencyHolder.get(context);
      final ExternalThemeManager manager=holder.getExternalThemeManager();
      if (ArrayUtils.contains(packages,manager.getEmojiPackageName())) {
        manager.reloadEmojiPreferences();
      }
    }
  }
,packageFilter);
}
