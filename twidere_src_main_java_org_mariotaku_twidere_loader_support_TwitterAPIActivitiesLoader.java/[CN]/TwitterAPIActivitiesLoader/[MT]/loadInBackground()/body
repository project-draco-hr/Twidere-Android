{
  final File serializationFile=getSerializationFile();
  final List<ParcelableActivity> data=getData();
  if (isFirstLoad() && getTabPosition() >= 0 && serializationFile != null) {
    final List<ParcelableActivity> cached=getCachedData(serializationFile);
    if (cached != null) {
      data.addAll(cached);
      if (mComparator != null) {
        Collections.sort(data,mComparator);
      }
 else {
        Collections.sort(data);
      }
      return new CopyOnWriteArrayList<>(data);
    }
  }
  final List<Activity> activities;
  final boolean truncated;
  final Context context=getContext();
  final SharedPreferences prefs=context.getSharedPreferences(SHARED_PREFERENCES_NAME,Context.MODE_PRIVATE);
  final int loadItemLimit=prefs.getInt(KEY_LOAD_ITEM_LIMIT,DEFAULT_LOAD_ITEM_LIMIT);
  try {
    final Paging paging=new Paging();
    paging.setCount(loadItemLimit);
    if (mMaxId > 0) {
      paging.setMaxId(mMaxId);
    }
    if (mSinceId > 0) {
      paging.setSinceId(mSinceId);
    }
    activities=new ArrayList<>();
    truncated=truncateActivities(getActivities(getTwitter(),paging),activities,mSinceId);
  }
 catch (  final TwitterException e) {
    e.printStackTrace();
    return new CopyOnWriteArrayList<>(data);
  }
  final Pair<Long,Long> minId;
  if (activities.isEmpty()) {
    minId=new Pair<>(-1L,-1L);
  }
 else {
    final Activity minActivity=Collections.min(activities);
    minId=new Pair<>(minActivity.getMinPosition(),minActivity.getMaxPosition());
  }
  final boolean insertGap=minId.first > 0 && minId.second > 0 && activities.size() > 1 && !data.isEmpty() && !truncated;
  for (  final Activity activity : activities) {
    final long min=activity.getMinPosition(), max=activity.getMaxPosition();
    final boolean deleted=deleteStatus(data,max);
    final boolean isGap=minId.first == min && minId.second == max && insertGap && !deleted;
    data.add(new ParcelableActivity(activity,mAccountIds,isGap));
  }
  if (mComparator != null) {
    Collections.sort(data,mComparator);
  }
 else {
    Collections.sort(data);
  }
  saveCachedData(serializationFile,data);
  return new CopyOnWriteArrayList<>(data);
}
