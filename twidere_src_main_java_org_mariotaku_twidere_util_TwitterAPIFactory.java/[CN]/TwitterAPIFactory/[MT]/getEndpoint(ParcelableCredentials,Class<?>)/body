{
  final String apiUrlFormat;
  final boolean sameOAuthSigningUrl=credentials.same_oauth_signing_url;
  final boolean noVersionSuffix=credentials.no_version_suffix;
  if (!TextUtils.isEmpty(credentials.api_url_format)) {
    apiUrlFormat=credentials.api_url_format;
  }
 else {
    apiUrlFormat=DEFAULT_TWITTER_API_URL_FORMAT;
  }
  final String domain, versionSuffix;
  if (Twitter.class.isAssignableFrom(cls)) {
    domain="api";
    versionSuffix=noVersionSuffix ? null : "/1.1/";
  }
 else   if (TwitterUpload.class.isAssignableFrom(cls)) {
    domain="upload";
    versionSuffix=noVersionSuffix ? null : "/1.1/";
  }
 else   if (TwitterOAuth.class.isAssignableFrom(cls)) {
    domain="api";
    versionSuffix=null;
  }
 else   if (TwitterOAuth2.class.isAssignableFrom(cls)) {
    domain="api";
    versionSuffix=null;
  }
 else   if (TwitterUserStream.class.isAssignableFrom(cls)) {
    domain="userstream";
    versionSuffix=noVersionSuffix ? null : "/1.1/";
  }
 else   if (TwitterCaps.class.isAssignableFrom(cls)) {
    domain="caps";
    versionSuffix=null;
  }
 else {
    throw new TwitterConverterFactory.UnsupportedTypeException(cls);
  }
  final String endpointUrl;
  endpointUrl=getApiUrl(apiUrlFormat,domain,versionSuffix);
  if (credentials.auth_type == ParcelableCredentials.AuthType.XAUTH || credentials.auth_type == ParcelableCredentials.AuthType.OAUTH) {
    final String signEndpointUrl;
    if (!sameOAuthSigningUrl) {
      signEndpointUrl=getApiUrl(DEFAULT_TWITTER_API_URL_FORMAT,domain,versionSuffix);
    }
 else {
      signEndpointUrl=endpointUrl;
    }
    return new OAuthEndpoint(endpointUrl,signEndpointUrl);
  }
  return new Endpoint(endpointUrl);
}
