{
  final int connectionTimeout=prefs.getInt(KEY_CONNECTION_TIMEOUT,10);
  final boolean ignoreSslError=prefs.getBoolean(KEY_IGNORE_SSL_ERROR,false);
  final boolean enableProxy=prefs.getBoolean(KEY_ENABLE_PROXY,false);
  client.setConnectTimeout(connectionTimeout,TimeUnit.SECONDS);
  client.setReadTimeout(0,TimeUnit.SECONDS);
  client.setWriteTimeout(0,TimeUnit.SECONDS);
  final SSLSocketFactory sslSocketFactory;
  if (ignoreSslError) {
    sslSocketFactory=SSLCertificateSocketFactory.getInsecure(0,null);
    if (sslSocketFactory instanceof SSLCertificateSocketFactory) {
    }
    client.setSslSocketFactory(sslSocketFactory);
  }
 else {
    client.setSslSocketFactory(null);
  }
  if (enableProxy) {
    final String proxyType=prefs.getString(KEY_PROXY_TYPE,null);
    final String proxyHost=prefs.getString(KEY_PROXY_HOST,null);
    final int proxyPort=NumberUtils.toInt(prefs.getString(KEY_PROXY_PORT,null),-1);
    if (!isEmpty(proxyHost) && TwidereMathUtils.inRangeInclusiveInclusive(proxyPort,0,65535)) {
      client.setProxy(null);
      client.setProxySelector(new TwidereProxySelector(context,getProxyType(proxyType),proxyHost,proxyPort));
    }
    final String username=prefs.getString(KEY_PROXY_USERNAME,null);
    final String password=prefs.getString(KEY_PROXY_PASSWORD,null);
    client.setAuthenticator(new Authenticator(){
      @Override public Request authenticate(      Proxy proxy,      Response response) throws IOException {
        return null;
      }
      @Override public Request authenticateProxy(      Proxy proxy,      Response response) throws IOException {
        final Request.Builder builder=response.request().newBuilder();
        if (!TextUtils.isEmpty(username) && !TextUtils.isEmpty(password)) {
          final String credential=Credentials.basic(username,password);
          builder.header("Proxy-Authorization",credential);
        }
        return builder.build();
      }
    }
);
  }
 else {
    client.setProxy(null);
    client.setProxySelector(null);
    client.setAuthenticator(null);
  }
}
