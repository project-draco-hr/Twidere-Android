{
  if (orig == null || orig.getId() <= 0)   return null;
  final ContentValues values=new ContentValues();
  values.put(Statuses.ACCOUNT_ID,account_id);
  values.put(Statuses.STATUS_ID,orig.getId());
  values.put(Statuses.MY_RETWEET_ID,orig.getCurrentUserRetweet());
  final boolean is_retweet=orig.isRetweet();
  final Status status;
  final Status retweeted_status=is_retweet ? orig.getRetweetedStatus() : null;
  if (retweeted_status != null) {
    final User retweet_user=orig.getUser();
    values.put(Statuses.RETWEET_ID,retweeted_status.getId());
    values.put(Statuses.RETWEETED_BY_USER_ID,retweet_user.getId());
    values.put(Statuses.RETWEETED_BY_USER_NAME,retweet_user.getName());
    values.put(Statuses.RETWEETED_BY_USER_SCREEN_NAME,retweet_user.getScreenName());
    status=retweeted_status;
  }
 else {
    status=orig;
  }
  final User user=status.getUser();
  if (user != null) {
    final long userId=user.getId();
    final String profileImageUrl=ParseUtils.parseString(user.getProfileImageUrlHttps());
    final String name=user.getName(), screenName=user.getScreenName();
    values.put(Statuses.USER_ID,userId);
    values.put(Statuses.USER_NAME,name);
    values.put(Statuses.USER_SCREEN_NAME,screenName);
    values.put(Statuses.IS_PROTECTED,user.isProtected());
    values.put(Statuses.IS_VERIFIED,user.isVerified());
    values.put(Statuses.USER_PROFILE_IMAGE_URL,profileImageUrl);
    values.put(CachedUsers.IS_FOLLOWING,user.isFollowing());
  }
  if (status.getCreatedAt() != null) {
    values.put(Statuses.STATUS_TIMESTAMP,status.getCreatedAt().getTime());
  }
  final String text_html=Utils.formatStatusText(status);
  values.put(Statuses.TEXT_HTML,text_html);
  values.put(Statuses.TEXT_PLAIN,status.getText());
  values.put(Statuses.TEXT_UNESCAPED,toPlainText(text_html));
  values.put(Statuses.RETWEET_COUNT,status.getRetweetCount());
  values.put(Statuses.IN_REPLY_TO_STATUS_ID,status.getInReplyToStatusId());
  values.put(Statuses.IN_REPLY_TO_USER_ID,status.getInReplyToUserId());
  values.put(Statuses.IN_REPLY_TO_USER_NAME,Utils.getInReplyToName(status));
  values.put(Statuses.IN_REPLY_TO_USER_SCREEN_NAME,status.getInReplyToScreenName());
  values.put(Statuses.SOURCE,status.getSource());
  values.put(Statuses.IS_POSSIBLY_SENSITIVE,status.isPossiblySensitive());
  final GeoLocation location=status.getGeoLocation();
  if (location != null) {
    values.put(Statuses.LOCATION,location.getLatitude() + "," + location.getLongitude());
  }
  values.put(Statuses.IS_RETWEET,is_retweet);
  values.put(Statuses.IS_FAVORITE,status.isFavorited());
  final ParcelableMedia[] medias=ParcelableMedia.fromEntities(status);
  if (medias != null) {
    values.put(Statuses.MEDIAS,ParseUtils.parseString(JSONSerializer.toJSONArray(medias)));
    values.put(Statuses.FIRST_MEDIA,medias[0].url);
  }
  final ParcelableUserMention[] mentions=(ParcelableUserMention.fromStatus(status));
  if (mentions != null) {
    values.put(Statuses.MENTIONS,ParseUtils.parseString(JSONSerializer.toJSONArray(mentions)));
  }
  return values;
}
