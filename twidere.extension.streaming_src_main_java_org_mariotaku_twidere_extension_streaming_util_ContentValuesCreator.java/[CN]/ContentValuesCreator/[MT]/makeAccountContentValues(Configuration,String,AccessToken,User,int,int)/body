{
  if (user == null || user.getId() <= 0)   return null;
  final ContentValues values=new ContentValues();
switch (auth_type) {
case Accounts.AUTH_TYPE_TWIP_O_MODE:
{
      break;
    }
case Accounts.AUTH_TYPE_BASIC:
{
    if (basic_password == null)     return null;
    values.put(Accounts.BASIC_AUTH_PASSWORD,basic_password);
    break;
  }
case Accounts.AUTH_TYPE_OAUTH:
case Accounts.AUTH_TYPE_XAUTH:
{
  if (access_token == null)   return null;
  if (user.getId() != access_token.getUserId())   return null;
  values.put(Accounts.OAUTH_TOKEN,access_token.getToken());
  values.put(Accounts.OAUTH_TOKEN_SECRET,access_token.getTokenSecret());
  values.put(Accounts.CONSUMER_KEY,conf.getOAuthConsumerKey());
  values.put(Accounts.CONSUMER_SECRET,conf.getOAuthConsumerSecret());
  break;
}
}
values.put(Accounts.AUTH_TYPE,auth_type);
values.put(Accounts.ACCOUNT_ID,user.getId());
values.put(Accounts.SCREEN_NAME,user.getScreenName());
values.put(Accounts.NAME,user.getName());
values.put(Accounts.PROFILE_IMAGE_URL,ParseUtils.parseString(user.getProfileImageUrlHttps()));
values.put(Accounts.PROFILE_BANNER_URL,ParseUtils.parseString(user.getProfileBannerImageUrl()));
values.put(Accounts.COLOR,color);
values.put(Accounts.IS_ACTIVATED,1);
values.put(Accounts.REST_BASE_URL,conf.getRestBaseURL());
values.put(Accounts.SIGNING_REST_BASE_URL,conf.getSigningRestBaseURL());
values.put(Accounts.OAUTH_BASE_URL,conf.getOAuthBaseURL());
values.put(Accounts.SIGNING_OAUTH_BASE_URL,conf.getSigningOAuthBaseURL());
return values;
}
