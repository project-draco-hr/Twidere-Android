{
  final List<String> encodeParams=new ArrayList<>();
  encodeParams.add(encodeParameter("oauth_consumer_key",consumerKey));
  encodeParams.add(encodeParameter("oauth_nonce",oauthNonce));
  encodeParams.add(encodeParameter("oauth_signature_method",OAUTH_SIGNATURE_METHOD));
  encodeParams.add(encodeParameter("oauth_timestamp",String.valueOf(timestamp)));
  encodeParams.add(encodeParameter("oauth_version",OAUTH_VERSION));
  if (oauthToken != null) {
    encodeParams.add(encodeParameter("oauth_token",oauthToken));
  }
  if (queryParams != null) {
    for (    KeyValuePair queryParam : queryParams) {
      encodeParams.add(encodeParameter(queryParam.getKey(),queryParam.getValue()));
    }
  }
  Collections.sort(encodeParams);
  final StringBuilder paramBuilder=new StringBuilder();
  for (int i=0, j=encodeParams.size(); i < j; i++) {
    if (i != 0) {
      paramBuilder.append('&');
    }
    paramBuilder.append(encodeParams.get(i));
  }
  final String signingKey;
  if (oauthTokenSecret != null) {
    signingKey=encode(consumerSecret) + '&' + encode(oauthTokenSecret);
  }
 else {
    signingKey=encode(consumerSecret) + '&';
  }
  try {
    final Mac mac=Mac.getInstance("HmacSHA1");
    SecretKeySpec secret=new SecretKeySpec(signingKey.getBytes(),mac.getAlgorithm());
    mac.init(secret);
    final String baseString=encode(method) + '&' + encode(url)+ '&'+ encode(paramBuilder.toString());
    final byte[] signature=mac.doFinal(baseString.getBytes(DEFAULT_ENCODING));
    return Base64.encodeToString(signature,Base64.NO_WRAP);
  }
 catch (  NoSuchAlgorithmException e) {
    throw new UnsupportedOperationException(e);
  }
catch (  InvalidKeyException|UnsupportedEncodingException e) {
    throw new AssertionError(e);
  }
}
