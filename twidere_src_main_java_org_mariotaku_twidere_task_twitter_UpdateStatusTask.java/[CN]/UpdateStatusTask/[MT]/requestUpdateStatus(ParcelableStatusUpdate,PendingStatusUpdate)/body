{
  stateCallback.onUpdatingStatus();
  UpdateStatusResult result=new UpdateStatusResult(new ParcelableStatus[pendingUpdate.length],new MicroBlogException[pendingUpdate.length]);
  for (int i=0; i < pendingUpdate.length; i++) {
    final ParcelableAccount account=statusUpdate.accounts[i];
    MicroBlog microBlog=MicroBlogAPIFactory.getInstance(context,account.account_key,true);
    Body body=null;
    try {
switch (ParcelableAccountUtils.getAccountType(account)) {
case ParcelableAccount.Type.FANFOU:
{
          if (!ArrayUtils.isEmpty(statusUpdate.media)) {
            if (statusUpdate.media.length > 1) {
              result.exceptions[i]=new MicroBlogException(context.getString(R.string.error_too_many_photos_fanfou));
              break;
            }
            body=getBodyFromMedia(context.getContentResolver(),Uri.parse(statusUpdate.media[0].uri),new ContentLengthInputStream.ReadListener(){
              @Override public void onRead(              long length,              long position){
                stateCallback.onUploadingProgressChanged(-1,position,length);
              }
            }
);
            PhotoStatusUpdate photoUpdate=new PhotoStatusUpdate(body,pendingUpdate.overrideTexts[i]);
            final Status requestResult=microBlog.uploadPhoto(photoUpdate);
            result.statuses[i]=ParcelableStatusUtils.fromStatus(requestResult,account.account_key,false);
          }
 else {
            final Status requestResult=twitterUpdateStatus(microBlog,statusUpdate,pendingUpdate,pendingUpdate.overrideTexts[i],i);
            result.statuses[i]=ParcelableStatusUtils.fromStatus(requestResult,account.account_key,false);
          }
          break;
        }
default :
{
        final Status requestResult=twitterUpdateStatus(microBlog,statusUpdate,pendingUpdate,pendingUpdate.overrideTexts[i],i);
        result.statuses[i]=ParcelableStatusUtils.fromStatus(requestResult,account.account_key,false);
        break;
      }
  }
}
 catch (MicroBlogException e) {
  result.exceptions[i]=e;
}
 finally {
  Utils.closeSilently(body);
}
}
return result;
}
