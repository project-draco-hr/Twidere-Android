{
  final String uploaderComponent=preferences.getString(KEY_MEDIA_UPLOADER,null);
  if (ServicePickerPreference.isNoneValue(uploaderComponent))   return null;
  final MediaUploaderInterface uploader=MediaUploaderInterface.getInstance(app,uploaderComponent);
  if (uploader == null) {
    throw new UploaderNotFoundException(context.getString(R.string.error_message_media_uploader_not_found));
  }
  try {
    uploader.checkService(new AbsServiceInterface.CheckServiceAction(){
      @Override public void check(      @Nullable Bundle metaData) throws AbsServiceInterface.CheckServiceException {
        if (metaData == null)         throw new ExtensionVersionMismatchException();
        final String extensionVersion=metaData.getString(METADATA_KEY_EXTENSION_VERSION_MEDIA_UPLOADER);
        if (!TextUtils.equals(extensionVersion,context.getString(R.string.media_uploader_service_interface_version))) {
          throw new ExtensionVersionMismatchException();
        }
      }
    }
);
  }
 catch (  AbsServiceInterface.CheckServiceException e) {
    if (e instanceof ExtensionVersionMismatchException) {
      throw new UploadException(context.getString(R.string.uploader_version_incompatible));
    }
    throw new UploadException(e);
  }
  return uploader;
}
