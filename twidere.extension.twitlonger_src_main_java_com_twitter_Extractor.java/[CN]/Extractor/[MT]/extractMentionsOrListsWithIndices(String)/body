{
  if (text == null || text.length() == 0)   return Collections.emptyList();
  boolean found=false;
  for (  final char c : text.toCharArray()) {
    if (c == '@' || c == FULLWIDTH_AT_SIGN) {
      found=true;
      break;
    }
  }
  if (!found)   return Collections.emptyList();
  final ArrayList<Entity> extracted=new ArrayList<Entity>();
  final Matcher matcher=Regex.VALID_MENTION_OR_LIST.matcher(text);
  while (matcher.find()) {
    final String after=text.substring(matcher.end());
    if (!Regex.INVALID_MENTION_MATCH_END.matcher(after).find()) {
      if (matcher.group(Regex.VALID_MENTION_OR_LIST_GROUP_LIST) == null) {
        extracted.add(new Entity(matcher,Entity.Type.MENTION,Regex.VALID_MENTION_OR_LIST_GROUP_USERNAME));
      }
 else {
        extracted.add(new Entity(matcher.start(Regex.VALID_MENTION_OR_LIST_GROUP_USERNAME) - 1,matcher.end(Regex.VALID_MENTION_OR_LIST_GROUP_LIST),matcher.group(Regex.VALID_MENTION_OR_LIST_GROUP_USERNAME),matcher.group(Regex.VALID_MENTION_OR_LIST_GROUP_LIST),Entity.Type.MENTION));
      }
    }
  }
  return extracted;
}
