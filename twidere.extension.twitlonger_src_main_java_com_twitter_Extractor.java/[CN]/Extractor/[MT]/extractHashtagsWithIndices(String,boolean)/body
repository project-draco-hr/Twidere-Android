{
  if (text == null || text.length() == 0)   return Collections.emptyList();
  boolean found=false;
  for (  final char c : text.toCharArray()) {
    if (c == '#' || c == FULLWIDTH_NUMBER_SIGN) {
      found=true;
      break;
    }
  }
  if (!found)   return Collections.emptyList();
  final ArrayList<Entity> extracted=new ArrayList<Entity>();
  final Matcher matcher=Regex.VALID_HASHTAG.matcher(text);
  while (matcher.find()) {
    final String after=text.substring(matcher.end());
    if (!Regex.INVALID_HASHTAG_MATCH_END.matcher(after).find()) {
      extracted.add(new Entity(matcher,Entity.Type.HASHTAG,Regex.VALID_HASHTAG_GROUP_TAG));
    }
  }
  if (checkUrlOverlap) {
    final List<Entity> urls=extractURLsWithIndices(text);
    if (!urls.isEmpty()) {
      extracted.addAll(urls);
      removeOverlappingEntities(extracted);
      final Iterator<Entity> it=extracted.iterator();
      while (it.hasNext()) {
        final Entity entity=it.next();
        if (entity.getType() != Entity.Type.HASHTAG) {
          it.remove();
        }
      }
    }
  }
  return extracted;
}
