{
  if (context == null)   return null;
  final TwidereApplication app=TwidereApplication.getInstance(context);
  final SharedPreferences prefs=context.getSharedPreferences(SHARED_PREFERENCES_NAME,Context.MODE_PRIVATE);
  final int connection_timeout=prefs.getInt(KEY_CONNECTION_TIMEOUT,10) * 1000;
  final boolean enableGzip=prefs.getBoolean(KEY_GZIP_COMPRESSING,true);
  final boolean ignoreSslError=prefs.getBoolean(KEY_IGNORE_SSL_ERROR,false);
  final boolean enableProxy=prefs.getBoolean(KEY_ENABLE_PROXY,false);
  final ParcelableCredentials credentials=ParcelableCredentials.getCredentials(context,accountId);
  if (credentials == null)   return null;
  final ConfigurationBuilder cb=new ConfigurationBuilder();
  cb.setHostAddressResolverFactory(new TwidereHostResolverFactory(app));
  cb.setHttpClientFactory(new OkHttpClientFactory(context));
  cb.setHttpConnectionTimeout(connection_timeout);
  cb.setGZIPEnabled(enableGzip);
  cb.setIgnoreSSLError(ignoreSslError);
  cb.setIncludeCards(true);
  cb.setCardsPlatform("Android-12");
  if (enableProxy) {
    final String proxy_host=prefs.getString(KEY_PROXY_HOST,null);
    final int proxy_port=ParseUtils.parseInt(prefs.getString(KEY_PROXY_PORT,"-1"));
    if (!isEmpty(proxy_host) && proxy_port > 0) {
      cb.setHttpProxyHost(proxy_host);
      cb.setHttpProxyPort(proxy_port);
    }
  }
  final String prefConsumerKey=prefs.getString(KEY_CONSUMER_KEY,TWITTER_CONSUMER_KEY);
  final String prefConsumerSecret=prefs.getString(KEY_CONSUMER_SECRET,TWITTER_CONSUMER_SECRET);
  final String apiUrlFormat=credentials.api_url_format;
  final String consumerKey=trim(credentials.consumer_key);
  final String consumerSecret=trim(credentials.consumer_secret);
  final boolean sameOAuthSigningUrl=credentials.same_oauth_signing_url;
  final boolean noVersionSuffix=credentials.no_version_suffix;
  if (!isEmpty(apiUrlFormat)) {
    final String versionSuffix=noVersionSuffix ? null : "/1.1/";
    cb.setRestBaseURL(getApiUrl(apiUrlFormat,"api",versionSuffix));
    cb.setOAuthBaseURL(getApiUrl(apiUrlFormat,"api","/oauth/"));
    cb.setUploadBaseURL(getApiUrl(apiUrlFormat,"upload",versionSuffix));
    if (!sameOAuthSigningUrl) {
      cb.setSigningRestBaseURL(DEFAULT_SIGNING_REST_BASE_URL);
      cb.setSigningOAuthBaseURL(DEFAULT_SIGNING_OAUTH_BASE_URL);
      cb.setSigningUploadBaseURL(DEFAULT_SIGNING_UPLOAD_BASE_URL);
    }
  }
  if (TwitterContentUtils.isOfficialKey(context,consumerKey,consumerSecret)) {
    setMockOfficialUserAgent(context,cb);
  }
 else {
    setUserAgent(context,cb);
  }
  cb.setIncludeEntitiesEnabled(includeEntities);
  cb.setIncludeRTsEnabled(includeRetweets);
  cb.setIncludeReplyCountEnabled(true);
  cb.setIncludeDescendentReplyCountEnabled(true);
switch (credentials.auth_type) {
case Accounts.AUTH_TYPE_OAUTH:
case Accounts.AUTH_TYPE_XAUTH:
{
      if (!isEmpty(consumerKey) && !isEmpty(consumerSecret)) {
        cb.setOAuthConsumerKey(consumerKey);
        cb.setOAuthConsumerSecret(consumerSecret);
      }
 else       if (!isEmpty(prefConsumerKey) && !isEmpty(prefConsumerSecret)) {
        cb.setOAuthConsumerKey(prefConsumerKey);
        cb.setOAuthConsumerSecret(prefConsumerSecret);
      }
 else {
        cb.setOAuthConsumerKey(TWITTER_CONSUMER_KEY);
        cb.setOAuthConsumerSecret(TWITTER_CONSUMER_SECRET);
      }
      final String token=credentials.oauth_token;
      final String tokenSecret=credentials.oauth_token_secret;
      if (isEmpty(token) || isEmpty(tokenSecret))       return null;
      return new TwitterFactory(cb.build()).getInstance(new AccessToken(token,tokenSecret));
    }
case Accounts.AUTH_TYPE_BASIC:
{
    final String screenName=credentials.screen_name;
    final String username=credentials.basic_auth_username;
    final String loginName=username != null ? username : screenName;
    final String password=credentials.basic_auth_password;
    if (isEmpty(loginName) || isEmpty(password))     return null;
    return new TwitterFactory(cb.build()).getInstance(new BasicAuthorization(loginName,password));
  }
case Accounts.AUTH_TYPE_TWIP_O_MODE:
{
  return new TwitterFactory(cb.build()).getInstance(new TwipOModeAuthorization());
}
default :
{
return null;
}
}
}
