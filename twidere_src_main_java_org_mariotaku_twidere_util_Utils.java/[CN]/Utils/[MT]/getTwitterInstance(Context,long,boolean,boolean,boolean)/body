{
  if (context == null)   return null;
  final TwidereApplication app=TwidereApplication.getInstance(context);
  final SharedPreferences prefs=context.getSharedPreferences(SHARED_PREFERENCES_NAME,Context.MODE_PRIVATE);
  final int connection_timeout=prefs.getInt(KEY_CONNECTION_TIMEOUT,10) * 1000;
  final boolean enableGzip=prefs.getBoolean(KEY_GZIP_COMPRESSING,true);
  final boolean ignoreSslError=prefs.getBoolean(KEY_IGNORE_SSL_ERROR,false);
  final boolean enableProxy=prefs.getBoolean(KEY_ENABLE_PROXY,false);
  final String where=Where.equals(new Column(Accounts.ACCOUNT_ID),accountId).getSQL();
  final Cursor c=ContentResolverUtils.query(context.getContentResolver(),Accounts.CONTENT_URI,Accounts.COLUMNS,where,null,null);
  if (c == null)   return null;
  try {
    if (!c.moveToFirst())     return null;
    final ConfigurationBuilder cb=new ConfigurationBuilder();
    cb.setHostAddressResolverFactory(new TwidereHostResolverFactory(app));
    if (apacheHttp) {
      cb.setHttpClientFactory(new TwidereHttpClientFactory(app));
    }
    cb.setHttpConnectionTimeout(connection_timeout);
    cb.setGZIPEnabled(enableGzip);
    cb.setIgnoreSSLError(ignoreSslError);
    if (enableProxy) {
      final String proxy_host=prefs.getString(KEY_PROXY_HOST,null);
      final int proxy_port=ParseUtils.parseInt(prefs.getString(KEY_PROXY_PORT,"-1"));
      if (!isEmpty(proxy_host) && proxy_port > 0) {
        cb.setHttpProxyHost(proxy_host);
        cb.setHttpProxyPort(proxy_port);
      }
    }
    final String prefConsumerKey=prefs.getString(KEY_CONSUMER_KEY,TWITTER_CONSUMER_KEY);
    final String prefConsumerSecret=prefs.getString(KEY_CONSUMER_SECRET,TWITTER_CONSUMER_SECRET);
    final String apiUrlFormat=c.getString(c.getColumnIndex(Accounts.API_URL_FORMAT));
    final String consumerKey=trim(c.getString(c.getColumnIndex(Accounts.CONSUMER_KEY)));
    final String consumerSecret=trim(c.getString(c.getColumnIndex(Accounts.CONSUMER_SECRET)));
    final boolean sameOAuthSigningUrl=c.getInt(c.getColumnIndex(Accounts.SAME_OAUTH_SIGNING_URL)) == 1;
    if (!isEmpty(apiUrlFormat)) {
      cb.setRestBaseURL(getApiUrl(apiUrlFormat,"api","/1.1/"));
      cb.setOAuthBaseURL(getApiUrl(apiUrlFormat,"api","/oauth/"));
      cb.setUploadBaseURL(getApiUrl(apiUrlFormat,"upload","/1.1/"));
      if (!sameOAuthSigningUrl) {
        cb.setSigningRestBaseURL(DEFAULT_SIGNING_REST_BASE_URL);
        cb.setSigningOAuthBaseURL(DEFAULT_SIGNING_OAUTH_BASE_URL);
        cb.setSigningUploadBaseURL(DEFAULT_SIGNING_UPLOAD_BASE_URL);
      }
    }
    if (isOfficialConsumerKeySecret(context,consumerKey,consumerSecret)) {
      setMockOfficialUserAgent(context,cb);
    }
 else {
      setUserAgent(context,cb);
    }
    cb.setIncludeEntitiesEnabled(includeEntities);
    cb.setIncludeRTsEnabled(includeRetweets);
switch (c.getInt(c.getColumnIndexOrThrow(Accounts.AUTH_TYPE))) {
case Accounts.AUTH_TYPE_OAUTH:
case Accounts.AUTH_TYPE_XAUTH:
{
        if (!isEmpty(consumerKey) && !isEmpty(consumerSecret)) {
          cb.setOAuthConsumerKey(consumerKey);
          cb.setOAuthConsumerSecret(consumerSecret);
        }
 else         if (!isEmpty(prefConsumerKey) && !isEmpty(prefConsumerSecret)) {
          cb.setOAuthConsumerKey(prefConsumerKey);
          cb.setOAuthConsumerSecret(prefConsumerSecret);
        }
 else {
          cb.setOAuthConsumerKey(TWITTER_CONSUMER_KEY);
          cb.setOAuthConsumerSecret(TWITTER_CONSUMER_SECRET);
        }
        final String token=c.getString(c.getColumnIndexOrThrow(Accounts.OAUTH_TOKEN));
        final String tokenSecret=c.getString(c.getColumnIndexOrThrow(Accounts.OAUTH_TOKEN_SECRET));
        if (isEmpty(token) || isEmpty(tokenSecret))         return null;
        return new TwitterFactory(cb.build()).getInstance(new AccessToken(token,tokenSecret));
      }
case Accounts.AUTH_TYPE_BASIC:
{
      final String screenName=c.getString(c.getColumnIndexOrThrow(Accounts.SCREEN_NAME));
      final String username=c.getString(c.getColumnIndexOrThrow(Accounts.BASIC_AUTH_USERNAME));
      final String loginName=username != null ? username : screenName;
      final String password=c.getString(c.getColumnIndexOrThrow(Accounts.BASIC_AUTH_PASSWORD));
      if (isEmpty(loginName) || isEmpty(password))       return null;
      return new TwitterFactory(cb.build()).getInstance(new BasicAuthorization(loginName,password));
    }
case Accounts.AUTH_TYPE_TWIP_O_MODE:
{
    return new TwitterFactory(cb.build()).getInstance(new TwipOModeAuthorization());
  }
default :
{
  return null;
}
}
}
  finally {
c.close();
}
}
