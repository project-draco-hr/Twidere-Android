{
  if (context == null)   return;
  final ContentResolver resolver=context.getContentResolver();
  final int itemLimit=context.getSharedPreferences(SHARED_PREFERENCES_NAME,Context.MODE_PRIVATE).getInt(KEY_DATABASE_ITEM_LIMIT,DEFAULT_DATABASE_ITEM_LIMIT);
  for (  final long account_id : getAccountIds(context)) {
    for (    final Uri uri : STATUSES_URIS) {
      if (CachedStatuses.CONTENT_URI.equals(uri)) {
        continue;
      }
      final String table=getTableNameByUri(uri);
      final Expression account_where=new Expression(Statuses.ACCOUNT_ID + " = " + account_id);
      final SQLSelectQuery.Builder qb=new SQLSelectQuery.Builder();
      qb.select(new Column(Statuses._ID)).from(new Tables(table));
      qb.where(Expression.equals(Statuses.ACCOUNT_ID,account_id));
      qb.orderBy(new OrderBy(Statuses.STATUS_ID,false));
      qb.limit(itemLimit);
      final Expression where=Expression.and(Expression.notIn(new Column(Statuses._ID),qb.build()),account_where);
      resolver.delete(uri,where.getSQL(),null);
    }
    for (    final Uri uri : DIRECT_MESSAGES_URIS) {
      final String table=getTableNameByUri(uri);
      final Expression account_where=new Expression(DirectMessages.ACCOUNT_ID + " = " + account_id);
      final SQLSelectQuery.Builder qb=new SQLSelectQuery.Builder();
      qb.select(new Column(DirectMessages._ID)).from(new Tables(table));
      qb.where(Expression.equals(DirectMessages.ACCOUNT_ID,account_id));
      qb.orderBy(new OrderBy(DirectMessages.MESSAGE_ID,false));
      qb.limit(itemLimit);
      final Expression where=Expression.and(Expression.notIn(new Column(DirectMessages._ID),qb.build()),account_where);
      resolver.delete(uri,where.getSQL(),null);
    }
  }
  for (  final Uri uri : CACHE_URIS) {
    final String table=getTableNameByUri(uri);
    if (table == null)     continue;
    final SQLSelectQuery.Builder qb=new SQLSelectQuery.Builder();
    qb.select(new Column(BaseColumns._ID));
    qb.from(new Tables(table));
    qb.orderBy(new OrderBy(BaseColumns._ID,false));
    qb.limit(itemLimit * 20);
    final Expression where=Expression.notIn(new Column(BaseColumns._ID),qb.build());
    resolver.delete(uri,where.getSQL(),null);
  }
}
