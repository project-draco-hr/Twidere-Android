{
switch (item.getItemId()) {
case MENU_COPY:
{
      if (ClipboardUtils.setText(context,status.text_plain)) {
        showOkMessage(context,R.string.text_copied,false);
      }
      break;
    }
case MENU_RETWEET:
{
    if (isMyRetweet(status)) {
      twitter.cancelRetweetAsync(status.account_id,status.id,status.my_retweet_id);
    }
 else {
      twitter.retweetStatusAsync(status.account_id,status.id);
    }
    break;
  }
case MENU_QUOTE:
{
  final Intent intent=new Intent(INTENT_ACTION_QUOTE);
  intent.putExtra(EXTRA_STATUS,status);
  context.startActivity(intent);
  break;
}
case MENU_REPLY:
{
final Intent intent=new Intent(INTENT_ACTION_REPLY);
intent.putExtra(EXTRA_STATUS,status);
context.startActivity(intent);
break;
}
case MENU_FAVORITE:
{
if (status.is_favorite) {
twitter.destroyFavoriteAsync(status.account_id,status.id);
}
 else {
twitter.createFavoriteAsync(status.account_id,status.id);
}
break;
}
case MENU_DELETE:
{
DestroyStatusDialogFragment.show(fm,status);
break;
}
case MENU_ADD_TO_FILTER:
{
AddStatusFilterDialogFragment.show(fm,status);
break;
}
case MENU_SET_COLOR:
{
final Intent intent=new Intent(context,ColorPickerDialogActivity.class);
final int color=getUserColor(context,status.user_id,true);
if (color != 0) {
intent.putExtra(EXTRA_COLOR,color);
}
intent.putExtra(EXTRA_CLEAR_BUTTON,color != 0);
intent.putExtra(EXTRA_ALPHA_SLIDER,false);
if (fragment != null) {
fragment.startActivityForResult(intent,REQUEST_SET_COLOR);
}
 else if (context instanceof Activity) {
((Activity)context).startActivityForResult(intent,REQUEST_SET_COLOR);
}
break;
}
case MENU_CLEAR_NICKNAME:
{
clearUserNickname(context,status.user_id);
break;
}
case MENU_SET_NICKNAME:
{
final String nick=getUserNickname(context,status.user_id,true);
SetUserNicknameDialogFragment.show(fm,status.user_id,nick);
break;
}
case MENU_TRANSLATE:
{
final ParcelableCredentials account=ParcelableAccount.getCredentials(context,status.account_id);
if (isOfficialCredentials(context,account)) {
StatusTranslateDialogFragment.show(fm,status);
}
 else {
final Resources resources=context.getResources();
final Locale locale=resources.getConfiguration().locale;
try {
final String template="http://translate.google.com/#%s|%s|%s";
final String sourceLang="auto";
final String targetLang=URLEncoder.encode(locale.getLanguage(),HTTP.UTF_8);
final String text=URLEncoder.encode(status.text_unescaped,HTTP.UTF_8);
final Uri uri=Uri.parse(String.format(Locale.ROOT,template,sourceLang,targetLang,text));
final Intent intent=new Intent(Intent.ACTION_VIEW,uri);
intent.addCategory(Intent.CATEGORY_BROWSABLE);
context.startActivity(intent);
}
 catch (UnsupportedEncodingException ignore) {
}
}
break;
}
case MENU_OPEN_WITH_ACCOUNT:
{
final Intent intent=new Intent(INTENT_ACTION_SELECT_ACCOUNT);
intent.setClass(context,AccountSelectorActivity.class);
intent.putExtra(EXTRA_SINGLE_SELECTION,true);
if (fragment != null) {
fragment.startActivityForResult(intent,REQUEST_SELECT_ACCOUNT);
}
 else if (context instanceof Activity) {
((Activity)context).startActivityForResult(intent,REQUEST_SELECT_ACCOUNT);
}
break;
}
default :
{
if (item.getIntent() != null) {
try {
context.startActivity(item.getIntent());
}
 catch (final ActivityNotFoundException e) {
Log.w(LOGTAG,e);
return false;
}
}
break;
}
}
return true;
}
