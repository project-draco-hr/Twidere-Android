{
  final String where=Where.equals(new Column(Accounts.ACCOUNT_ID),accountId).getSQL();
  final Cursor c=ContentResolverUtils.query(context.getContentResolver(),Accounts.CONTENT_URI,Accounts.COLUMNS,where,null,null);
  if (c == null)   return null;
  try {
    if (!c.moveToFirst())     return null;
switch (c.getInt(c.getColumnIndexOrThrow(Accounts.AUTH_TYPE))) {
case Accounts.AUTH_TYPE_OAUTH:
case Accounts.AUTH_TYPE_XAUTH:
{
        final SharedPreferences prefs=context.getSharedPreferences(SHARED_PREFERENCES_NAME,Context.MODE_PRIVATE);
        final String prefConsumerKey=prefs.getString(KEY_CONSUMER_KEY,TWITTER_CONSUMER_KEY);
        final String prefConsumerSecret=prefs.getString(KEY_CONSUMER_SECRET,TWITTER_CONSUMER_SECRET);
        final ConfigurationBuilder cb=new ConfigurationBuilder();
        final String apiUrlFormat=c.getString(c.getColumnIndex(Accounts.API_URL_FORMAT));
        final String consumerKey=trim(c.getString(c.getColumnIndex(Accounts.CONSUMER_KEY)));
        final String consumerSecret=trim(c.getString(c.getColumnIndex(Accounts.CONSUMER_SECRET)));
        final boolean sameOAuthSigningUrl=c.getInt(c.getColumnIndex(Accounts.SAME_OAUTH_SIGNING_URL)) == 1;
        if (!isEmpty(apiUrlFormat)) {
          cb.setRestBaseURL(getApiUrl(apiUrlFormat,"api","/1.1/"));
          cb.setOAuthBaseURL(getApiUrl(apiUrlFormat,"api","/oauth/"));
          cb.setUploadBaseURL(getApiUrl(apiUrlFormat,"upload","/1.1/"));
          if (!sameOAuthSigningUrl) {
            cb.setSigningRestBaseURL(DEFAULT_SIGNING_REST_BASE_URL);
            cb.setSigningOAuthBaseURL(DEFAULT_SIGNING_OAUTH_BASE_URL);
            cb.setSigningUploadBaseURL(DEFAULT_SIGNING_UPLOAD_BASE_URL);
          }
        }
        if (!isEmpty(consumerKey) && !isEmpty(consumerSecret)) {
          cb.setOAuthConsumerKey(consumerKey);
          cb.setOAuthConsumerSecret(consumerSecret);
        }
 else         if (!isEmpty(prefConsumerKey) && !isEmpty(prefConsumerSecret)) {
          cb.setOAuthConsumerKey(prefConsumerKey);
          cb.setOAuthConsumerSecret(prefConsumerSecret);
        }
 else {
          cb.setOAuthConsumerKey(TWITTER_CONSUMER_KEY);
          cb.setOAuthConsumerSecret(TWITTER_CONSUMER_SECRET);
        }
        final OAuthAuthorization auth=new OAuthAuthorization(cb.build());
        final String token=c.getString(c.getColumnIndexOrThrow(Accounts.OAUTH_TOKEN));
        final String tokenSecret=c.getString(c.getColumnIndexOrThrow(Accounts.OAUTH_TOKEN_SECRET));
        auth.setOAuthAccessToken(new AccessToken(token,tokenSecret));
        return auth;
      }
case Accounts.AUTH_TYPE_BASIC:
{
      final String screenName=c.getString(c.getColumnIndexOrThrow(Accounts.SCREEN_NAME));
      final String username=c.getString(c.getColumnIndexOrThrow(Accounts.BASIC_AUTH_USERNAME));
      final String loginName=username != null ? username : screenName;
      final String password=c.getString(c.getColumnIndexOrThrow(Accounts.BASIC_AUTH_PASSWORD));
      if (isEmpty(loginName) || isEmpty(password))       return null;
      return new BasicAuthorization(loginName,password);
    }
default :
{
    return null;
  }
}
}
  finally {
c.close();
}
}
