{
  final Calendar now=Calendar.getInstance();
  final Calendar cal=Calendar.getInstance();
  cal.clear();
  cal.set(Calendar.YEAR,now.get(Calendar.YEAR));
  cal.set(Calendar.MONTH,now.get(Calendar.MONTH));
  final int dayMin=now.getActualMinimum(Calendar.DAY_OF_MONTH);
  final int dayMax=now.getActualMaximum(Calendar.DAY_OF_MONTH);
  cal.set(Calendar.DAY_OF_MONTH,dayMin);
  cal.setTimeZone(now.getTimeZone());
  final Date start=cal.getTime();
  cal.set(Calendar.DAY_OF_MONTH,dayMax);
  cal.add(Calendar.DATE,1);
  final Date end=cal.getTime();
  final TaskRunnable<Object[],NetworkUsageInfo,NetworkUsageSummaryPreferences> task;
  task=new TaskRunnable<Object[],NetworkUsageInfo,NetworkUsageSummaryPreferences>(){
    @Override public NetworkUsageInfo doLongOperation(    Object[] params) throws InterruptedException {
      return NetworkUsageInfo.get((Context)params[0],(Date)params[1],(Date)params[2],dayMin,dayMax);
    }
    @Override public void callback(    NetworkUsageSummaryPreferences handler,    NetworkUsageInfo result){
      handler.setUsage(result);
    }
  }
;
  task.setResultHandler(this);
  task.setParams(new Object[]{getContext(),start,end});
  AsyncManager.runBackgroundTask(task);
}
