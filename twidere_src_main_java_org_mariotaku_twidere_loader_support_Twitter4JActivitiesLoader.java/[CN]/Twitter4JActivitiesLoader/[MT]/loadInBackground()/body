{
  if (mAccountIds == null)   return Collections.emptyList();
  final File serializationFile=getSerializationFile();
  if (mIsFirstLoad && mUseCache && serializationFile != null) {
    final List<ParcelableActivity> cached=getCachedData(serializationFile);
    if (cached != null) {
      Collections.sort(cached);
      return new CopyOnWriteArrayList<ParcelableActivity>(cached);
    }
  }
  final SharedPreferences prefs=mContext.getSharedPreferences(SHARED_PREFERENCES_NAME,Context.MODE_PRIVATE);
  final int loadItemLimit=prefs.getInt(KEY_LOAD_ITEM_LIMIT,DEFAULT_LOAD_ITEM_LIMIT);
  final List<ParcelableActivity> result=new ArrayList<ParcelableActivity>();
  for (  final long accountId : mAccountIds) {
    final List<Activity> activities;
    try {
      final Paging paging=new Paging();
      paging.setCount(Math.min(100,loadItemLimit));
      activities=getActivities(getTwitter(accountId),paging);
    }
 catch (    final TwitterException e) {
      e.printStackTrace();
      final List<ParcelableActivity> cached=getCachedData(serializationFile);
      if (cached == null)       return Collections.emptyList();
      return new CopyOnWriteArrayList<ParcelableActivity>(cached);
    }
    if (activities == null)     return new CopyOnWriteArrayList<ParcelableActivity>(mData);
    for (    final Activity activity : activities) {
      result.add(new ParcelableActivity(activity,accountId));
    }
  }
  Collections.sort(result);
  saveCachedData(serializationFile,result);
  return new CopyOnWriteArrayList<ParcelableActivity>(result);
}
