{
  final int position=cursor.getPosition();
  final StatusListViewHolder holder=(StatusListViewHolder)view.getTag();
  final boolean isGap=cursor.getShort(mIndices.is_gap) == 1;
  final boolean showGap=isGap && !mGapDisallowed && position != getCount() - 1;
  holder.setShowAsGap(showGap);
  holder.position=position;
  holder.setDisplayProfileImage(isDisplayProfileImage());
  holder.setCardHighlightOption(mCardHighlightOption);
  if (!showGap) {
    final Resources res=mContext.getResources();
    final TwidereLinkify linkify=getLinkify();
    final boolean showAccountColor=isShowAccountColor();
    final long accountId=cursor.getLong(mIndices.account_id);
    final long userId=cursor.getLong(mIndices.user_id);
    final long timestamp=cursor.getLong(mIndices.status_timestamp);
    final long retweetTimestamp=cursor.getLong(mIndices.retweet_timestamp);
    final long retweetCount=cursor.getLong(mIndices.retweet_count);
    final long retweetedByUserId=cursor.getLong(mIndices.retweeted_by_user_id);
    final long inReplyToUserId=cursor.getLong(mIndices.in_reply_to_user_id);
    final String retweetedByName=cursor.getString(mIndices.retweeted_by_user_name);
    final String retweetedByScreenName=cursor.getString(mIndices.retweeted_by_user_screen_name);
    final String text=getLinkHighlightOption() != VALUE_LINK_HIGHLIGHT_OPTION_CODE_NONE ? cursor.getString(mIndices.text_html) : cursor.getString(mIndices.text_unescaped);
    final String screen_name=cursor.getString(mIndices.user_screen_name);
    final String name=cursor.getString(mIndices.user_name);
    final String inReplyToName=cursor.getString(mIndices.in_reply_to_user_name);
    final String inReplyToScreenName=cursor.getString(mIndices.in_reply_to_user_screen_name);
    final ParcelableMedia[] media=ParcelableMedia.fromJSONString(cursor.getString(mIndices.media));
    final String firstMedia=media != null && media.length > 0 ? media[0].media_url : null;
    final boolean isFavorite=cursor.getShort(mIndices.is_favorite) == 1;
    final boolean hasLocation=!TextUtils.isEmpty(cursor.getString(mIndices.location));
    final boolean possiblySensitive=cursor.getInt(mIndices.is_possibly_sensitive) == 1;
    final boolean hasMedia=media != null && media.length > 0;
    final boolean isVerified=cursor.getShort(mIndices.is_verified) == 1;
    final boolean isProtected=cursor.getShort(mIndices.is_protected) == 1;
    final boolean isRetweet=cursor.getShort(mIndices.is_retweet) == 1;
    final boolean isReply=cursor.getLong(mIndices.in_reply_to_status_id) > 0;
    final boolean isMention=ParcelableUserMention.hasMention(cursor.getString(mIndices.mentions),accountId);
    final boolean isMyStatus=accountId == userId;
    holder.setUserColor(getUserColor(mContext,userId));
    if (isRetweet) {
      holder.setUserColor(getUserColor(mContext,userId),getUserColor(mContext,retweetedByUserId));
    }
 else {
      holder.setUserColor(getUserColor(mContext,userId));
    }
    holder.setHighlightColor(getCardHighlightColor(res,!mMentionsHighlightDisabled && isMention,!mFavoritesHighlightDisabled && isFavorite,isRetweet));
    holder.setAccountColorEnabled(showAccountColor);
    if (showAccountColor) {
      holder.setAccountColor(getAccountColor(mContext,accountId));
    }
    holder.setTextSize(getTextSize());
    holder.setIsMyStatus(isMyStatus && !mIndicateMyStatusDisabled);
    if (getLinkHighlightOption() != VALUE_LINK_HIGHLIGHT_OPTION_CODE_NONE) {
      holder.text.setText(Html.fromHtml(text));
      linkify.applyAllLinks(holder.text,accountId,possiblySensitive);
      holder.text.setMovementMethod(null);
    }
 else {
      holder.text.setText(text);
    }
    holder.setUserType(isVerified,isProtected);
    holder.setDisplayNameFirst(isDisplayNameFirst());
    holder.setNicknameOnly(isNicknameOnly());
    final String nick=getUserNickname(context,userId);
    holder.name.setText(TextUtils.isEmpty(nick) ? name : isNicknameOnly() ? nick : context.getString(R.string.name_with_nickname,name,nick));
    holder.screen_name.setText("@" + screen_name);
    if (getLinkHighlightOption() != VALUE_LINK_HIGHLIGHT_OPTION_CODE_NONE) {
      linkify.applyUserProfileLinkNoHighlight(holder.name,accountId,userId,screen_name);
      linkify.applyUserProfileLinkNoHighlight(holder.screen_name,accountId,userId,screen_name);
      holder.name.setMovementMethod(null);
      holder.screen_name.setMovementMethod(null);
    }
    holder.time.setTime(retweetTimestamp > 0 ? retweetTimestamp : timestamp);
    holder.setStatusType(!mFavoritesHighlightDisabled && isFavorite,hasLocation,hasMedia,possiblySensitive);
    holder.setIsReplyRetweet(isReply,isRetweet);
    if (isRetweet) {
      holder.setRetweetedBy(retweetCount,retweetedByUserId,retweetedByName,retweetedByScreenName);
    }
 else     if (isReply) {
      holder.setReplyTo(inReplyToUserId,inReplyToName,inReplyToScreenName);
    }
    if (isDisplayProfileImage()) {
      final String profile_image_url=cursor.getString(mIndices.user_profile_image_url);
      mImageLoader.displayProfileImage(holder.my_profile_image,profile_image_url);
      mImageLoader.displayProfileImage(holder.profile_image,profile_image_url);
      holder.profile_image.setTag(position);
      holder.my_profile_image.setTag(position);
    }
 else {
      mImageLoader.cancelDisplayTask(holder.profile_image);
      mImageLoader.cancelDisplayTask(holder.my_profile_image);
      holder.profile_image.setVisibility(View.GONE);
      holder.my_profile_image.setVisibility(View.GONE);
    }
    final boolean hasPreview=mDisplayImagePreview && hasMedia;
    holder.image_preview_container.setVisibility(hasPreview ? View.VISIBLE : View.GONE);
    if (hasPreview && firstMedia != null && media != null) {
      if (mImagePreviewScaleType != null) {
        holder.image_preview.setScaleType(mImagePreviewScaleType);
      }
      if (possiblySensitive && !mDisplaySensitiveContents) {
        holder.image_preview.setImageDrawable(null);
        holder.image_preview.setBackgroundResource(R.drawable.image_preview_nsfw);
        holder.image_preview_progress.setVisibility(View.GONE);
        mImageLoader.cancelDisplayTask(holder.image_preview);
      }
 else       if (!firstMedia.equals(mImageLoadingHandler.getLoadingUri(holder.image_preview))) {
        holder.image_preview.setBackgroundResource(0);
        mImageLoader.displayPreviewImage(holder.image_preview,firstMedia,mImageLoadingHandler);
      }
      final int count=media.length;
      holder.image_preview_count.setText(res.getQuantityString(R.plurals.N_media,count,count));
      holder.image_preview.setTag(position);
    }
 else {
      mImageLoader.cancelDisplayTask(holder.image_preview);
    }
  }
 else {
    mImageLoader.cancelDisplayTask(holder.profile_image);
    mImageLoader.cancelDisplayTask(holder.my_profile_image);
    mImageLoader.cancelDisplayTask(holder.image_preview);
  }
}
