{
  if (intent == null)   return false;
  final String action=intent.getAction();
  final boolean hasAccountIds;
  if (intent.hasExtra(EXTRA_ACCOUNT_KEYS)) {
    final AccountKey[] accountKeys=Utils.newParcelableArray(intent.getParcelableArrayExtra(EXTRA_ACCOUNT_KEYS),AccountKey.CREATOR);
    mAccountsAdapter.setSelectedAccountIds(accountKeys);
    hasAccountIds=true;
  }
 else   if (intent.hasExtra(EXTRA_ACCOUNT_KEY)) {
    final AccountKey accountKey=intent.getParcelableExtra(EXTRA_ACCOUNT_KEY);
    mAccountsAdapter.setSelectedAccountIds(accountKey);
    hasAccountIds=true;
  }
 else {
    hasAccountIds=false;
  }
  mShouldSaveAccounts=!Intent.ACTION_SEND.equals(action) && !Intent.ACTION_SEND_MULTIPLE.equals(action) && !hasAccountIds;
  final Uri data=intent.getData();
  final CharSequence extraSubject=intent.getCharSequenceExtra(Intent.EXTRA_SUBJECT);
  final CharSequence extraText=intent.getCharSequenceExtra(Intent.EXTRA_TEXT);
  final Uri extraStream=intent.getParcelableExtra(Intent.EXTRA_STREAM);
  if (extraStream != null) {
    AsyncTaskUtils.executeTask(new AddMediaTask(this,extraStream,createTempImageUri(),ParcelableMedia.Type.IMAGE,false));
  }
 else   if (data != null) {
    AsyncTaskUtils.executeTask(new AddMediaTask(this,data,createTempImageUri(),ParcelableMedia.Type.IMAGE,false));
  }
 else   if (intent.hasExtra(EXTRA_SHARE_SCREENSHOT) && Utils.useShareScreenshot()) {
    final Bitmap bitmap=intent.getParcelableExtra(EXTRA_SHARE_SCREENSHOT);
    if (bitmap != null) {
      try {
        AsyncTaskUtils.executeTask(new AddBitmapTask(this,bitmap,createTempImageUri(),ParcelableMedia.Type.IMAGE));
      }
 catch (      IOException e) {
        bitmap.recycle();
      }
    }
  }
  mEditText.setText(Utils.getShareStatus(this,extraSubject,extraText));
  final int selectionEnd=mEditText.length();
  mEditText.setSelection(selectionEnd);
  return true;
}
