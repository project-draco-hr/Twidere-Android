{
  final boolean sendByEnter=mPreferences.getBoolean(KEY_QUICK_SEND);
  EditTextEnterHandler.attach(mEditText,new EnterListener(){
    @Override public void onHitEnter(){
      updateStatus();
    }
  }
,sendByEnter);
  mEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    final CharSequence s,    final int start,    final int count,    final int after){
    }
    @Override public void onTextChanged(    final CharSequence s,    final int start,    final int before,    final int count){
      setMenu();
      updateTextCount();
      if (s instanceof Spannable && count == 1 && before == 0) {
        final ImageSpan[] imageSpans=((Spannable)s).getSpans(start,start + count,ImageSpan.class);
        if (imageSpans.length == 1) {
          final Intent intent=new Intent(ComposeActivity.this,ImagePickerActivity.class);
          intent.setAction(ImagePickerActivity.INTENT_ACTION_GET_IMAGE);
          intent.setData(Uri.parse(imageSpans[0].getSource()));
          startActivityForResult(intent,REQUEST_PICK_IMAGE);
          ((Spannable)s).setSpan(new MarkForDeleteSpan(),start,start + count,Spanned.SPAN_INCLUSIVE_INCLUSIVE);
        }
      }
    }
    @Override public void afterTextChanged(    final Editable s){
      mTextChanged=s.length() == 0;
      final MarkForDeleteSpan[] deletes=s.getSpans(0,s.length(),MarkForDeleteSpan.class);
      for (      MarkForDeleteSpan delete : deletes) {
        s.delete(s.getSpanStart(delete),s.getSpanEnd(delete));
      }
    }
  }
);
  mEditText.setCustomSelectionActionModeCallback(this);
}
