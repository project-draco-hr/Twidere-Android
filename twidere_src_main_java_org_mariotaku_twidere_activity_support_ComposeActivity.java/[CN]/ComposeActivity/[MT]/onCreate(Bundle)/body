{
  super.onCreate(savedInstanceState);
  mLocationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  mPreferences=SharedPreferencesWrapper.getInstance(this,SHARED_PREFERENCES_NAME,Context.MODE_PRIVATE);
  mBottomSendButton=mPreferences.getBoolean(KEY_BOTTOM_SEND_BUTTON,false);
  mTwitterWrapper=getTwidereApplication().getTwitterWrapper();
  mResolver=getContentResolver();
  mValidator=new TwidereValidator(this);
  setContentView(getLayoutInflater().inflate(R.layout.activity_compose,null));
  setProgressBarIndeterminateVisibility(false);
  setFinishOnTouchOutside(false);
  mAccountIds=getAccountIds(this);
  if (mAccountIds.length <= 0) {
    final Intent intent=new Intent(INTENT_ACTION_TWITTER_LOGIN);
    intent.setClass(this,SignInActivity.class);
    startActivity(intent);
    finish();
    return;
  }
  mBottomMenuBar.setIsBottomBar(true);
  mBottomMenuBar.setMenuBarListener(this);
  mActionMenuBar.setMenuBarListener(this);
  mEditText.setOnEditorActionListener(mPreferences.getBoolean(KEY_QUICK_SEND,false) ? this : null);
  mEditText.addTextChangedListener(this);
  mAccountSelectorAdapter=new AccountSelectorAdapter(this);
  mAccountSelector.setAdapter(mAccountSelectorAdapter);
  mAccountSelector.setOnItemClickListener(this);
  mAccountSelector.setOnItemLongClickListener(this);
  mAccountSelector.setScrollAfterItemClickEnabled(false);
  mAccountSelector.setScrollRightSpacingEnabled(false);
  mMediaPreviewAdapter=new MediaPreviewAdapter(this);
  mMediasPreviewGrid.setAdapter(mMediaPreviewAdapter);
  final Intent intent=getIntent();
  if (savedInstanceState != null) {
    mSendAccountIds=savedInstanceState.getLongArray(EXTRA_ACCOUNT_IDS);
    mIsPossiblySensitive=savedInstanceState.getBoolean(EXTRA_IS_POSSIBLY_SENSITIVE);
    final ArrayList<ParcelableMediaUpdate> mediasList=savedInstanceState.getParcelableArrayList(EXTRA_MEDIAS);
    if (mediasList != null) {
      addMedias(mediasList);
    }
    mInReplyToStatus=savedInstanceState.getParcelable(EXTRA_STATUS);
    mInReplyToStatusId=savedInstanceState.getLong(EXTRA_STATUS_ID);
    mMentionUser=savedInstanceState.getParcelable(EXTRA_USER);
    mDraftItem=savedInstanceState.getParcelable(EXTRA_DRAFT);
    mShouldSaveAccounts=savedInstanceState.getBoolean(EXTRA_SHOULD_SAVE_ACCOUNTS);
    mOriginalText=savedInstanceState.getString(EXTRA_ORIGINAL_TEXT);
    mTempPhotoUri=savedInstanceState.getParcelable(EXTRA_TEMP_URI);
  }
 else {
    final int notificationId=intent.getIntExtra(EXTRA_NOTIFICATION_ID,-1);
    final long notificationAccount=intent.getLongExtra(EXTRA_NOTIFICATION_ACCOUNT,-1);
    if (notificationId != -1) {
      mTwitterWrapper.clearNotificationAsync(notificationId,notificationAccount);
    }
    if (!handleIntent(intent)) {
      handleDefaultIntent(intent);
    }
    if (mSendAccountIds == null || mSendAccountIds.length == 0) {
      final long[] ids_in_prefs=ArrayUtils.parseLongArray(mPreferences.getString(KEY_COMPOSE_ACCOUNTS,null),',');
      final long[] intersection=ArrayUtils.intersection(ids_in_prefs,mAccountIds);
      mSendAccountIds=intersection.length > 0 ? intersection : mAccountIds;
    }
    mOriginalText=ParseUtils.parseString(mEditText.getText());
  }
  if (!setComposeTitle(intent)) {
    setTitle(R.string.compose);
  }
  final boolean useBottomMenu=isSingleAccount() || !mBottomSendButton;
  if (useBottomMenu) {
    mBottomMenuBar.inflate(R.menu.menu_compose);
  }
 else {
    mActionMenuBar.inflate(R.menu.menu_compose);
  }
  mBottomMenuBar.setVisibility(useBottomMenu ? View.VISIBLE : View.GONE);
  mActionMenuBar.setVisibility(useBottomMenu ? View.GONE : View.VISIBLE);
  mSendView.setVisibility(mBottomSendButton ? View.GONE : View.VISIBLE);
  mBottomSendDivider.setVisibility(mBottomSendButton ? View.VISIBLE : View.GONE);
  mBottomSendView.setVisibility(mBottomSendButton ? View.VISIBLE : View.GONE);
  mSendView.setOnClickListener(this);
  mBottomSendView.setOnClickListener(this);
  mSendView.setOnLongClickListener(this);
  mBottomSendView.setOnLongClickListener(this);
  final Menu menu=mBottomMenuBar.getMenu(), actionBarMenu=mActionMenuBar.getMenu();
  final Menu showingMenu=mBottomSendButton ? actionBarMenu : menu;
  if (showingMenu != null) {
    final Intent compose_extensions_intent=new Intent(INTENT_ACTION_EXTENSION_COMPOSE);
    addIntentToMenu(this,showingMenu,compose_extensions_intent,MENU_GROUP_COMPOSE_EXTENSION);
    final Intent image_extensions_intent=new Intent(INTENT_ACTION_EXTENSION_EDIT_IMAGE);
    addIntentToMenu(this,showingMenu,image_extensions_intent,MENU_GROUP_IMAGE_EXTENSION);
  }
  final LinearLayout.LayoutParams bottomMenuContainerParams=(LinearLayout.LayoutParams)mBottomMenuContainer.getLayoutParams();
  final LinearLayout.LayoutParams accountSelectorParams=(LinearLayout.LayoutParams)mAccountSelector.getLayoutParams();
  final int maxItemsShown;
  final Resources res=getResources();
  if (isSingleAccount()) {
    accountSelectorParams.weight=0;
    accountSelectorParams.width=ViewGroup.LayoutParams.WRAP_CONTENT;
    bottomMenuContainerParams.weight=1;
    bottomMenuContainerParams.width=ViewGroup.LayoutParams.MATCH_PARENT;
    maxItemsShown=res.getInteger(R.integer.max_compose_menu_buttons_bottom_singleaccount);
    mAccountSelectorDivider.setVisibility(View.VISIBLE);
  }
 else {
    accountSelectorParams.weight=1;
    accountSelectorParams.width=ViewGroup.LayoutParams.MATCH_PARENT;
    bottomMenuContainerParams.weight=0;
    bottomMenuContainerParams.width=ViewGroup.LayoutParams.WRAP_CONTENT;
    maxItemsShown=res.getInteger(R.integer.max_compose_menu_buttons_bottom);
    mAccountSelectorDivider.setVisibility(mBottomSendButton ? View.GONE : View.VISIBLE);
  }
  mBottomMenuContainer.setLayoutParams(bottomMenuContainerParams);
  mBottomMenuBar.setMaxItemsShown(maxItemsShown);
  setMenu();
  updateAccountSelection();
  updateMediasPreview();
}
