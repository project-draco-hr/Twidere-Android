{
  final List<Object> selectedItems=mMultiSelectManager.getSelectedItems();
  if (selectedItems.isEmpty())   return false;
switch (item.getItemId()) {
case R.id.reply:
{
      final Extractor extractor=new Extractor();
      final Intent intent=new Intent(INTENT_ACTION_REPLY_MULTIPLE);
      final Bundle bundle=new Bundle();
      final String[] accountScreenNames=DataStoreUtils.getAccountScreenNames(mActivity);
      final Collection<String> allMentions=new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
      for (      final Object object : selectedItems) {
        if (object instanceof ParcelableStatus) {
          final ParcelableStatus status=(ParcelableStatus)object;
          allMentions.add(status.user_screen_name);
          allMentions.addAll(extractor.extractMentionedScreennames(status.text_plain));
        }
 else         if (object instanceof ParcelableUser) {
          final ParcelableUser user=(ParcelableUser)object;
          allMentions.add(user.screen_name);
        }
      }
      allMentions.removeAll(Arrays.asList(accountScreenNames));
      final Object firstObj=selectedItems.get(0);
      if (firstObj instanceof ParcelableStatus) {
        final ParcelableStatus first_status=(ParcelableStatus)firstObj;
        bundle.putString(EXTRA_IN_REPLY_TO_ID,first_status.id);
      }
      bundle.putParcelable(EXTRA_ACCOUNT_KEY,mMultiSelectManager.getAccountKey());
      bundle.putStringArray(EXTRA_SCREEN_NAMES,allMentions.toArray(new String[allMentions.size()]));
      intent.putExtras(bundle);
      intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      mActivity.startActivity(intent);
      mode.finish();
      break;
    }
case R.id.mute_user:
{
    final ContentResolver resolver=mActivity.getContentResolver();
    final ArrayList<ContentValues> valuesList=new ArrayList<>();
    final Set<UserKey> userIds=new HashSet<>();
    for (    final Object object : selectedItems) {
      if (object instanceof ParcelableStatus) {
        final ParcelableStatus status=(ParcelableStatus)object;
        userIds.add(status.user_key);
        valuesList.add(ContentValuesCreator.createFilteredUser(status));
      }
 else       if (object instanceof ParcelableUser) {
        final ParcelableUser user=(ParcelableUser)object;
        userIds.add(user.key);
        valuesList.add(ContentValuesCreator.createFilteredUser(user));
      }
    }
    ContentResolverUtils.bulkDelete(resolver,Filters.Users.CONTENT_URI,Filters.Users.USER_ID,userIds,null);
    ContentResolverUtils.bulkInsert(resolver,Filters.Users.CONTENT_URI,valuesList);
    Toast.makeText(mActivity,R.string.message_users_muted,Toast.LENGTH_SHORT).show();
    mode.finish();
    break;
  }
case R.id.block:
{
  final UserKey accountKey=mMultiSelectManager.getAccountKey();
  final String[] userIds=UserKey.getIds(MultiSelectManager.getSelectedUserIds(selectedItems));
  if (accountKey != null && userIds != null) {
    mTwitterWrapper.createMultiBlockAsync(accountKey,userIds);
  }
  mode.finish();
  break;
}
case R.id.report_spam:
{
final UserKey accountKey=mMultiSelectManager.getAccountKey();
final String[] userIds=UserKey.getIds(MultiSelectManager.getSelectedUserIds(selectedItems));
if (accountKey != null && userIds != null) {
  mTwitterWrapper.reportMultiSpam(accountKey,userIds);
}
mode.finish();
break;
}
}
if (item.getGroupId() == AccountActionProvider.MENU_GROUP) {
final Intent intent=item.getIntent();
if (intent == null || !intent.hasExtra(EXTRA_ACCOUNT)) return false;
final ParcelableAccount account=intent.getParcelableExtra(EXTRA_ACCOUNT);
mMultiSelectManager.setAccountKey(account.account_key);
if (mAccountActionProvider != null) {
mAccountActionProvider.setSelectedAccountIds(account.account_key);
}
mode.invalidate();
}
return true;
}
