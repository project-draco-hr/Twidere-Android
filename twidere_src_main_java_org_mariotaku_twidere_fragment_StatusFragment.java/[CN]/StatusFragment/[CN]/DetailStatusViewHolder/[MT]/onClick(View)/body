{
  final ParcelableStatus status=adapter.getStatus(getLayoutPosition());
  final StatusFragment fragment=adapter.getFragment();
  if (status == null || fragment == null)   return;
  final SharedPreferencesWrapper preferences=fragment.mPreferences;
switch (v.getId()) {
case R.id.media_preview_load:
{
      if (adapter.isSensitiveContentEnabled() || !status.is_possibly_sensitive) {
        adapter.setDetailMediaExpanded(true);
      }
 else {
        final LoadSensitiveImageConfirmDialogFragment f=new LoadSensitiveImageConfirmDialogFragment();
        f.show(fragment.getChildFragmentManager(),"load_sensitive_image_confirm");
      }
      break;
    }
case R.id.profile_container:
{
    final FragmentActivity activity=fragment.getActivity();
    IntentUtils.openUserProfile(activity,status.account_key,status.user_key,status.user_screen_name,null,preferences.getBoolean(KEY_NEW_DOCUMENT_API),UserFragment.Referral.STATUS);
    break;
  }
case R.id.retweeted_by:
{
  if (status.retweet_id != null) {
    IntentUtils.openUserProfile(adapter.getContext(),status.account_key,status.retweeted_by_user_key,status.retweeted_by_user_screen_name,null,preferences.getBoolean(KEY_NEW_DOCUMENT_API),UserFragment.Referral.STATUS);
  }
  break;
}
case R.id.location_view:
{
final ParcelableLocation location=status.location;
if (!ParcelableLocationUtils.isValidLocation(location)) return;
IntentUtils.openMap(adapter.getContext(),location.latitude,location.longitude);
break;
}
case R.id.quoted_name:
{
IntentUtils.openUserProfile(adapter.getContext(),status.account_key,status.quoted_user_key,status.quoted_user_screen_name,null,preferences.getBoolean(KEY_NEW_DOCUMENT_API),UserFragment.Referral.STATUS);
break;
}
case R.id.quote_original_link:
{
IntentUtils.openStatus(adapter.getContext(),status.account_key,status.quoted_id);
break;
}
case R.id.translate_label:
{
fragment.loadTranslation(adapter.getStatus());
break;
}
}
}
