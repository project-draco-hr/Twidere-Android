{
  if (account == null || status == null)   return;
  final StatusFragment fragment=adapter.getFragment();
  final Context context=adapter.getContext();
  final MediaLoaderWrapper loader=adapter.getMediaLoader();
  final BidiFormatter formatter=adapter.getBidiFormatter();
  final AsyncTwitterWrapper twitter=adapter.getTwitterWrapper();
  final boolean nameFirst=adapter.isNameFirst();
  linkClickHandler.setStatus(status);
  if (status.retweet_id != null) {
    final String retweetedBy=UserColorNameManager.decideDisplayName(status.retweet_user_nickname,status.retweeted_by_user_name,status.retweeted_by_user_screen_name,nameFirst);
    retweetedByView.setText(context.getString(R.string.name_retweeted,retweetedBy));
    retweetedByView.setVisibility(View.VISIBLE);
  }
 else {
    retweetedByView.setText(null);
    retweetedByView.setVisibility(View.GONE);
  }
  profileContainer.drawEnd(status.account_color);
  final int layoutPosition=getLayoutPosition();
  final boolean skipLinksInText=status.extras != null && status.extras.support_entities;
  if (status.is_quote) {
    quoteIndicator.setVisibility(View.VISIBLE);
    boolean quoteContentAvailable=status.quoted_text_plain != null && status.quoted_text_unescaped != null;
    if (quoteContentAvailable) {
      quoteOriginalLink.setVisibility(View.VISIBLE);
      quotedNameView.setVisibility(View.VISIBLE);
      quotedTextView.setVisibility(View.VISIBLE);
      quotedNameView.setName(UserColorNameManager.decideNickname(status.quoted_user_nickname,status.quoted_user_name));
      quotedNameView.setScreenName(String.format("@%s",status.quoted_user_screen_name));
      quotedNameView.updateText(formatter);
      int quotedDisplayEnd=-1;
      if (status.extras.quoted_display_text_range != null) {
        quotedDisplayEnd=status.extras.quoted_display_text_range[1];
      }
      final SpannableStringBuilder quotedText=SpannableStringBuilder.valueOf(status.quoted_text_unescaped);
      ParcelableStatusUtils.applySpans(quotedText,status.quoted_spans);
      linkify.applyAllLinks(quotedText,status.account_key,layoutPosition,status.is_possibly_sensitive,skipLinksInText);
      if (quotedDisplayEnd != -1 && quotedDisplayEnd <= quotedText.length()) {
        quotedTextView.setText(quotedText.subSequence(0,quotedDisplayEnd));
      }
 else {
        quotedTextView.setText(quotedText);
      }
      if (quotedTextView.length() == 0) {
        quotedTextView.setVisibility(View.GONE);
      }
 else {
        quotedTextView.setVisibility(View.VISIBLE);
      }
      quoteIndicator.setColor(status.quoted_user_color);
    }
 else {
      quoteOriginalLink.setVisibility(View.GONE);
      quotedNameView.setVisibility(View.GONE);
      quotedTextView.setVisibility(View.VISIBLE);
      final SpannableString string=SpannableString.valueOf(context.getString(R.string.status_not_available_text));
      string.setSpan(new ForegroundColorSpan(ThemeUtils.getColorFromAttribute(context,android.R.attr.textColorTertiary,textView.getCurrentTextColor())),0,string.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      quotedTextView.setText(string);
      quoteIndicator.setColor(0);
    }
  }
 else {
    quoteOriginalLink.setVisibility(View.GONE);
    quotedNameView.setVisibility(View.GONE);
    quotedTextView.setVisibility(View.GONE);
    quoteIndicator.setVisibility(View.GONE);
  }
  profileContainer.drawStart(status.user_color);
  final long timestamp;
  if (status.is_retweet) {
    timestamp=status.retweet_timestamp;
  }
 else {
    timestamp=status.timestamp;
  }
  nameView.setName(UserColorNameManager.decideNickname(status.user_nickname,status.user_name));
  nameView.setScreenName(String.format("@%s",status.user_screen_name));
  nameView.updateText(formatter);
  loader.displayProfileImage(profileImageView,status);
  final int typeIconRes=Utils.getUserTypeIconRes(status.user_is_verified,status.user_is_protected);
  final int typeDescriptionRes=Utils.getUserTypeDescriptionRes(status.user_is_verified,status.user_is_protected);
  if (typeIconRes != 0 && typeDescriptionRes != 0) {
    profileTypeView.setImageResource(typeIconRes);
    profileTypeView.setContentDescription(context.getString(typeDescriptionRes));
    profileTypeView.setVisibility(View.VISIBLE);
  }
 else {
    profileTypeView.setImageDrawable(null);
    profileTypeView.setContentDescription(null);
    profileTypeView.setVisibility(View.GONE);
  }
  final String timeString=Utils.formatToLongTimeString(context,timestamp);
  if (!TextUtils.isEmpty(timeString) && !TextUtils.isEmpty(status.source)) {
    timeSourceView.setText(HtmlSpanBuilder.fromHtml(context.getString(R.string.time_source,timeString,status.source)));
  }
 else   if (TextUtils.isEmpty(timeString) && !TextUtils.isEmpty(status.source)) {
    timeSourceView.setText(HtmlSpanBuilder.fromHtml(context.getString(R.string.source,status.source)));
  }
 else   if (!TextUtils.isEmpty(timeString) && TextUtils.isEmpty(status.source)) {
    timeSourceView.setText(timeString);
  }
  timeSourceView.setMovementMethod(LinkMovementMethod.getInstance());
  int displayEnd=-1;
  if (status.extras.display_text_range != null) {
    displayEnd=status.extras.display_text_range[1];
  }
  final SpannableStringBuilder text=SpannableStringBuilder.valueOf(status.text_unescaped);
  ParcelableStatusUtils.applySpans(text,status.spans);
  linkify.applyAllLinks(text,status.account_key,layoutPosition,status.is_possibly_sensitive,skipLinksInText);
  if (displayEnd != -1 && displayEnd <= text.length()) {
    textView.setText(text.subSequence(0,displayEnd));
  }
 else {
    textView.setText(text);
  }
  if (textView.length() == 0) {
    textView.setVisibility(View.GONE);
  }
 else {
    textView.setVisibility(View.VISIBLE);
  }
  final ParcelableLocation location;
  final String placeFullName;
  if (status.is_quote) {
    location=status.quoted_location;
    placeFullName=status.quoted_place_full_name;
  }
 else {
    location=status.location;
    placeFullName=status.place_full_name;
  }
  if (!TextUtils.isEmpty(placeFullName)) {
    locationView.setVisibility(View.VISIBLE);
    locationView.setText(placeFullName);
    locationView.setClickable(ParcelableLocationUtils.isValidLocation(location));
  }
 else   if (ParcelableLocationUtils.isValidLocation(location)) {
    locationView.setVisibility(View.VISIBLE);
    locationView.setText(R.string.view_map);
    locationView.setClickable(true);
  }
 else {
    locationView.setVisibility(View.GONE);
    locationView.setText(null);
  }
  final CountsUsersAdapter interactUsersAdapter=(CountsUsersAdapter)countsUsersView.getAdapter();
  if (statusActivity != null) {
    interactUsersAdapter.setUsers(statusActivity.getRetweeters());
    interactUsersAdapter.setCounts(statusActivity);
  }
 else {
    interactUsersAdapter.setUsers(null);
    interactUsersAdapter.setCounts(status);
  }
  if (interactUsersAdapter.getItemCount() > 0) {
    countsUsersView.setVisibility(View.VISIBLE);
    countsUsersHeightHolder.setVisibility(View.INVISIBLE);
  }
 else {
    countsUsersView.setVisibility(View.GONE);
    countsUsersHeightHolder.setVisibility(View.GONE);
  }
  final ParcelableMedia[] media=ParcelableMediaUtils.getPrimaryMedia(status);
  if (ArrayUtils.isEmpty(media)) {
    mediaPreviewContainer.setVisibility(View.GONE);
    mediaPreview.setVisibility(View.GONE);
    mediaPreviewLoad.setVisibility(View.GONE);
    mediaPreview.displayMedia();
  }
 else   if (adapter.isDetailMediaExpanded()) {
    mediaPreviewContainer.setVisibility(View.VISIBLE);
    mediaPreview.setVisibility(View.VISIBLE);
    mediaPreviewLoad.setVisibility(View.GONE);
    mediaPreview.displayMedia(media,loader,status.account_key,-1,adapter.getFragment(),adapter.getMediaLoadingHandler());
  }
 else {
    mediaPreviewContainer.setVisibility(View.VISIBLE);
    mediaPreview.setVisibility(View.GONE);
    mediaPreviewLoad.setVisibility(View.VISIBLE);
    mediaPreview.displayMedia();
  }
  if (TwitterCardUtils.isCardSupported(status)) {
    final Point size=TwitterCardUtils.getCardSize(status.card);
    twitterCard.setVisibility(View.VISIBLE);
    if (size != null) {
      twitterCard.setCardSize(size.x,size.y);
    }
 else {
      twitterCard.setCardSize(0,0);
    }
    final Fragment cardFragment=TwitterCardUtils.createCardFragment(status);
    final FragmentManager fm=fragment.getChildFragmentManager();
    if (cardFragment != null && !FragmentManagerAccessor.isStateSaved(fm)) {
      final FragmentTransaction ft=fm.beginTransaction();
      ft.replace(R.id.twitter_card,cardFragment);
      ft.commit();
    }
 else {
      twitterCard.setVisibility(View.GONE);
    }
  }
 else {
    twitterCard.setVisibility(View.GONE);
  }
  MenuUtils.setupForStatus(context,fragment.mPreferences,menuBar.getMenu(),status,adapter.getStatusAccount(),twitter);
  final String lang=status.lang;
  if (!Utils.isOfficialCredentials(context,account) || !CheckUtils.isValidLocale(lang)) {
    translateLabelView.setText(R.string.unknown_language);
    translateContainer.setVisibility(View.GONE);
  }
 else {
    final Locale locale=new Locale(lang);
    translateContainer.setVisibility(View.VISIBLE);
    if (translation != null) {
      translateLabelView.setText(context.getString(R.string.translation));
      translateResultView.setVisibility(View.VISIBLE);
      translateResultView.setText(translation.getText());
    }
 else {
      translateLabelView.setText(context.getString(R.string.translate_from_language,locale.getDisplayLanguage()));
      translateResultView.setVisibility(View.GONE);
    }
  }
  textView.setTextIsSelectable(true);
  quotedTextView.setTextIsSelectable(true);
  translateResultView.setTextIsSelectable(true);
  textView.setMovementMethod(LinkMovementMethod.getInstance());
  quotedTextView.setMovementMethod(LinkMovementMethod.getInstance());
}
