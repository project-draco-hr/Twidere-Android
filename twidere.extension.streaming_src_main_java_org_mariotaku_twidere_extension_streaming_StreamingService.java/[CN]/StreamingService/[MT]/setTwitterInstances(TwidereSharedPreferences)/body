{
  if (prefs == null)   return false;
  final List<ParcelableCredentials> accountsList=ParcelableAccount.getCredentialsList(this,true);
  if (BuildConfig.DEBUG) {
    Log.d(LOGTAG,"Setting up twitter stream instances");
  }
  mAccountIds=new long[accountsList.size()];
  clearTwitterInstances();
  for (int i=0, j=accountsList.size(); i < j; i++) {
    final ParcelableCredentials account=accountsList.get(i);
    final Endpoint endpoint=TwitterAPIUtils.getEndpoint(account,TwitterUserStream.class);
    final Authorization authorization=TwitterAPIUtils.getAuthorization(account);
    final TwitterUserStream twitter=Utils.getInstance(this,endpoint,authorization,TwitterUserStream.class);
    final long account_id=account.account_id;
    mAccountIds[i]=account_id;
    final TwidereUserStreamCallback callback=new TwidereUserStreamCallback(this,account);
    mTwitterInstances.add(new WeakReference<>(callback));
    new Thread(){
      @Override public void run(){
        twitter.getUserStream(callback);
        Log.d(LOGTAG,"Stream disconnected");
      }
    }
.start();
  }
  return true;
}
