{
  final AsyncTwitterWrapper twitter=getTwitterWrapper();
  final ParcelableUser user=mUser;
  final Relationship relationship=mRelationship;
  if (user == null || twitter == null)   return false;
switch (item.getItemId()) {
case MENU_BLOCK:
{
      if (mRelationship != null) {
        if (mRelationship.isSourceBlockingTarget()) {
          twitter.destroyBlockAsync(user.account_id,user.id);
        }
 else {
          CreateUserBlockDialogFragment.show(getFragmentManager(),user);
        }
      }
      break;
    }
case MENU_REPORT_SPAM:
{
    ReportSpamDialogFragment.show(getFragmentManager(),user);
    break;
  }
case MENU_ADD_TO_FILTER:
{
  final ContentResolver resolver=getContentResolver();
  resolver.delete(Filters.Users.CONTENT_URI,Where.equals(Filters.Users.USER_ID,user.id).getSQL(),null);
  resolver.insert(Filters.Users.CONTENT_URI,ContentValuesCreator.makeFilteredUserContentValues(user));
  showInfoMessage(getActivity(),R.string.message_user_muted,false);
  break;
}
case MENU_MENTION:
{
final Intent intent=new Intent(INTENT_ACTION_MENTION);
final Bundle bundle=new Bundle();
bundle.putParcelable(EXTRA_USER,user);
intent.putExtras(bundle);
startActivity(intent);
break;
}
case MENU_SEND_DIRECT_MESSAGE:
{
final Uri.Builder builder=new Uri.Builder();
builder.scheme(SCHEME_TWIDERE);
builder.authority(AUTHORITY_DIRECT_MESSAGES_CONVERSATION);
builder.appendQueryParameter(QUERY_PARAM_ACCOUNT_ID,String.valueOf(user.account_id));
builder.appendQueryParameter(QUERY_PARAM_RECIPIENT_ID,String.valueOf(user.id));
startActivity(new Intent(Intent.ACTION_VIEW,builder.build()));
break;
}
case MENU_SET_COLOR:
{
final Intent intent=new Intent(getActivity(),ColorPickerDialogActivity.class);
intent.putExtra(EXTRA_COLOR,getUserColor(getActivity(),user.id,true));
intent.putExtra(EXTRA_ALPHA_SLIDER,false);
intent.putExtra(EXTRA_CLEAR_BUTTON,true);
startActivityForResult(intent,REQUEST_SET_COLOR);
break;
}
case MENU_CLEAR_NICKNAME:
{
clearUserNickname(getActivity(),user.id);
break;
}
case MENU_SET_NICKNAME:
{
final String nick=getUserNickname(getActivity(),user.id,true);
SetUserNicknameDialogFragment.show(getFragmentManager(),user.id,nick);
break;
}
case MENU_ADD_TO_LIST:
{
final Intent intent=new Intent(INTENT_ACTION_SELECT_USER_LIST);
intent.setClass(getActivity(),UserListSelectorActivity.class);
intent.putExtra(EXTRA_ACCOUNT_ID,user.account_id);
intent.putExtra(EXTRA_SCREEN_NAME,getAccountScreenName(getActivity(),user.account_id));
startActivityForResult(intent,REQUEST_ADD_TO_LIST);
break;
}
case MENU_OPEN_WITH_ACCOUNT:
{
final Intent intent=new Intent(INTENT_ACTION_SELECT_ACCOUNT);
intent.setClass(getActivity(),AccountSelectorActivity.class);
intent.putExtra(EXTRA_SINGLE_SELECTION,true);
startActivityForResult(intent,REQUEST_SELECT_ACCOUNT);
break;
}
case MENU_EDIT:
{
final Bundle extras=new Bundle();
extras.putLong(EXTRA_ACCOUNT_ID,user.account_id);
final Intent intent=new Intent(INTENT_ACTION_EDIT_USER_PROFILE);
intent.setClass(getActivity(),UserProfileEditorActivity.class);
intent.putExtras(extras);
startActivity(intent);
return true;
}
case MENU_FOLLOW:
{
if (relationship == null) return false;
final boolean isFollowing=relationship.isSourceFollowingTarget();
final boolean isCreatingFriendship=twitter.isCreatingFriendship(user.account_id,user.id);
final boolean isDestroyingFriendship=twitter.isDestroyingFriendship(user.account_id,user.id);
if (!isCreatingFriendship && !isDestroyingFriendship) {
if (isFollowing) {
DestroyFriendshipDialogFragment.show(getFragmentManager(),user);
}
 else {
twitter.createFriendshipAsync(user.account_id,user.id);
}
}
return true;
}
default :
{
if (item.getIntent() != null) {
try {
startActivity(item.getIntent());
}
 catch (final ActivityNotFoundException e) {
Log.w(LOGTAG,e);
return false;
}
}
break;
}
}
return true;
}
