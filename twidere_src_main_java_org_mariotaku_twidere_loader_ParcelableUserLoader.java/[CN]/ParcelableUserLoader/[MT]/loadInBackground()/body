{
  final Context context=getContext();
  final ContentResolver resolver=context.getContentResolver();
  final UserKey accountKey=mAccountKey;
  ParcelableCredentials credentials=null;
  for (  ParcelableCredentials cred : ParcelableCredentialsUtils.getCredentialses(context)) {
    if (cred.account_key.equals(accountKey)) {
      credentials=cred;
      break;
    }
 else     if (cred.account_user != null && cred.account_user.account_key.equals(accountKey)) {
      credentials=cred;
      break;
    }
  }
  if (credentials == null)   return SingleResponse.getInstance();
  if (!mOmitIntentExtra && mExtras != null) {
    final ParcelableUser user=mExtras.getParcelable(EXTRA_USER);
    if (user != null) {
      final ContentValues values=ParcelableUserValuesCreator.create(user);
      resolver.insert(CachedUsers.CONTENT_URI,values);
      ParcelableUserUtils.updateExtraInformation(user,credentials,mUserColorNameManager);
      return SingleResponse.getInstance(user);
    }
  }
  final MicroBlog twitter=MicroBlogAPIFactory.getTwitterInstance(context,credentials,true,true);
  if (twitter == null)   return SingleResponse.getInstance();
  if (mLoadFromCache) {
    final Expression where;
    final String[] whereArgs;
    if (mUserKey != null) {
      where=Expression.equalsArgs(CachedUsers.USER_KEY);
      whereArgs=new String[]{mUserKey.toString()};
    }
 else     if (mScreenName != null) {
      final String host=mAccountKey.getHost();
      if (host != null) {
        where=Expression.and(Expression.likeRaw(new Columns.Column(CachedUsers.USER_KEY),"'%@'||?"),Expression.equalsArgs(CachedUsers.SCREEN_NAME));
        whereArgs=new String[]{host,mScreenName};
      }
 else {
        where=Expression.equalsArgs(CachedUsers.SCREEN_NAME);
        whereArgs=new String[]{mScreenName};
      }
    }
 else {
      return SingleResponse.getInstance();
    }
    final Cursor cur=resolver.query(CachedUsers.CONTENT_URI,CachedUsers.COLUMNS,where.getSQL(),whereArgs,null);
    if (cur != null) {
      try {
        cur.moveToFirst();
        final ParcelableUserCursorIndices indices=new ParcelableUserCursorIndices(cur);
        while (!cur.isAfterLast()) {
          final ParcelableUser user=indices.newObject(cur);
          if (TextUtils.equals(UserKeyUtils.getUserHost(user),user.key.getHost())) {
            user.account_key=accountKey;
            user.account_color=credentials.color;
            return SingleResponse.getInstance(user);
          }
          cur.moveToNext();
        }
      }
  finally {
        cur.close();
      }
    }
  }
  try {
    final User twitterUser;
    if (mExtras != null && UserFragment.Referral.SELF_PROFILE.equals(mExtras.getString(EXTRA_REFERRAL))) {
      twitterUser=twitter.verifyCredentials();
    }
 else {
      String profileUrl=null;
      if (mExtras != null) {
        profileUrl=mExtras.getString(EXTRA_PROFILE_URL);
      }
      if (MicroBlogAPIFactory.isStatusNetCredentials(credentials) && mUserKey != null && profileUrl != null && !TextUtils.equals(credentials.account_key.getHost(),mUserKey.getHost())) {
        twitterUser=twitter.showExternalProfile(profileUrl);
      }
 else {
        final String id=mUserKey != null ? mUserKey.getId() : null;
        twitterUser=TwitterWrapper.tryShowUser(twitter,id,mScreenName,credentials.account_type);
      }
    }
    final ContentValues cachedUserValues=createCachedUser(twitterUser);
    resolver.insert(CachedUsers.CONTENT_URI,cachedUserValues);
    final ParcelableUser user=ParcelableUserUtils.fromUser(twitterUser,accountKey);
    ParcelableUserUtils.updateExtraInformation(user,credentials,mUserColorNameManager);
    final SingleResponse<ParcelableUser> response=SingleResponse.getInstance(user);
    response.getExtras().putParcelable(EXTRA_ACCOUNT,credentials);
    return response;
  }
 catch (  final MicroBlogException e) {
    Log.w(LOGTAG,e);
    return SingleResponse.getInstance(e);
  }
}
