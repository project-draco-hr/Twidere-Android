{
  final Context context=getContext();
  final ContentResolver resolver=context.getContentResolver();
  final List<SuggestionItem> result=new ArrayList<>();
  if (!TextUtils.isEmpty(mQuery)) {
    final String queryEscaped=mQuery.replace("_","^_");
    final SharedPreferences nicknamePrefs=context.getSharedPreferences(USER_NICKNAME_PREFERENCES_NAME,Context.MODE_PRIVATE);
    final long[] nicknameIds=Utils.getMatchedNicknameIds(ParseUtils.parseString(mQuery),nicknamePrefs);
    final Expression selection=Expression.or(Expression.likeRaw(new Column(CachedUsers.SCREEN_NAME),"?||'%'","^"),Expression.likeRaw(new Column(CachedUsers.NAME),"?||'%'","^"),Expression.in(new Column(CachedUsers.USER_ID),new RawItemArray(nicknameIds)));
    final String[] selectionArgs=new String[]{queryEscaped,queryEscaped};
    final OrderBy orderBy=new OrderBy(CachedUsers.LAST_SEEN + " DESC",CachedUsers.SCREEN_NAME,CachedUsers.NAME);
    final Cursor c=context.getContentResolver().query(CachedUsers.CONTENT_URI,CachedUsers.BASIC_COLUMNS,selection != null ? selection.getSQL() : null,selectionArgs,orderBy.getSQL());
    final CachedIndices i=new CachedIndices(c);
    c.moveToFirst();
    while (!c.isAfterLast()) {
      result.add(new UserSuggestionItem(c,i));
      c.moveToNext();
    }
    c.close();
    return result;
  }
  final String[] historyProjection={SearchHistory.QUERY};
  final Cursor historyCursor=resolver.query(SearchHistory.CONTENT_URI,historyProjection,null,null,SearchHistory.DEFAULT_SORT_ORDER);
  for (int i=0, j=Math.min(3,historyCursor.getCount()); i < j; i++) {
    historyCursor.moveToPosition(i);
    result.add(new SearchHistoryItem(historyCursor.getString(0)));
  }
  final String[] savedSearchesProjection={SavedSearches.QUERY};
  final Expression savedSearchesWhere=Expression.equals(SavedSearches.ACCOUNT_ID,mAccountId);
  final Cursor savedSearchesCursor=resolver.query(SavedSearches.CONTENT_URI,savedSearchesProjection,savedSearchesWhere.getSQL(),null,SavedSearches.DEFAULT_SORT_ORDER);
  savedSearchesCursor.moveToFirst();
  while (!savedSearchesCursor.isAfterLast()) {
    result.add(new SavedSearchItem(savedSearchesCursor.getString(0)));
    savedSearchesCursor.moveToNext();
  }
  savedSearchesCursor.close();
  return result;
}
