{
  final boolean emptyQuery=TextUtils.isEmpty(mQuery);
  final Context context=getContext();
  final ContentResolver resolver=context.getContentResolver();
  final List<SuggestionItem> result=new ArrayList<>();
  final String[] historyProjection={SearchHistory._ID,SearchHistory.QUERY};
  final Cursor historyCursor=resolver.query(SearchHistory.CONTENT_URI,historyProjection,null,null,SearchHistory.DEFAULT_SORT_ORDER);
  for (int i=0, j=Math.min(getHistorySize(mQuery),historyCursor.getCount()); i < j; i++) {
    historyCursor.moveToPosition(i);
    result.add(new SearchHistoryItem(historyCursor.getLong(0),historyCursor.getString(1)));
  }
  historyCursor.close();
  if (!emptyQuery) {
    final String queryEscaped=mQuery.replace("_","^_");
    final UserColorNameManager nicknamePrefs=UserColorNameManager.getInstance(context);
    final long[] nicknameIds=Utils.getMatchedNicknameIds(mQuery,nicknamePrefs);
    final Expression selection=Expression.or(Expression.likeRaw(new Column(CachedUsers.SCREEN_NAME),"?||'%'","^"),Expression.likeRaw(new Column(CachedUsers.NAME),"?||'%'","^"),Expression.in(new Column(CachedUsers.USER_ID),new RawItemArray(nicknameIds)));
    final String[] selectionArgs=new String[]{queryEscaped,queryEscaped};
    final String[] order={CachedUsers.LAST_SEEN,"score",CachedUsers.SCREEN_NAME,CachedUsers.NAME};
    final boolean[] ascending={false,false,true,true};
    final OrderBy orderBy=new OrderBy(order,ascending);
    final Uri uri=Uri.withAppendedPath(CachedUsers.CONTENT_URI_WITH_SCORE,String.valueOf(mAccountId));
    final Cursor usersCursor=context.getContentResolver().query(uri,CachedUsers.COLUMNS,selection != null ? selection.getSQL() : null,selectionArgs,orderBy.getSQL());
    final CachedIndices usersIndices=new CachedIndices(usersCursor);
    final int screenNamePos=result.size();
    boolean hasName=false;
    for (int i=0, j=Math.min(5,usersCursor.getCount()); i < j; i++) {
      usersCursor.moveToPosition(i);
      final UserSuggestionItem userSuggestionItem=new UserSuggestionItem(usersCursor,usersIndices,mAccountId);
      final ParcelableUser user=userSuggestionItem.getUser();
      result.add(userSuggestionItem);
      if (user.screen_name.equalsIgnoreCase(mQuery)) {
        hasName=true;
      }
    }
    if (!hasName && mQuery.matches("(?i)[a-z0-9_]{1,20}")) {
      result.add(screenNamePos,new UserScreenNameItem(mQuery,mAccountId));
    }
    usersCursor.close();
  }
 else {
    final String[] savedSearchesProjection={SavedSearches.QUERY};
    final Expression savedSearchesWhere=Expression.equals(SavedSearches.ACCOUNT_ID,mAccountId);
    final Cursor savedSearchesCursor=resolver.query(SavedSearches.CONTENT_URI,savedSearchesProjection,savedSearchesWhere.getSQL(),null,SavedSearches.DEFAULT_SORT_ORDER);
    savedSearchesCursor.moveToFirst();
    while (!savedSearchesCursor.isAfterLast()) {
      result.add(new SavedSearchItem(savedSearchesCursor.getString(0)));
      savedSearchesCursor.moveToNext();
    }
    savedSearchesCursor.close();
  }
  return result;
}
