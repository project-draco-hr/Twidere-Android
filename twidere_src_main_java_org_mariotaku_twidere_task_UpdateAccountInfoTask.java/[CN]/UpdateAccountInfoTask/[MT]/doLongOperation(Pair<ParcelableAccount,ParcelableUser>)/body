{
  final ContentResolver resolver=context.getContentResolver();
  final ParcelableAccount account=params.getFirst();
  final ParcelableUser user=params.getSecond();
  if (account == null || user == null)   return null;
  if (user.is_cache) {
    return null;
  }
  if (!user.key.maybeEquals(user.account_key)) {
    return null;
  }
  final String accountWhere=Expression.equalsArgs(Accounts._ID).getSQL();
  final String[] accountWhereArgs={String.valueOf(account.id)};
  final ContentValues accountValues=new ContentValues();
  accountValues.put(Accounts.NAME,user.name);
  accountValues.put(Accounts.SCREEN_NAME,user.screen_name);
  accountValues.put(Accounts.PROFILE_IMAGE_URL,user.profile_image_url);
  accountValues.put(Accounts.PROFILE_BANNER_URL,user.profile_banner_url);
  accountValues.put(Accounts.ACCOUNT_USER,JsonSerializer.serialize(user,ParcelableUser.class));
  accountValues.put(Accounts.ACCOUNT_KEY,String.valueOf(user.key));
  resolver.update(Accounts.CONTENT_URI,accountValues,accountWhere,accountWhereArgs);
  final ContentValues accountKeyValues=new ContentValues();
  accountKeyValues.put(AccountSupportColumns.ACCOUNT_KEY,String.valueOf(user.key));
  final String accountKeyWhere=Expression.equalsArgs(AccountSupportColumns.ACCOUNT_KEY).getSQL();
  final String[] accountKeyWhereArgs={account.account_key.toString()};
  resolver.update(Statuses.CONTENT_URI,accountKeyValues,accountKeyWhere,accountKeyWhereArgs);
  resolver.update(Activities.AboutMe.CONTENT_URI,accountKeyValues,accountKeyWhere,accountKeyWhereArgs);
  resolver.update(DirectMessages.Inbox.CONTENT_URI,accountKeyValues,accountKeyWhere,accountKeyWhereArgs);
  resolver.update(DirectMessages.Outbox.CONTENT_URI,accountKeyValues,accountKeyWhere,accountKeyWhereArgs);
  resolver.update(CachedRelationships.CONTENT_URI,accountKeyValues,accountKeyWhere,accountKeyWhereArgs);
  updateTabs(context,resolver,user.key);
  return null;
}
