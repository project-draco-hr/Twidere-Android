{
  if (!response.isSuccessful()) {
    final TwitterException cause=new TwitterException();
    cause.setResponse(response);
    onException(cause);
    return;
  }
  final ObjectMapper mapper=new ObjectMapper(LoganSquare.JSON_FACTORY);
  final CRLFLineReader reader=new CRLFLineReader(new InputStreamReader(response.getBody().stream(),"UTF-8"));
  for (String line; (line=reader.readLine()) != null && !disconnected; ) {
    if (line.isEmpty())     continue;
    JsonNode rootNode=mapper.readTree(line);
switch (JSONObjectType.determine(rootNode)) {
case SENDER:
{
        break;
      }
case STATUS:
{
      onStatus(LoganSquare.mapperFor(Status.class).parse(rootNode.traverse()));
      break;
    }
case DIRECT_MESSAGE:
{
    onDirectMessage(LoganSquare.mapperFor(DirectMessage.class).parse(rootNode.traverse()));
    break;
  }
case DELETE:
{
  break;
}
case LIMIT:
break;
case STALL_WARNING:
break;
case SCRUB_GEO:
break;
case FRIENDS:
break;
case FAVORITE:
{
onFavorite(parse(User.class,rootNode.get("source")),parse(User.class,rootNode.get("target")),parse(Status.class,rootNode.get("target_object")));
break;
}
case UNFAVORITE:
break;
case FOLLOW:
break;
case UNFOLLOW:
break;
case USER_LIST_MEMBER_ADDED:
break;
case USER_LIST_MEMBER_DELETED:
break;
case USER_LIST_SUBSCRIBED:
break;
case USER_LIST_UNSUBSCRIBED:
break;
case USER_LIST_CREATED:
break;
case USER_LIST_UPDATED:
break;
case USER_LIST_DESTROYED:
break;
case USER_UPDATE:
break;
case USER_DELETE:
break;
case USER_SUSPEND:
break;
case BLOCK:
break;
case UNBLOCK:
break;
case DISCONNECTION:
break;
case UNKNOWN:
break;
}
}
reader.close();
response.close();
}
