{
  if (mAccountKey == null || mUser == null) {
    return SingleResponse.getInstance(new MicroBlogException("Null parameters"));
  }
  final UserKey userKey=mUser.key;
  final boolean isFiltering=DataStoreUtils.isFilteringUser(context,userKey);
  if (mAccountKey.equals(mUser.key)) {
    return SingleResponse.getInstance(new UserRelationship(mAccountKey,userKey,null,isFiltering));
  }
  final ParcelableCredentials credentials=ParcelableCredentialsUtils.getCredentials(context,mAccountKey);
  if (credentials == null) {
    return SingleResponse.getInstance(new MicroBlogException("No Account"));
  }
  if (MicroBlogAPIFactory.isStatusNetCredentials(credentials)) {
    if (!UserKeyUtils.isSameHost(mAccountKey,mUser.key)) {
      return SingleResponse.getInstance(new UserRelationship(mUser,isFiltering));
    }
  }
  final MicroBlog twitter=MicroBlogAPIFactory.getTwitterInstance(context,mAccountKey,false);
  if (twitter == null) {
    return SingleResponse.getInstance(new MicroBlogException("No Account"));
  }
  try {
    final Relationship relationship=twitter.showFriendship(mUser.key.getId());
    if (relationship.isSourceBlockingTarget() || relationship.isSourceBlockedByTarget()) {
      Utils.setLastSeen(context,userKey,-1);
    }
 else {
      Utils.setLastSeen(context,userKey,System.currentTimeMillis());
    }
    Utils.updateRelationship(context,mAccountKey,userKey,relationship);
    return SingleResponse.getInstance(new UserRelationship(mAccountKey,userKey,relationship,isFiltering));
  }
 catch (  final MicroBlogException e) {
    return SingleResponse.getInstance(e);
  }
}
