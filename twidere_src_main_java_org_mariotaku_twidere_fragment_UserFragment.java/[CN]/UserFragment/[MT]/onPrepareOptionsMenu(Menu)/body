{
  final AsyncTwitterWrapper twitter=mTwitterWrapper;
  final ParcelableUser user=getUser();
  if (twitter == null || user == null)   return;
  final boolean isMyself=user.account_key.maybeEquals(user.key);
  final MenuItem mentionItem=menu.findItem(R.id.mention);
  if (mentionItem != null) {
    final String displayName=UserColorNameManager.decideDisplayName(user.nickname,user.name,user.screen_name,mNameFirst);
    mentionItem.setTitle(getString(R.string.mention_user_name,displayName));
  }
  MenuUtils.setMenuItemAvailability(menu,R.id.mention,!isMyself);
  MenuUtils.setMenuItemAvailability(menu,R.id.incoming_friendships,isMyself);
  MenuUtils.setMenuItemAvailability(menu,R.id.saved_searches,isMyself);
  MenuUtils.setMenuItemAvailability(menu,R.id.scheduled_statuses,isMyself && MicroBlogAPIFactory.getOfficialKeyType(getActivity(),user.account_key) == ConsumerKeyType.TWEETDECK);
  MenuUtils.setMenuItemAvailability(menu,R.id.muted_users,isMyself);
  MenuUtils.setMenuItemAvailability(menu,R.id.blocked_users,isMyself);
  MenuUtils.setMenuItemAvailability(menu,R.id.block,!isMyself);
  MenuUtils.setMenuItemAvailability(menu,R.id.mute_user,!isMyself);
  MenuUtils.setMenuItemAvailability(menu,R.id.report_spam,!isMyself);
  MenuUtils.setMenuItemAvailability(menu,R.id.enable_retweets,!isMyself);
  if (mAccount != null) {
    MenuUtils.setMenuItemAvailability(menu,R.id.add_to_list,TextUtils.equals(ParcelableAccount.Type.TWITTER,ParcelableAccountUtils.getAccountType(mAccount)));
  }
 else {
    MenuUtils.setMenuItemAvailability(menu,R.id.add_to_list,false);
  }
  final UserRelationship userRelationship=mRelationship;
  if (userRelationship != null) {
    final MenuItem filterItem=menu.findItem(R.id.add_to_filter);
    if (filterItem != null) {
      filterItem.setChecked(userRelationship.filtering);
    }
    if (isMyself) {
      MenuUtils.setMenuItemAvailability(menu,R.id.send_direct_message,false);
    }
 else {
      MenuUtils.setMenuItemAvailability(menu,R.id.send_direct_message,userRelationship.can_dm);
      MenuUtils.setMenuItemAvailability(menu,R.id.block,true);
      final MenuItem blockItem=menu.findItem(R.id.block);
      if (blockItem != null) {
        ActionIconDrawable.setMenuHighlight(blockItem,new TwidereMenuInfo(userRelationship.blocking));
        blockItem.setTitle(userRelationship.blocking ? R.string.unblock : R.string.block);
      }
      final MenuItem muteItem=menu.findItem(R.id.mute_user);
      if (muteItem != null) {
        muteItem.setChecked(userRelationship.muting);
      }
      final MenuItem wantRetweetsItem=menu.findItem(R.id.enable_retweets);
      if (wantRetweetsItem != null) {
        wantRetweetsItem.setChecked(userRelationship.retweet_enabled);
      }
    }
  }
 else {
    MenuUtils.setMenuItemAvailability(menu,R.id.send_direct_message,false);
  }
  final Intent intent=new Intent(INTENT_ACTION_EXTENSION_OPEN_USER);
  final Bundle extras=new Bundle();
  extras.putParcelable(EXTRA_USER,user);
  intent.putExtras(extras);
  menu.removeGroup(MENU_GROUP_USER_EXTENSION);
  MenuUtils.addIntentToMenu(getActivity(),menu,intent,MENU_GROUP_USER_EXTENSION);
  final HeaderDrawerLayout drawer=mHeaderDrawerLayout;
  if (drawer != null) {
    final int offset=drawer.getPaddingTop() - drawer.getHeaderTop();
    mPreviousActionBarItemIsDark=0;
    mPreviousTabItemIsDark=0;
    updateScrollOffset(offset);
  }
}
