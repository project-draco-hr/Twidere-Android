{
  final AsyncTwitterWrapper twitter=mTwitterWrapper;
  final ParcelableUser user=getUser();
  final UserRelationship userRelationship=mRelationship;
  if (user == null || twitter == null)   return false;
switch (item.getItemId()) {
case R.id.block:
{
      if (userRelationship == null)       return true;
      if (userRelationship.relationship.isSourceBlockingTarget()) {
        twitter.destroyBlockAsync(user.account_id,user.id);
      }
 else {
        CreateUserBlockDialogFragment.show(getFragmentManager(),user);
      }
      break;
    }
case R.id.report_spam:
{
    ReportSpamDialogFragment.show(getFragmentManager(),user);
    break;
  }
case R.id.add_to_filter:
{
  if (userRelationship == null)   return true;
  final ContentResolver cr=getContentResolver();
  if (userRelationship.isFiltering) {
    final Expression where=Expression.equals(Filters.Users.USER_ID,user.id);
    cr.delete(Filters.Users.CONTENT_URI,where.getSQL(),null);
    Utils.showInfoMessage(getActivity(),R.string.message_user_unmuted,false);
  }
 else {
    cr.insert(Filters.Users.CONTENT_URI,ContentValuesCreator.createFilteredUser(user));
    Utils.showInfoMessage(getActivity(),R.string.message_user_muted,false);
  }
  break;
}
case R.id.mute_user:
{
if (userRelationship == null) return true;
if (userRelationship.relationship.isSourceMutingTarget()) {
  twitter.destroyMuteAsync(user.account_id,user.id);
}
 else {
  CreateUserMuteDialogFragment.show(getFragmentManager(),user);
}
break;
}
case R.id.mention:
{
final Intent intent=new Intent(INTENT_ACTION_MENTION);
final Bundle bundle=new Bundle();
bundle.putParcelable(EXTRA_USER,user);
intent.putExtras(bundle);
startActivity(intent);
break;
}
case R.id.send_direct_message:
{
final Uri.Builder builder=new Uri.Builder();
builder.scheme(SCHEME_TWIDERE);
builder.authority(AUTHORITY_DIRECT_MESSAGES_CONVERSATION);
builder.appendQueryParameter(QUERY_PARAM_ACCOUNT_ID,String.valueOf(user.account_id));
builder.appendQueryParameter(QUERY_PARAM_USER_ID,String.valueOf(user.id));
final Intent intent=new Intent(Intent.ACTION_VIEW,builder.build());
intent.putExtra(EXTRA_ACCOUNT,ParcelableCredentials.getCredentials(getActivity(),user.account_id));
intent.putExtra(EXTRA_USER,user);
startActivity(intent);
break;
}
case R.id.set_color:
{
final Intent intent=new Intent(getActivity(),ColorPickerDialogActivity.class);
intent.putExtra(EXTRA_COLOR,mUserColorNameManager.getUserColor(user.id,true));
intent.putExtra(EXTRA_ALPHA_SLIDER,false);
intent.putExtra(EXTRA_CLEAR_BUTTON,true);
startActivityForResult(intent,REQUEST_SET_COLOR);
break;
}
case R.id.clear_nickname:
{
mUserColorNameManager.clearUserNickname(user.id);
break;
}
case R.id.set_nickname:
{
final String nick=mUserColorNameManager.getUserNickname(user.id,true);
SetUserNicknameDialogFragment.show(getFragmentManager(),user.id,nick);
break;
}
case R.id.add_to_list:
{
final Intent intent=new Intent(INTENT_ACTION_SELECT_USER_LIST);
intent.setClass(getActivity(),UserListSelectorActivity.class);
intent.putExtra(EXTRA_ACCOUNT_ID,user.account_id);
intent.putExtra(EXTRA_SCREEN_NAME,DataStoreUtils.getAccountScreenName(getActivity(),user.account_id));
startActivityForResult(intent,REQUEST_ADD_TO_LIST);
break;
}
case R.id.open_with_account:
{
final Intent intent=new Intent(INTENT_ACTION_SELECT_ACCOUNT);
intent.setClass(getActivity(),AccountSelectorActivity.class);
intent.putExtra(EXTRA_SINGLE_SELECTION,true);
startActivityForResult(intent,REQUEST_SELECT_ACCOUNT);
break;
}
case R.id.follow:
{
if (userRelationship == null) return true;
final boolean isFollowing=userRelationship.relationship.isSourceFollowingTarget();
final boolean isCreatingFriendship=twitter.isCreatingFriendship(user.account_id,user.id);
final boolean isDestroyingFriendship=twitter.isDestroyingFriendship(user.account_id,user.id);
if (!isCreatingFriendship && !isDestroyingFriendship) {
if (isFollowing) {
DestroyFriendshipDialogFragment.show(getFragmentManager(),user);
}
 else {
twitter.createFriendshipAsync(user.account_id,user.id);
}
}
return true;
}
case R.id.enable_retweets:
{
final boolean newState=!item.isChecked();
final FriendshipUpdate update=new FriendshipUpdate();
update.retweets(newState);
twitter.updateFriendship(user.account_id,user.id,update);
item.setChecked(newState);
return true;
}
case R.id.muted_users:
{
Utils.openMutesUsers(getActivity(),user.account_id);
return true;
}
case R.id.blocked_users:
{
Utils.openUserBlocks(getActivity(),user.account_id);
return true;
}
case R.id.incoming_friendships:
{
Utils.openIncomingFriendships(getActivity(),user.account_id);
return true;
}
case R.id.user_mentions:
{
IntentUtils.openUserMentions(getActivity(),user.account_id,user.screen_name);
return true;
}
case R.id.saved_searches:
{
Utils.openSavedSearches(getActivity(),user.account_id);
return true;
}
case R.id.scheduled_statuses:
{
Utils.openScheduledStatuses(getActivity(),user.account_id);
return true;
}
default :
{
if (item.getIntent() != null) {
try {
startActivity(item.getIntent());
}
 catch (final ActivityNotFoundException e) {
Log.w(LOGTAG,e);
return false;
}
}
break;
}
}
return true;
}
