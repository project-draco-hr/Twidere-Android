{
  final AsyncTwitterWrapper twitter=mTwitterWrapper;
  final ParcelableUser user=getUser();
  final Relationship relationship=mRelationship;
  if (twitter == null || user == null)   return;
  final boolean isMyself=user.account_id == user.id;
  final MenuItem mentionItem=menu.findItem(R.id.mention);
  if (mentionItem != null) {
    final String displayName=mUserColorNameManager.getDisplayName(user,mNameFirst,true);
    mentionItem.setTitle(getString(R.string.mention_user_name,displayName));
  }
  MenuUtils.setMenuItemAvailability(menu,R.id.mention,!isMyself);
  MenuUtils.setMenuItemAvailability(menu,R.id.incoming_friendships,isMyself);
  MenuUtils.setMenuItemAvailability(menu,R.id.saved_searches,isMyself);
  MenuUtils.setMenuItemAvailability(menu,R.id.scheduled_statuses,isMyself && TwitterAPIFactory.getOfficialKeyType(getActivity(),user.account_id) == ConsumerKeyType.TWEETDECK);
  if (!isMyself && relationship != null) {
    MenuUtils.setMenuItemAvailability(menu,R.id.send_direct_message,relationship.canSourceDMTarget());
    MenuUtils.setMenuItemAvailability(menu,R.id.block,true);
    MenuUtils.setMenuItemAvailability(menu,R.id.mute_user,true);
    final MenuItem blockItem=menu.findItem(R.id.block);
    if (blockItem != null) {
      final boolean blocking=relationship.isSourceBlockingTarget();
      ActionIconDrawable.setMenuHighlight(blockItem,new TwidereMenuInfo(blocking));
      blockItem.setTitle(blocking ? R.string.unblock : R.string.block);
    }
    final MenuItem muteItem=menu.findItem(R.id.mute_user);
    if (muteItem != null) {
      muteItem.setChecked(relationship.isSourceMutingTarget());
    }
    final MenuItem filterItem=menu.findItem(R.id.add_to_filter);
    if (filterItem != null) {
      final boolean filtering=Utils.isFilteringUser(getActivity(),user.id);
      ActionIconDrawable.setMenuHighlight(filterItem,new TwidereMenuInfo(filtering));
      filterItem.setTitle(filtering ? R.string.remove_from_filter : R.string.add_to_filter);
    }
    final MenuItem wantRetweetsItem=menu.findItem(R.id.enable_retweets);
    if (wantRetweetsItem != null) {
      wantRetweetsItem.setChecked(relationship.isSourceWantRetweetsFromTarget());
    }
  }
 else {
    MenuUtils.setMenuItemAvailability(menu,R.id.send_direct_message,false);
    MenuUtils.setMenuItemAvailability(menu,R.id.enable_retweets,false);
    MenuUtils.setMenuItemAvailability(menu,R.id.block,false);
    MenuUtils.setMenuItemAvailability(menu,R.id.mute_user,false);
    MenuUtils.setMenuItemAvailability(menu,R.id.report_spam,false);
  }
  MenuUtils.setMenuItemAvailability(menu,R.id.muted_users,isMyself);
  MenuUtils.setMenuItemAvailability(menu,R.id.blocked_users,isMyself);
  final Intent intent=new Intent(INTENT_ACTION_EXTENSION_OPEN_USER);
  final Bundle extras=new Bundle();
  extras.putParcelable(EXTRA_USER,user);
  intent.putExtras(extras);
  menu.removeGroup(MENU_GROUP_USER_EXTENSION);
  Utils.addIntentToMenu(getActivity(),menu,intent,MENU_GROUP_USER_EXTENSION);
  final HeaderDrawerLayout drawer=mHeaderDrawerLayout;
  if (drawer != null) {
    final int offset=drawer.getPaddingTop() - drawer.getHeaderTop();
    mPreviousActionBarItemIsDark=0;
    mPreviousTabItemIsDark=0;
    updateScrollOffset(offset);
  }
}
