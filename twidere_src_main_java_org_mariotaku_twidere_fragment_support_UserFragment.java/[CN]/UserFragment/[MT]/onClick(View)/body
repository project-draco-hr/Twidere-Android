{
  final FragmentActivity activity=getActivity();
  final ParcelableUser user=getUser();
  if (activity == null || user == null)   return;
switch (view.getId()) {
case R.id.error_container:
{
      getUserInfo(true);
      break;
    }
case R.id.follow:
{
    if (user.id == user.account_id) {
      Utils.openProfileEditor(getActivity(),user.account_id);
      break;
    }
    final UserRelationship userRelationship=mRelationship;
    final AsyncTwitterWrapper twitter=mTwitterWrapper;
    if (userRelationship == null || twitter == null)     return;
    if (userRelationship.relationship.isSourceBlockingTarget()) {
      final AccountKey accountKey=new AccountKey(user.account_id,user.account_host);
      twitter.destroyBlockAsync(accountKey,user.id);
    }
 else     if (userRelationship.relationship.isSourceFollowingTarget()) {
      DestroyFriendshipDialogFragment.show(getFragmentManager(),user);
    }
 else {
      final AccountKey accountKey=new AccountKey(user.account_id,user.account_host);
      twitter.createFriendshipAsync(accountKey,user.id);
    }
    break;
  }
case R.id.profile_image:
{
  final String url=Utils.getOriginalTwitterProfileImage(user.profile_image_url);
  ParcelableMedia profileImage=ParcelableMediaUtils.image(url);
  profileImage.type=ParcelableMedia.Type.IMAGE;
  final ParcelableMedia[] media={profileImage};
  IntentUtils.openMedia(activity,user.account_id,false,null,media,null,true);
  break;
}
case R.id.profile_banner:
{
if (user.profile_banner_url == null) return;
final String url=user.profile_banner_url + "/ipad_retina";
ParcelableMedia profileBanner=ParcelableMediaUtils.image(url);
profileBanner.type=ParcelableMedia.Type.IMAGE;
final ParcelableMedia[] media={profileBanner};
IntentUtils.openMedia(activity,user.account_id,false,null,media,null,true);
break;
}
case R.id.listed_container:
{
Utils.openUserLists(getActivity(),user.account_id,user.id,user.screen_name);
break;
}
case R.id.followers_container:
{
Utils.openUserFollowers(getActivity(),user.account_id,user.id,user.screen_name);
break;
}
case R.id.friends_container:
{
Utils.openUserFriends(getActivity(),user.account_id,user.id,user.screen_name);
break;
}
case R.id.name_container:
{
if (user.account_id != user.id) return;
Utils.openProfileEditor(getActivity(),user.account_id);
break;
}
case R.id.profile_birthday_banner:
{
mHideBirthdayView=true;
mProfileBirthdayBannerView.startAnimation(AnimationUtils.loadAnimation(getActivity(),android.R.anim.fade_out));
mProfileBirthdayBannerView.setVisibility(View.GONE);
break;
}
}
}
