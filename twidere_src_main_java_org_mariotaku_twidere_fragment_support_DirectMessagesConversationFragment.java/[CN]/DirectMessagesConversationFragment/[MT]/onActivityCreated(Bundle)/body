{
  super.onActivityCreated(savedInstanceState);
  final View view=getView();
  if (view == null)   throw new AssertionError();
  final Context viewContext=view.getContext();
  setHasOptionsMenu(true);
  final BaseSupportActivity activity=(BaseSupportActivity)getActivity();
  final ActionBar actionBar=activity.getSupportActionBar();
  if (actionBar == null)   throw new NullPointerException();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM,ActionBar.DISPLAY_SHOW_TITLE | ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.actionbar_custom_view_message_user_picker);
  final View actionBarView=actionBar.getCustomView();
  mAccountSpinner=(Spinner)actionBarView.findViewById(R.id.account_spinner);
  mUserQuery=(EditText)actionBarView.findViewById(R.id.user_query);
  mQueryButton=actionBarView.findViewById(R.id.query_button);
  final List<ParcelableAccount> accounts=ParcelableAccount.getAccountsList(activity,false);
  final AccountsSpinnerAdapter accountsSpinnerAdapter=new AccountsSpinnerAdapter(mAccountSpinner.getContext(),R.layout.spinner_item_account_icon);
  accountsSpinnerAdapter.setDropDownViewResource(R.layout.list_item_user);
  accountsSpinnerAdapter.addAll(accounts);
  mAccountSpinner.setAdapter(accountsSpinnerAdapter);
  mAccountSpinner.setOnItemSelectedListener(this);
  mUserQuery.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      final ParcelableAccount account=(ParcelableAccount)mAccountSpinner.getSelectedItem();
      searchUsers(account.account_id,ParseUtils.parseString(s),true);
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  mQueryButton.setOnClickListener(this);
  mPreferences=getSharedPreferences(SHARED_PREFERENCES_NAME,Context.MODE_PRIVATE);
  mMessageDrafts=getSharedPreferences(MESSAGE_DRAFTS_PREFERENCES_NAME,Context.MODE_PRIVATE);
  mImageLoader=TwidereApplication.getInstance(getActivity()).getImageLoaderWrapper();
  mTwitterWrapper=getTwitterWrapper();
  mValidator=new TwidereValidator(getActivity());
  mAdapter=new MessageConversationAdapter(getActivity());
  final LinearLayoutManager layoutManager=new LinearLayoutManager(viewContext);
  layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
  layoutManager.setStackFromEnd(true);
  mMessagesListView.setLayoutManager(layoutManager);
  mMessagesListView.setAdapter(mAdapter);
  mUsersSearchAdapter=new SimpleParcelableUsersAdapter(activity);
  mUsersSearchList.setAdapter(mUsersSearchAdapter);
  mUsersSearchList.setEmptyView(mUsersSearchEmpty);
  mUsersSearchList.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      final ParcelableAccount account=(ParcelableAccount)mAccountSpinner.getSelectedItem();
      showConversation(account,mUsersSearchAdapter.getItem(position));
      updateProfileImage();
    }
  }
);
  if (mPreferences.getBoolean(KEY_QUICK_SEND,false)) {
    mEditText.setOnEditorActionListener(this);
  }
  mEditText.addTextChangedListener(this);
  mSendButton.setOnClickListener(this);
  mAddImageButton.setOnClickListener(this);
  mSendButton.setEnabled(false);
  if (savedInstanceState != null) {
    final ParcelableAccount account=savedInstanceState.getParcelable(EXTRA_ACCOUNT);
    final ParcelableUser recipient=savedInstanceState.getParcelable(EXTRA_USER);
    showConversation(account,recipient);
    mEditText.setText(savedInstanceState.getString(EXTRA_TEXT));
    mImageUri=savedInstanceState.getString(EXTRA_IMAGE_URI);
  }
 else {
    final Bundle args=getArguments();
    final ParcelableAccount account;
    final ParcelableUser recipient;
    if (args != null) {
      if (args.containsKey(EXTRA_ACCOUNT)) {
        account=args.getParcelable(EXTRA_ACCOUNT);
        recipient=args.getParcelable(EXTRA_USER);
      }
 else       if (args.containsKey(EXTRA_ACCOUNT_ID)) {
        final long accountId=args.getLong(EXTRA_ACCOUNT_ID,-1);
        final long userId=args.getLong(EXTRA_RECIPIENT_ID,-1);
        final int accountPos=accountsSpinnerAdapter.findItemPosition(accountId);
        account=accountPos < 0 ? ParcelableAccount.getCredentials(activity,accountId) : accountsSpinnerAdapter.getItem(accountPos);
        recipient=Utils.getUserForConversation(activity,accountId,userId);
      }
 else {
        account=null;
        recipient=null;
      }
      showConversation(account,recipient);
      if (account != null && recipient != null) {
        final String key=getDraftsTextKey(account.account_id,recipient.id);
        mEditText.setText(mMessageDrafts.getString(key,null));
      }
    }
  }
  mEditText.setSelection(mEditText.length());
  final boolean isValid=mAccount != null && mRecipient != null;
  mConversationContainer.setVisibility(isValid ? View.VISIBLE : View.GONE);
  mRecipientSelectorContainer.setVisibility(isValid ? View.GONE : View.VISIBLE);
  mUsersSearchList.setVisibility(View.GONE);
  mUsersSearchProgress.setVisibility(View.GONE);
}
