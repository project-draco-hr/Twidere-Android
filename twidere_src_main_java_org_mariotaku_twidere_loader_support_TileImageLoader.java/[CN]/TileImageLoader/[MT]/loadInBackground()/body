{
  if (mUri == null) {
    return Result.nullInstance();
  }
  final String scheme=mUri.getScheme();
  if ("http".equals(scheme) || "https".equals(scheme)) {
    final String url=ParseUtils.parseString(mUri.toString());
    if (url == null)     return Result.nullInstance();
    final File cacheFile=mDiskCache.get(url);
    if (cacheFile != null) {
      final File cacheDir=cacheFile.getParentFile();
      if (cacheDir != null && !cacheDir.exists()) {
        cacheDir.mkdirs();
      }
    }
 else     return Result.nullInstance();
    try {
      if (ImageValidator.checkImageValidity(cacheFile))       return decodeImageInternal(cacheFile);
      final InputStream is=mDownloader.getStream(url,new AccountExtra(mAccountId));
      if (is == null)       return Result.nullInstance();
      final long length=is.available();
      mHandler.post(new DownloadStartRunnable(this,mListener,length));
      final OutputStream os=new FileOutputStream(cacheFile);
      try {
        dump(is,os);
        mHandler.post(new DownloadFinishRunnable(this,mListener));
      }
  finally {
        IoUtils.closeSilently(is);
        IoUtils.closeSilently(os);
      }
      if (!ImageValidator.checkImageValidity(cacheFile)) {
        final Result result=decodeBitmapOnly(cacheFile);
        if (cacheFile.isFile()) {
          cacheFile.delete();
        }
        return result;
      }
      return decodeImageInternal(cacheFile);
    }
 catch (    final Exception e) {
      mHandler.post(new DownloadErrorRunnable(this,mListener,e));
      return Result.getInstance(cacheFile,e);
    }
  }
 else   if (ContentResolver.SCHEME_FILE.equals(scheme)) {
    final File file=new File(mUri.getPath());
    try {
      return decodeImage(file);
    }
 catch (    final Exception e) {
      return Result.getInstance(file,e);
    }
  }
  return Result.nullInstance();
}
