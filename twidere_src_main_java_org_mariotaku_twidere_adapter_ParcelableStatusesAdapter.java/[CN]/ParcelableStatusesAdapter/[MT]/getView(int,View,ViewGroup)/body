{
  final View view=super.getView(position,convertView,parent);
  final Object tag=view.getTag();
  final StatusViewHolder holder;
  if (tag instanceof StatusViewHolder) {
    holder=(StatusViewHolder)tag;
  }
 else {
    holder=new StatusViewHolder(view);
    holder.profile_image.setOnClickListener(this);
    holder.my_profile_image.setOnClickListener(this);
    holder.image_preview.setOnClickListener(this);
    holder.content.setOnOverflowIconClickListener(this);
    if (mPlainList) {
      ((View)holder.content).setPadding(0,0,0,0);
      holder.content.setItemBackground(null);
    }
    view.setTag(holder);
  }
  final ParcelableStatus status=getItem(position);
  final boolean showGap=status.is_gap && !mGapDisallowed && position != getCount() - 1;
  holder.position=position;
  holder.setShowAsGap(showGap);
  holder.setDisplayProfileImage(isDisplayProfileImage());
  holder.setCardHighlightOption(mCardHighlightOption);
  final ImageLoaderWrapper loader=getImageLoader();
  if (!showGap) {
    final TwidereLinkify linkify=getLinkify();
    final int highlightOption=getLinkHighlightOption();
    final boolean mShowAccountColor=isShowAccountColor();
    holder.setAccountColorEnabled(mShowAccountColor);
    if (highlightOption != VALUE_LINK_HIGHLIGHT_OPTION_CODE_NONE) {
      holder.text.setText(Utils.getKeywordBoldedText(Html.fromHtml(status.text_html),mHighlightKeywords));
      linkify.applyAllLinks(holder.text,status.account_id,status.is_possibly_sensitive);
      holder.text.setMovementMethod(null);
    }
 else {
      if (mHighlightKeywords == null || mHighlightKeywords.length == 0) {
        holder.text.setText(status.text_unescaped);
      }
 else {
        holder.text.setText(Utils.getKeywordBoldedText(status.text_unescaped,mHighlightKeywords));
      }
    }
    if (mShowAccountColor) {
      holder.setAccountColor(getAccountColor(mContext,status.account_id));
    }
    final boolean isMention=ParcelableUserMention.hasMention(status.mentions,status.account_id);
    final boolean isMyStatus=status.account_id == status.user_id;
    final boolean hasMedia=status.first_media != null;
    if (status.is_retweet) {
      holder.setUserColor(getUserColor(mContext,status.user_id),getUserColor(mContext,status.retweeted_by_id));
    }
 else {
      holder.setUserColor(getUserColor(mContext,status.user_id));
    }
    holder.setHighlightColor(getCardHighlightColor(!mMentionsHighlightDisabled && isMention,!mFavoritesHighlightDisabled && status.is_favorite,status.is_retweet));
    holder.setTextSize(getTextSize());
    holder.setIsMyStatus(isMyStatus && !mIndicateMyStatusDisabled);
    holder.setUserType(status.user_is_verified,status.user_is_protected);
    holder.setDisplayNameFirst(isDisplayNameFirst());
    holder.setNicknameOnly(isNicknameOnly());
    final String nick=getUserNickname(mContext,status.user_id);
    holder.name.setText(TextUtils.isEmpty(nick) ? status.user_name : isNicknameOnly() ? nick : mContext.getString(R.string.name_with_nickname,status.user_name,nick));
    holder.screen_name.setText("@" + status.user_screen_name);
    if (highlightOption != VALUE_LINK_HIGHLIGHT_OPTION_CODE_NONE) {
      linkify.applyUserProfileLinkNoHighlight(holder.name,status.account_id,status.user_id,status.user_screen_name);
      linkify.applyUserProfileLinkNoHighlight(holder.screen_name,status.account_id,status.user_id,status.user_screen_name);
      holder.name.setMovementMethod(null);
      holder.screen_name.setMovementMethod(null);
    }
    holder.time.setTime(status.retweet_timestamp > 0 ? status.retweet_timestamp : status.timestamp);
    holder.setStatusType(!mFavoritesHighlightDisabled && status.is_favorite,isValidLocation(status.location),hasMedia,status.is_possibly_sensitive);
    holder.setIsReplyRetweet(status.in_reply_to_status_id > 0,status.is_retweet);
    if (status.is_retweet) {
      holder.setRetweetedBy(status.retweet_count,status.retweeted_by_id,status.retweeted_by_name,status.retweeted_by_screen_name);
    }
 else     if (status.in_reply_to_status_id > 0) {
      holder.setReplyTo(status.in_reply_to_user_id,status.in_reply_to_name,status.in_reply_to_screen_name);
    }
    if (isDisplayProfileImage()) {
      loader.displayProfileImage(holder.my_profile_image,status.user_profile_image_url);
      loader.displayProfileImage(holder.profile_image,status.user_profile_image_url);
      holder.profile_image.setTag(position);
      holder.my_profile_image.setTag(position);
    }
 else {
      loader.cancelDisplayTask(holder.profile_image);
      loader.cancelDisplayTask(holder.my_profile_image);
      holder.profile_image.setVisibility(View.GONE);
      holder.my_profile_image.setVisibility(View.GONE);
    }
    final boolean hasPreview=mDisplayImagePreview && hasMedia;
    holder.image_preview_container.setVisibility(hasPreview ? View.VISIBLE : View.GONE);
    if (hasPreview) {
      if (mImagePreviewScaleType != null) {
        holder.image_preview.setScaleType(mImagePreviewScaleType);
      }
      if (status.is_possibly_sensitive && !mDisplaySensitiveContents) {
        holder.image_preview.setImageDrawable(null);
        holder.image_preview.setBackgroundResource(R.drawable.image_preview_nsfw);
        holder.image_preview_progress.setVisibility(View.GONE);
      }
 else       if (!status.first_media.equals(mImageLoadingHandler.getLoadingUri(holder.image_preview))) {
        holder.image_preview.setBackgroundResource(0);
        loader.displayPreviewImage(holder.image_preview,status.first_media,mImageLoadingHandler);
      }
      final Resources res=mContext.getResources();
      final int count=status.medias.length;
      holder.image_preview_count.setText(res.getQuantityString(R.plurals.N_medias,count,count));
      holder.image_preview.setTag(position);
    }
 else {
      loader.cancelDisplayTask(holder.image_preview);
    }
  }
 else {
    loader.cancelDisplayTask(holder.profile_image);
    loader.cancelDisplayTask(holder.my_profile_image);
    loader.cancelDisplayTask(holder.image_preview);
  }
  if (position > mMaxAnimationPosition) {
    if (mAnimationEnabled) {
      view.startAnimation(holder.item_animation);
    }
    mMaxAnimationPosition=position;
  }
  return view;
}
