{
  if (statuses == null || statuses.isEmpty() || accountKey == null) {
    return;
  }
  final Uri uri=getContentUri();
  final ContentResolver resolver=context.getContentResolver();
  final boolean noItemsBefore=DataStoreUtils.getStatusCount(context,uri,accountKey) <= 0;
  final ContentValues[] values=new ContentValues[statuses.size()];
  final long[] statusIds=new long[statuses.size()];
  long minId=-1;
  int minIdx=-1;
  boolean hasIntersection=false;
  for (int i=0, j=statuses.size(); i < j; i++) {
    final Status status=statuses.get(i);
    values[i]=ContentValuesCreator.createStatus(status,accountKey);
    values[i].put(Statuses.INSERTED_DATE,System.currentTimeMillis());
    final long id=status.getId();
    if (sinceId > 0 && id <= sinceId) {
      hasIntersection=true;
    }
    if (minId == -1 || id < minId) {
      minId=id;
      minIdx=i;
    }
    statusIds[i]=id;
  }
  final Expression accountWhere=Utils.getAccountCompareExpression();
  final Expression statusWhere=Expression.in(new Columns.Column(Statuses.STATUS_ID),new RawItemArray(statusIds));
  final String countWhere=Expression.and(accountWhere,statusWhere).getSQL();
  String[] whereArgs={String.valueOf(accountKey.getId()),accountKey.getHost()};
  final String[] projection={SQLFunctions.COUNT()};
  final int rowsDeleted;
  final Cursor countCur=resolver.query(uri,projection,countWhere,whereArgs,null);
  try {
    if (countCur != null && countCur.moveToFirst()) {
      rowsDeleted=countCur.getInt(0);
    }
 else {
      rowsDeleted=0;
    }
  }
  finally {
    Utils.closeSilently(countCur);
  }
  final RefreshEvent event=RefreshEvent.create(context,statusIds,getTimelineType());
  HotMobiLogger.getInstance(context).log(accountKey,event);
  final boolean deletedOldGap=rowsDeleted > 0 && ArrayUtils.contains(statusIds,maxId);
  final boolean noRowsDeleted=rowsDeleted == 0;
  final boolean insertGap=minId > 0 && (noRowsDeleted || deletedOldGap) && !noItemsBefore && !hasIntersection;
  if (insertGap && minIdx != -1) {
    values[minIdx].put(Statuses.IS_GAP,true);
  }
  final Uri insertUri=UriUtils.appendQueryParameters(uri,QUERY_PARAM_NOTIFY,notify);
  ContentResolverUtils.bulkInsert(resolver,insertUri,values);
}
