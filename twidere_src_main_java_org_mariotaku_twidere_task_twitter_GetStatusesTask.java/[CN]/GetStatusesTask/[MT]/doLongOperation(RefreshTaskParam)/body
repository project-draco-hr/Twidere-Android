{
  final AccountKey[] accountKeys=param.getAccountKeys();
  final long[] maxIds=param.getMaxIds();
  final long[] sinceIds=param.getSinceIds();
  final List<TwitterWrapper.StatusListResponse> result=new ArrayList<>();
  int idx=0;
  final int loadItemLimit=preferences.getInt(KEY_LOAD_ITEM_LIMIT,DEFAULT_LOAD_ITEM_LIMIT);
  for (  final AccountKey accountKey : accountKeys) {
    final Twitter twitter=TwitterAPIFactory.getTwitterInstance(context,accountKey.getId(),accountKey.getHost(),true);
    if (twitter == null)     continue;
    try {
      final Paging paging=new Paging();
      paging.count(loadItemLimit);
      final long maxId, sinceId;
      if (maxIds != null && maxIds[idx] > 0) {
        maxId=maxIds[idx];
        paging.maxId(maxId);
      }
 else {
        maxId=-1;
      }
      if (sinceIds != null && sinceIds[idx] > 0) {
        sinceId=sinceIds[idx];
        paging.sinceId(sinceId - 1);
        if (maxIds == null || sinceIds[idx] <= 0) {
          paging.setLatestResults(true);
        }
      }
 else {
        sinceId=-1;
      }
      final List<Status> statuses=getStatuses(twitter,paging);
      InternalTwitterContentUtils.getStatusesWithQuoteData(twitter,statuses);
      storeStatus(accountKey.getId(),accountKey.getHost(),statuses,sinceId,maxId,true);
      final CacheUsersStatusesTask cacheTask=new CacheUsersStatusesTask(context);
      cacheTask.setParams(new TwitterWrapper.StatusListResponse(accountKey,statuses));
      TaskStarter.execute(cacheTask);
      errorInfoStore.remove(getErrorInfoKey(),accountKey.getId());
    }
 catch (    final TwitterException e) {
      if (BuildConfig.DEBUG) {
        Log.w(LOGTAG,e);
      }
      if (e.isCausedByNetworkIssue()) {
        errorInfoStore.put(getErrorInfoKey(),accountKey.getId(),ErrorInfoStore.CODE_NETWORK_ERROR);
      }
      result.add(new TwitterWrapper.StatusListResponse(accountKey,e));
    }
    idx++;
  }
  return result;
}
