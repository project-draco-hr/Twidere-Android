{
  if (param.shouldAbort())   return Collections.emptyList();
  final UserKey[] accountKeys=param.getAccountKeys();
  final String[] maxIds=param.getMaxIds();
  final String[] sinceIds=param.getSinceIds();
  final long[] maxSortIds=param.getMaxSortIds();
  final long[] sinceSortIds=param.getSinceSortIds();
  final List<TwitterWrapper.StatusListResponse> result=new ArrayList<>();
  int idx=0;
  final int loadItemLimit=preferences.getInt(KEY_LOAD_ITEM_LIMIT,DEFAULT_LOAD_ITEM_LIMIT);
  for (  final UserKey accountKey : accountKeys) {
    final ParcelableCredentials credentials=ParcelableCredentialsUtils.getCredentials(context,accountKey);
    if (credentials == null)     continue;
    final Twitter twitter=TwitterAPIFactory.getTwitterInstance(context,credentials,true,true);
    if (twitter == null)     continue;
    try {
      final Paging paging=new Paging();
      paging.count(loadItemLimit);
      final String maxId, sinceId;
      long maxSortId=-1, sinceSortId=-1;
      if (maxIds != null && maxIds[idx] != null) {
        maxId=maxIds[idx];
        paging.maxId(maxId);
        if (maxSortIds != null) {
          maxSortId=maxSortIds[idx];
        }
      }
 else {
        maxSortId=-1;
        maxId=null;
      }
      if (sinceIds != null && sinceIds[idx] != null) {
        sinceId=sinceIds[idx];
        long sinceIdLong=NumberUtils.toLong(sinceId,-1);
        if (sinceIdLong != -1) {
          paging.sinceId(String.valueOf(sinceIdLong - 1));
        }
 else {
          paging.sinceId(sinceId);
        }
        if (sinceSortIds != null) {
          sinceSortId=sinceSortIds[idx];
        }
        if (maxIds == null || sinceIds[idx] == null) {
          paging.setLatestResults(true);
        }
      }
 else {
        sinceId=null;
      }
      final List<Status> statuses=getStatuses(twitter,paging);
      InternalTwitterContentUtils.getStatusesWithQuoteData(twitter,statuses);
      storeStatus(accountKey,credentials,statuses,sinceId,maxId,sinceSortId,maxSortId,loadItemLimit,false);
      final CacheUsersStatusesTask cacheTask=new CacheUsersStatusesTask(context);
      cacheTask.setParams(new TwitterWrapper.StatusListResponse(accountKey,statuses));
      TaskStarter.execute(cacheTask);
      errorInfoStore.remove(getErrorInfoKey(),accountKey.getId());
    }
 catch (    final TwitterException e) {
      if (BuildConfig.DEBUG) {
        Log.w(LOGTAG,e);
      }
      if (e.isCausedByNetworkIssue()) {
        errorInfoStore.put(getErrorInfoKey(),accountKey.getId(),ErrorInfoStore.CODE_NETWORK_ERROR);
      }
      result.add(new TwitterWrapper.StatusListResponse(accountKey,e));
    }
    idx++;
  }
  return result;
}
