{
  if (path == null || !path.isDirectory())   return Collections.emptyList();
  final File[] listed_files=path.listFiles();
  if (listed_files == null)   return Collections.emptyList();
  final List<File> dirs=new ArrayList<>();
  final List<File> files=new ArrayList<>();
  for (  final File file : listed_files) {
    if (!file.canRead() || file.isHidden()) {
      continue;
    }
    if (file.isDirectory()) {
      dirs.add(file);
    }
 else     if (file.isFile()) {
      final String name=file.getName();
      final int idx=name.lastIndexOf(".");
      if (extensions == null || extensions.length == 0 || idx == -1 || idx > -1 && extensions_regex.matcher(name.substring(idx + 1)).matches()) {
        files.add(file);
      }
    }
  }
  Collections.sort(dirs,NAME_COMPARATOR);
  Collections.sort(files,NAME_COMPARATOR);
  final List<File> list=new ArrayList<>();
  final File parent=path.getParentFile();
  if (path.getParentFile() != null) {
    list.add(parent);
  }
  list.addAll(dirs);
  list.addAll(files);
  return list;
}
