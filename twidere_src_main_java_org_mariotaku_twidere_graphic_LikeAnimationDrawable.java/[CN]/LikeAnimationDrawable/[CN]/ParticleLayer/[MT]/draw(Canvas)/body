{
  final float progress=getProgress();
  if (progress < 0)   return;
  final Rect bounds=getBounds();
  final float expandSpinProgress=Math.min(0.5f,progress);
  final float currentRadius=mFullRadius + (mFullRadius * expandSpinProgress);
  final float distance=mParticleSize + (mParticleSize * progress);
  final float mainStrokeWidth, subStrokeWidth;
  if (progress < 0.5) {
    mainStrokeWidth=mParticleSize * (1 - progress);
    subStrokeWidth=mParticleSize * (1 + progress / 2);
  }
 else {
    mainStrokeWidth=mParticleSize * (1 - progress);
    subStrokeWidth=mParticleSize * 1.25f * (1 - (progress - 0.5f) * 2);
  }
  for (int i=0; i < PARTICLES_PIVOTS_COUNT; i++) {
    final double degree=360.0 / PARTICLES_PIVOTS_COUNT * i;
    final int color=palette.getParticleColor(PARTICLES_PIVOTS_COUNT,i,progress);
    final double mainParticleAngle=Math.toRadians(degree - 115);
    final float mainParticleX=(float)(bounds.centerX() + currentRadius * Math.cos(mainParticleAngle));
    final float mainParticleY=(float)(bounds.centerY() + currentRadius * Math.sin(mainParticleAngle));
    mPaint.setColor(color);
    mPaint.setStrokeWidth(mainStrokeWidth);
    if (mainStrokeWidth > 0) {
      canvas.drawPoint(mainParticleX,mainParticleY,mPaint);
    }
    final double particleAngle=Math.toRadians(90.0 * -expandSpinProgress + degree + 15);
    final float subParticleX=(float)(mainParticleX + distance * Math.cos(particleAngle));
    final float subParticleY=(float)(mainParticleY + distance * Math.sin(particleAngle));
    mPaint.setAlpha(Math.round(255f * (1 - progress / 2f)));
    mPaint.setStrokeWidth(subStrokeWidth);
    if (subStrokeWidth > 0) {
      canvas.drawPoint(subParticleX,subParticleY,mPaint);
    }
  }
}
