{
  if (mCurrentAnimator != null)   return;
  final AnimatorSet animatorSet=new AnimatorSet();
  final AbsLayer particleLayer=getParticleShineLayer();
  final AbsLayer circleLayer=getCircleLayer();
  final IconLayer iconLayer=getIconLayer();
switch (mStyle) {
case Style.LIKE:
{
      setupLikeAnimation(animatorSet,particleLayer,circleLayer,iconLayer);
      break;
    }
case Style.FAVORITE:
{
    setupFavoriteAnimation(animatorSet,particleLayer,circleLayer,iconLayer);
    break;
  }
}
animatorSet.addListener(new AnimatorListenerAdapter(){
@Override public void onAnimationStart(Animator animation){
  resetState();
}
@Override public void onAnimationCancel(Animator animation){
  mCurrentAnimator=null;
}
@Override public void onAnimationEnd(Animator animation){
  mCurrentAnimator=null;
  if (mListenerRef == null)   return;
  final OnLikedListener listener=mListenerRef.get();
  if (listener == null)   return;
  if (!listener.onLiked()) {
    resetState();
  }
}
private void resetState(){
  iconLayer.setColorFilter(mDefaultColor,PorterDuff.Mode.SRC_ATOP);
  particleLayer.setProgress(-1);
}
}
);
animatorSet.start();
mCurrentAnimator=animatorSet;
}
