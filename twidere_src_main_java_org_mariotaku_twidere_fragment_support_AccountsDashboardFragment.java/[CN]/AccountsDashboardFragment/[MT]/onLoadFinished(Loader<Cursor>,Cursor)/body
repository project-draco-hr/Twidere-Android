{
  final Menu menu=mAccountsToggleMenu.getMenu();
  mAccountActionProvider=(SupportAccountActionProvider)MenuItemCompat.getActionProvider(menu.findItem(MENU_SELECT_ACCOUNT));
  mAccountActionProvider.setExclusive(false);
  final ArrayList<ParcelableAccount> accounts=new ArrayList<>();
  final Set<Long> activatedIds=new HashSet<>();
  if (data != null) {
    data.moveToFirst();
    final Indices indices=new Indices(data);
    long defaultId=-1;
    while (!data.isAfterLast()) {
      final ParcelableAccount account=new ParcelableAccount(data,indices);
      accounts.add(account);
      if (account.is_activated) {
        if (defaultId < 0) {
          defaultId=account.account_id;
        }
        activatedIds.add(account.account_id);
      }
      data.moveToNext();
    }
    if (mAccountsAdapter.getSelectedAccountId() <= 0) {
      mAccountsAdapter.setSelectedAccountId(mPreferences.getLong(KEY_DEFAULT_ACCOUNT_ID,defaultId));
    }
  }
  mAccountActionProvider.setAccounts(accounts.toArray(new ParcelableAccount[accounts.size()]));
  mAccountActionProvider.setSelectedAccountIds(ArrayUtils.toPrimitive(activatedIds.toArray(new Long[activatedIds.size()])));
  mAccountsAdapter.changeCursor(data);
  updateAccountOptionsSeparatorLabel();
  updateDefaultAccountState();
}
