{
  if (mSwitchAccountAnimationPlaying)   return;
  final ImageView snapshotView=mFloatingProfileImageSnapshotView;
  final ShapedImageView profileImageView=mAccountProfileImageView;
  final ShapedImageView clickedImageView=holder.getIconView();
  final Matrix matrix=new Matrix();
  final Rect tempRect=new Rect();
  clickedImageView.getGlobalVisibleRect(tempRect);
  final RectF sourceBounds=new RectF(tempRect);
  profileImageView.getGlobalVisibleRect(tempRect);
  final RectF destBounds=new RectF(tempRect);
  final float finalScale=destBounds.width() / sourceBounds.width();
  final Bitmap snapshotBitmap=TransitionUtils.createViewBitmap(clickedImageView,matrix,new RectF(0,0,sourceBounds.width(),sourceBounds.height()));
  final ViewGroup.LayoutParams lp=snapshotView.getLayoutParams();
  lp.width=clickedImageView.getWidth();
  lp.height=clickedImageView.getHeight();
  snapshotView.setLayoutParams(lp);
  AnimatorSet set=new AnimatorSet();
  snapshotView.setPivotX(0);
  snapshotView.setPivotY(0);
  snapshotView.setX(sourceBounds.left);
  snapshotView.setY(sourceBounds.top);
  set.play(ObjectAnimator.ofFloat(snapshotView,View.X,sourceBounds.left,destBounds.left)).with(ObjectAnimator.ofFloat(snapshotView,View.Y,sourceBounds.top,destBounds.top)).with(ObjectAnimator.ofFloat(snapshotView,View.SCALE_X,1,finalScale)).with(ObjectAnimator.ofFloat(snapshotView,View.SCALE_Y,1,finalScale)).with(ObjectAnimator.ofFloat(profileImageView,View.ALPHA,1,0)).with(ObjectAnimator.ofFloat(clickedImageView,View.SCALE_X,0,1)).with(ObjectAnimator.ofFloat(clickedImageView,View.SCALE_Y,0,1));
  final long animationTransition=400;
  set.setDuration(animationTransition);
  set.setInterpolator(new DecelerateInterpolator());
  set.addListener(new AnimatorListener(){
    private Drawable clickedDrawable;
    private int[] clickedColors;
    @Override public void onAnimationStart(    Animator animation){
      snapshotView.setVisibility(View.VISIBLE);
      snapshotView.setImageBitmap(snapshotBitmap);
      final Drawable profileDrawable=profileImageView.getDrawable();
      clickedDrawable=clickedImageView.getDrawable();
      clickedColors=clickedImageView.getBorderColors();
      final ParcelableAccount oldSelectedAccount=mAccountsAdapter.getSelectedAccount();
      mImageLoader.displayDashboardProfileImage(clickedImageView,oldSelectedAccount.profile_image_url,profileDrawable);
      clickedImageView.setBorderColors(profileImageView.getBorderColors());
      mSwitchAccountAnimationPlaying=true;
    }
    @Override public void onAnimationEnd(    Animator animation){
      finishAnimation();
    }
    private void finishAnimation(){
      mAccountsAdapter.setSelectedAccountId(account.account_id);
      updateAccountOptionsSeparatorLabel(clickedDrawable);
      snapshotView.setVisibility(View.INVISIBLE);
      snapshotView.setImageDrawable(null);
      profileImageView.setImageDrawable(clickedDrawable);
      profileImageView.setBorderColors(clickedColors);
      profileImageView.setAlpha(1f);
      clickedImageView.setScaleX(1);
      clickedImageView.setScaleY(1);
      clickedImageView.setAlpha(1f);
      mSwitchAccountAnimationPlaying=false;
    }
    @Override public void onAnimationCancel(    Animator animation){
      finishAnimation();
    }
    @Override public void onAnimationRepeat(    Animator animation){
    }
  }
);
  set.start();
}
