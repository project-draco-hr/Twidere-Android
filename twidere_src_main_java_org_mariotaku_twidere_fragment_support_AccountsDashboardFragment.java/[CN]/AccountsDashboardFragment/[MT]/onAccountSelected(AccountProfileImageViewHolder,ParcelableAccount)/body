{
  if (mSwitchAccountAnimationPlaying)   return;
  final ImageView snapshotView=mFloatingProfileImageSnapshotView;
  final ShapedImageView profileImageView=mAccountProfileImageView;
  final ShapedImageView clickedImageView=holder.getIconView();
  snapshotView.setPivotX(0);
  snapshotView.setPivotY(0);
  snapshotView.setTranslationX(0);
  snapshotView.setTranslationY(0);
  final Matrix matrix=new Matrix();
  final RectF sourceBounds=new RectF(), destBounds=new RectF(), snapshotBounds=new RectF();
  getLocationOnScreen(clickedImageView,sourceBounds);
  getLocationOnScreen(profileImageView,destBounds);
  getLocationOnScreen(snapshotView,snapshotBounds);
  final float finalScale=destBounds.width() / sourceBounds.width();
  final Bitmap snapshotBitmap=TransitionUtils.createViewBitmap(clickedImageView,matrix,new RectF(0,0,sourceBounds.width(),sourceBounds.height()));
  final ViewGroup.LayoutParams lp=snapshotView.getLayoutParams();
  lp.width=clickedImageView.getWidth();
  lp.height=clickedImageView.getHeight();
  snapshotView.setLayoutParams(lp);
  AnimatorSet set=new AnimatorSet();
  set.play(ObjectAnimator.ofFloat(snapshotView,View.TRANSLATION_X,sourceBounds.left - snapshotBounds.left,destBounds.left - snapshotBounds.left)).with(ObjectAnimator.ofFloat(snapshotView,View.TRANSLATION_Y,sourceBounds.top - snapshotBounds.top,destBounds.top - snapshotBounds.top)).with(ObjectAnimator.ofFloat(snapshotView,View.SCALE_X,1,finalScale)).with(ObjectAnimator.ofFloat(snapshotView,View.SCALE_Y,1,finalScale)).with(ObjectAnimator.ofFloat(profileImageView,View.ALPHA,1,0)).with(ObjectAnimator.ofFloat(clickedImageView,View.SCALE_X,0,1)).with(ObjectAnimator.ofFloat(clickedImageView,View.SCALE_Y,0,1));
  final long animationTransition=400;
  set.setDuration(animationTransition);
  set.setInterpolator(new DecelerateInterpolator());
  set.addListener(new AnimatorListener(){
    private Drawable clickedDrawable;
    private int[] clickedColors;
    @Override public void onAnimationStart(    Animator animation){
      snapshotView.setVisibility(View.VISIBLE);
      snapshotView.setImageBitmap(snapshotBitmap);
      final Drawable profileDrawable=profileImageView.getDrawable();
      clickedDrawable=clickedImageView.getDrawable();
      clickedColors=clickedImageView.getBorderColors();
      final ParcelableAccount oldSelectedAccount=mAccountsAdapter.getSelectedAccount();
      if (oldSelectedAccount == null)       return;
      mMediaLoader.displayDashboardProfileImage(clickedImageView,oldSelectedAccount,profileDrawable);
      clickedImageView.setBorderColors(profileImageView.getBorderColors());
      mSwitchAccountAnimationPlaying=true;
    }
    @Override public void onAnimationEnd(    Animator animation){
      finishAnimation();
    }
    @Override public void onAnimationCancel(    Animator animation){
      finishAnimation();
    }
    @Override public void onAnimationRepeat(    Animator animation){
    }
    private void finishAnimation(){
      final Editor editor=mPreferences.edit();
      editor.putString(KEY_DEFAULT_ACCOUNT_KEY,account.account_key.toString());
      editor.apply();
      mAccountsAdapter.setSelectedAccountKey(account.account_key);
      updateAccountActions();
      updateAccountOptionsSeparatorLabel(clickedDrawable);
      snapshotView.setVisibility(View.INVISIBLE);
      snapshotView.setImageDrawable(null);
      profileImageView.setImageDrawable(clickedDrawable);
      profileImageView.setBorderColors(clickedColors);
      profileImageView.setAlpha(1f);
      clickedImageView.setScaleX(1);
      clickedImageView.setScaleY(1);
      clickedImageView.setAlpha(1f);
      mSwitchAccountAnimationPlaying=false;
    }
  }
);
  set.start();
}
