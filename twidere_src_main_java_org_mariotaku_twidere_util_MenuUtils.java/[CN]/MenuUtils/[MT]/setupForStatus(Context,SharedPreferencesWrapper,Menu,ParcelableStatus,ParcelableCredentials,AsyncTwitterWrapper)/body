{
  if (menu instanceof ContextMenu) {
    ((ContextMenu)menu).setHeaderTitle(context.getString(R.string.status_menu_title_format,UserColorNameManager.decideDisplayName(status.user_nickname,status.user_name,status.user_screen_name,preferences.getBoolean(KEY_NAME_FIRST)),status.text_unescaped));
  }
  final int retweetHighlight=ContextCompat.getColor(context,R.color.highlight_retweet);
  final int favoriteHighlight=ContextCompat.getColor(context,R.color.highlight_favorite);
  final int likeHighlight=ContextCompat.getColor(context,R.color.highlight_like);
  final boolean isMyRetweet;
  if (twitter.isCreatingRetweet(status.account_key,status.id)) {
    isMyRetweet=true;
  }
 else   if (twitter.isDestroyingStatus(status.account_key,status.id)) {
    isMyRetweet=false;
  }
 else {
    isMyRetweet=status.retweeted || Utils.isMyRetweet(status);
  }
  final MenuItem delete=menu.findItem(R.id.delete);
  if (delete != null) {
    delete.setVisible(Utils.isMyStatus(status));
  }
  final MenuItem retweet=menu.findItem(R.id.retweet);
  if (retweet != null) {
    ActionIconDrawable.setMenuHighlight(retweet,new TwidereMenuInfo(isMyRetweet,retweetHighlight));
    retweet.setTitle(isMyRetweet ? R.string.cancel_retweet : R.string.retweet);
  }
  final MenuItem favorite=menu.findItem(R.id.favorite);
  if (favorite != null) {
    final boolean isFavorite;
    if (twitter.isCreatingFavorite(status.account_key,status.id)) {
      isFavorite=true;
    }
 else     if (twitter.isDestroyingFavorite(status.account_key,status.id)) {
      isFavorite=false;
    }
 else {
      isFavorite=status.is_favorite;
    }
    ActionProvider provider=MenuItemCompat.getActionProvider(favorite);
    final boolean useStar=preferences.getBoolean(SharedPreferenceConstants.KEY_I_WANT_MY_STARS_BACK);
    if (provider instanceof FavoriteItemProvider) {
      ((FavoriteItemProvider)provider).setIsFavorite(favorite,isFavorite);
    }
 else {
      if (useStar) {
        final Drawable oldIcon=favorite.getIcon();
        if (oldIcon instanceof ActionIconDrawable) {
          final Drawable starIcon=ContextCompat.getDrawable(context,R.drawable.ic_action_star);
          favorite.setIcon(new ActionIconDrawable(starIcon,((ActionIconDrawable)oldIcon).getDefaultColor()));
        }
 else {
          favorite.setIcon(R.drawable.ic_action_star);
        }
        ActionIconDrawable.setMenuHighlight(favorite,new TwidereMenuInfo(isFavorite,favoriteHighlight));
      }
 else {
        ActionIconDrawable.setMenuHighlight(favorite,new TwidereMenuInfo(isFavorite,likeHighlight));
      }
    }
    if (useStar) {
      favorite.setTitle(isFavorite ? R.string.unfavorite : R.string.favorite);
    }
 else {
      favorite.setTitle(isFavorite ? R.string.undo_like : R.string.like);
    }
  }
  final MenuItem translate=menu.findItem(R.id.translate);
  if (translate != null) {
    final boolean isOfficialKey=Utils.isOfficialCredentials(context,account);
    final SharedPreferencesWrapper prefs=SharedPreferencesWrapper.getInstance(context,SHARED_PREFERENCES_NAME,Context.MODE_PRIVATE);
    setMenuItemAvailability(menu,R.id.translate,isOfficialKey);
  }
  menu.removeGroup(Constants.MENU_GROUP_STATUS_EXTENSION);
  Utils.addIntentToMenuForExtension(context,menu,Constants.MENU_GROUP_STATUS_EXTENSION,INTENT_ACTION_EXTENSION_OPEN_STATUS,EXTRA_STATUS,EXTRA_STATUS_JSON,status);
  final MenuItem shareItem=menu.findItem(R.id.share);
  final ActionProvider shareProvider=MenuItemCompat.getActionProvider(shareItem);
  if (shareProvider instanceof SupportStatusShareProvider) {
    ((SupportStatusShareProvider)shareProvider).setStatus(status);
  }
 else   if (shareProvider instanceof ShareActionProvider) {
    final Intent shareIntent=Utils.createStatusShareIntent(context,status);
    ((ShareActionProvider)shareProvider).setShareIntent(shareIntent);
  }
 else   if (shareItem.hasSubMenu()) {
    final Menu shareSubMenu=shareItem.getSubMenu();
    final Intent shareIntent=Utils.createStatusShareIntent(context,status);
    shareSubMenu.removeGroup(Constants.MENU_GROUP_STATUS_SHARE);
    addIntentToMenu(context,shareSubMenu,shareIntent,Constants.MENU_GROUP_STATUS_SHARE);
  }
 else {
    final Intent shareIntent=Utils.createStatusShareIntent(context,status);
    final Intent chooserIntent=Intent.createChooser(shareIntent,context.getString(R.string.share_status));
    Utils.addCopyLinkIntent(context,chooserIntent,LinkCreator.getStatusWebLink(status));
    shareItem.setIntent(chooserIntent);
  }
}
