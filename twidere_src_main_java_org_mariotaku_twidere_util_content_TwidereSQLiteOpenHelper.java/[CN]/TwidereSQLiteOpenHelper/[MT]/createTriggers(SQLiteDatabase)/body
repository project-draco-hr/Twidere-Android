{
  db.execSQL(SQLQueryBuilder.dropTrigger(true,"delete_old_statuses").getSQL());
  db.execSQL(SQLQueryBuilder.dropTrigger(true,"delete_old_cached_statuses").getSQL());
  db.execSQL(SQLQueryBuilder.dropTrigger(true,"delete_old_received_messages").getSQL());
  db.execSQL(SQLQueryBuilder.dropTrigger(true,"delete_old_sent_messages").getSQL());
  db.execSQL(SQLQueryBuilder.dropTrigger(true,"on_user_cache_update_trigger").getSQL());
  db.execSQL(SQLQueryBuilder.dropTrigger(true,"delete_old_cached_hashtags").getSQL());
  db.execSQL(createDeleteDuplicateStatusTrigger("delete_old_statuses",Statuses.TABLE_NAME).getSQL());
  db.execSQL(createDeleteDuplicateStatusTrigger("delete_old_cached_statuses",CachedStatuses.TABLE_NAME).getSQL());
  db.execSQL(createDeleteDuplicateMessageTrigger("delete_old_received_messages",DirectMessages.Inbox.TABLE_NAME).getSQL());
  db.execSQL(createDeleteDuplicateMessageTrigger("delete_old_sent_messages",DirectMessages.Outbox.TABLE_NAME).getSQL());
  final Table cachedUsersTable=new Table(CachedUsers.TABLE_NAME);
  final Table filteredUsersTable=new Table(Filters.Users.TABLE_NAME);
  db.execSQL(SQLQueryBuilder.createTrigger(false,true,"on_user_cache_update_trigger").type(Type.BEFORE).event(Event.INSERT).on(cachedUsersTable).forEachRow(true).actions(SQLQueryBuilder.update(OnConflict.REPLACE,filteredUsersTable).set(new SetValue(new Column(Filters.Users.NAME),new Column(Table.NEW,CachedUsers.NAME)),new SetValue(new Column(Filters.Users.SCREEN_NAME),new Column(Table.NEW,CachedUsers.SCREEN_NAME))).where(Expression.equals(new Column(Filters.Users.USER_KEY),new Column(Table.NEW,CachedUsers.USER_KEY))).build()).buildSQL());
  final Table cachedHashtagsTable=new Table(CachedHashtags.TABLE_NAME);
  db.execSQL(SQLQueryBuilder.createTrigger(false,true,"delete_old_cached_hashtags").type(Type.BEFORE).event(Event.INSERT).on(cachedHashtagsTable).forEachRow(true).actions(SQLQueryBuilder.deleteFrom(cachedHashtagsTable).where(Expression.like(new Column(CachedHashtags.NAME),new Column(Table.NEW,CachedHashtags.NAME))).build()).buildSQL());
}
