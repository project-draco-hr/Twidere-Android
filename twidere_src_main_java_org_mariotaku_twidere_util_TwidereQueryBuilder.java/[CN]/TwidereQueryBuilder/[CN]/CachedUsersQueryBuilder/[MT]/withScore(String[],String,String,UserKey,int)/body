{
  final SQLSelectQuery.Builder qb=new SQLSelectQuery.Builder();
  final Selectable select=Utils.getColumnsFromProjection(projection);
  final Column[] columns=new Column[CachedUsers.COLUMNS.length + 1];
  for (int i=0, j=columns.length - 1; i < j; i++) {
    final String column=CachedUsers.COLUMNS[i];
    if (CachedUsers._ID.equals(column) || CachedUsers.USER_KEY.equals(column)) {
      columns[i]=new Column(new Table(CachedUsers.TABLE_NAME),column,column);
    }
 else {
      columns[i]=new Column(column);
    }
  }
  final String expr=String.format(Locale.ROOT,"%s * 100 + %s * 50 - %s * 100 - %s * 100 - %s * 100",valueOrZero(CachedRelationships.FOLLOWING,CachedRelationships.FOLLOWED_BY,CachedRelationships.BLOCKING,CachedRelationships.BLOCKED_BY,CachedRelationships.MUTING));
  columns[columns.length - 1]=new Column(expr,"score");
  qb.select(select);
  final Pair<SQLSelectQuery,String[]> pair=withRelationship(new Columns(columns),null,null,accountKey);
  qb.from(pair.first);
  if (selection != null) {
    qb.where(new Expression(selection));
  }
  if (sortOrder != null) {
    qb.orderBy(new OrderBy(sortOrder));
  }
  if (limit > 0) {
    qb.limit(limit);
  }
  return Pair.create(qb.build(),pair.second);
}
