{
  final SQLSelectQuery.Builder qb=new SQLSelectQuery.Builder();
  qb.select(select).from(new Tables(CachedUsers.TABLE_NAME));
  final Column relationshipsUserId=new Column(new Table(CachedRelationships.TABLE_NAME),CachedRelationships.USER_KEY);
  final Column usersUserId=new Column(new Table(CachedUsers.TABLE_NAME),CachedRelationships.USER_KEY);
  final Column relationshipsAccountId=new Column(new Table(CachedRelationships.TABLE_NAME),CachedRelationships.ACCOUNT_KEY);
  final Expression on=Expression.and(Expression.equals(relationshipsUserId,usersUserId),Expression.equalsArgs(relationshipsAccountId.getSQL()));
  qb.join(new Join(false,Operation.LEFT,new Table(CachedRelationships.TABLE_NAME),on));
  final Expression userTypeExpression;
  final String host=accountKey.getHost();
  final String[] accountKeyArgs;
  if (host == null) {
    userTypeExpression=Expression.notLikeRaw(new Column(new Table(CachedUsers.TABLE_NAME),CachedUsers.USER_KEY),"'%@%'");
    accountKeyArgs=new String[]{accountKey.toString()};
  }
 else {
    userTypeExpression=Expression.likeRaw(new Column(new Table(CachedUsers.TABLE_NAME),CachedUsers.USER_KEY),"'%@'||?");
    accountKeyArgs=new String[]{accountKey.toString(),host};
  }
  if (selection != null) {
    qb.where(Expression.and(userTypeExpression,new Expression(selection)));
  }
 else {
    qb.where(userTypeExpression);
  }
  if (sortOrder != null) {
    qb.orderBy(new OrderBy(sortOrder));
  }
  final String[] mergedArgs=new String[TwidereArrayUtils.arraysLength(accountKeyArgs,selectionArgs)];
  TwidereArrayUtils.mergeArray(mergedArgs,accountKeyArgs,selectionArgs);
  return Pair.create(qb.build(),mergedArgs);
}
