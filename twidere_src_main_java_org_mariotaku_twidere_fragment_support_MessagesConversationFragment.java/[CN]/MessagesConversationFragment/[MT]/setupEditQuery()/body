{
  final EditTextEnterHandler queryEnterHandler=EditTextEnterHandler.attach(mEditUserQuery,new EnterListener(){
    @Override public boolean shouldCallListener(){
      final FragmentActivity activity=getActivity();
      if (!(activity instanceof BaseAppCompatActivity))       return false;
      return ((BaseAppCompatActivity)activity).getKeyMetaState() == 0;
    }
    @Override public boolean onHitEnter(){
      final FragmentActivity activity=getActivity();
      if (!(activity instanceof BaseAppCompatActivity))       return false;
      if (((BaseAppCompatActivity)activity).getKeyMetaState() != 0)       return false;
      final ParcelableCredentials account=(ParcelableCredentials)mAccountSpinner.getSelectedItem();
      if (account == null)       return false;
      mEditText.setAccountId(account.account_id);
      searchUsers(account.account_id,ParseUtils.parseString(mEditUserQuery.getText()),false);
      return true;
    }
  }
,true);
  queryEnterHandler.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      final ParcelableCredentials account=(ParcelableCredentials)mAccountSpinner.getSelectedItem();
      if (account == null)       return;
      mEditText.setAccountId(account.account_id);
      searchUsers(account.account_id,ParseUtils.parseString(s),true);
    }
  }
);
  mEditUserQuery.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      Utils.removeLineBreaks(s);
      mQueryTextChanged=s.length() == 0;
    }
  }
);
}
