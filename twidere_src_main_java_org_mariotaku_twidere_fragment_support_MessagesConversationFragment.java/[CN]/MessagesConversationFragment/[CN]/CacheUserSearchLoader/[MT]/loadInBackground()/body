{
  final String query=getQuery();
  if (TextUtils.isEmpty(query))   return Collections.emptyList();
  if (mFromCache) {
    final Context context=getContext();
    final ArrayList<ParcelableUser> cachedList=new ArrayList<>();
    final String queryEscaped=query.replace("_","^_");
    final Expression selection;
    final String[] selectionArgs;
    if (queryEscaped != null) {
      final SharedPreferences nicknamePrefs=context.getSharedPreferences(USER_NICKNAME_PREFERENCES_NAME,Context.MODE_PRIVATE);
      final long[] nicknameIds=Utils.getMatchedNicknameIds(query,nicknamePrefs);
      selection=Expression.or(Expression.likeRaw(new Column(CachedUsers.SCREEN_NAME),"?||'%'","^"),Expression.likeRaw(new Column(CachedUsers.NAME),"?||'%'","^"),Expression.in(new Column(CachedUsers.USER_ID),new RawItemArray(nicknameIds)));
      selectionArgs=new String[]{queryEscaped,queryEscaped};
    }
 else {
      selection=null;
      selectionArgs=null;
    }
    final String[] order={CachedUsers.LAST_SEEN,CachedUsers.SCREEN_NAME,CachedUsers.NAME};
    final boolean[] ascending={false,true,true};
    final OrderBy orderBy=new OrderBy(order,ascending);
    final Cursor c=context.getContentResolver().query(CachedUsers.CONTENT_URI,CachedUsers.BASIC_COLUMNS,selection != null ? selection.getSQL() : null,selectionArgs,orderBy.getSQL());
    final CachedIndices i=new CachedIndices(c);
    c.moveToFirst();
    while (!c.isAfterLast()) {
      cachedList.add(new ParcelableUser(c,i,-1));
      c.moveToNext();
    }
    c.close();
    return cachedList;
  }
  return super.loadInBackground();
}
