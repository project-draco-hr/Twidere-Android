{
  if (!omit_intent_extra && extras != null) {
    final ParcelableUser user=extras.getParcelable(EXTRA_USER);
    if (user != null) {
      final ContentValues values=ParcelableUser.makeCachedUserContentValues(user);
      resolver.delete(CachedUsers.CONTENT_URI,CachedUsers.USER_ID + " = " + user.id,null);
      resolver.insert(CachedUsers.CONTENT_URI,values);
      return new SingleResponse<ParcelableUser>(user,null);
    }
  }
  final Twitter twitter=getTwitterInstance(getContext(),account_id,true);
  if (twitter == null)   return new SingleResponse<ParcelableUser>(null,null);
  if (load_from_cache) {
    final String where=CachedUsers.USER_ID + " = " + user_id+ " OR "+ CachedUsers.SCREEN_NAME+ " = '"+ screen_name+ "'";
    final Cursor cur=resolver.query(CachedUsers.CONTENT_URI,CachedUsers.COLUMNS,where,null,null);
    final int count=cur.getCount();
    try {
      if (count > 0) {
        cur.moveToFirst();
        return new SingleResponse<ParcelableUser>(new ParcelableUser(cur,account_id),null);
      }
    }
  finally {
      cur.close();
    }
  }
  try {
    final User user=tryShowUser(twitter,user_id,screen_name);
    if (user == null)     return new SingleResponse<ParcelableUser>(null,null);
    final ContentValues values=makeCachedUserContentValues(user);
    final String where=CachedUsers.USER_ID + " = " + user.getId()+ " OR "+ CachedUsers.SCREEN_NAME+ " = ?";
    resolver.delete(CachedUsers.CONTENT_URI,where,new String[]{user.getScreenName()});
    resolver.insert(CachedUsers.CONTENT_URI,values);
    return new SingleResponse<ParcelableUser>(new ParcelableUser(user,account_id),null);
  }
 catch (  final TwitterException e) {
    return new SingleResponse<ParcelableUser>(null,e);
  }
}
