{
  final Context context=getContext();
  final ContentResolver resolver=context.getContentResolver();
  final AccountKey accountKey=mAccountId;
  int accountColor=DataStoreUtils.getAccountColor(context,accountKey);
  if (!mOmitIntentExtra && mExtras != null) {
    final ParcelableUser user=mExtras.getParcelable(EXTRA_USER);
    if (user != null) {
      final ContentValues values=ParcelableUserValuesCreator.create(user);
      resolver.insert(CachedUsers.CONTENT_URI,values);
      user.account_color=accountColor;
      return SingleResponse.getInstance(user);
    }
  }
  final Twitter twitter=TwitterAPIFactory.getTwitterInstance(context,accountKey,true);
  if (twitter == null)   return SingleResponse.getInstance();
  if (mLoadFromCache) {
    final Expression where;
    final String[] whereArgs;
    if (mUserId > 0) {
      where=Expression.equals(CachedUsers.USER_ID,mUserId);
      whereArgs=null;
    }
 else {
      where=Expression.equalsArgs(CachedUsers.SCREEN_NAME);
      whereArgs=new String[]{mScreenName};
    }
    final Cursor cur=resolver.query(CachedUsers.CONTENT_URI,CachedUsers.COLUMNS,where.getSQL(),whereArgs,null);
    if (cur != null) {
      try {
        if (cur.moveToFirst()) {
          final ParcelableUserCursorIndices indices=new ParcelableUserCursorIndices(cur);
          final ParcelableUser user=indices.newObject(cur);
          user.account_key=accountKey;
          user.account_color=accountColor;
          return SingleResponse.getInstance(user);
        }
      }
  finally {
        cur.close();
      }
    }
  }
  try {
    final User twitterUser=TwitterWrapper.tryShowUser(twitter,mUserId,mScreenName);
    final ContentValues cachedUserValues=createCachedUser(twitterUser);
    final long userId=twitterUser.getId();
    resolver.insert(CachedUsers.CONTENT_URI,cachedUserValues);
    final ParcelableUser user=ParcelableUserUtils.fromUser(twitterUser,accountKey);
    if (Utils.isMyAccount(context,user.id,user.user_host)) {
      final ContentValues accountValues=new ContentValues();
      accountValues.put(Accounts.NAME,user.name);
      accountValues.put(Accounts.SCREEN_NAME,user.screen_name);
      accountValues.put(Accounts.PROFILE_IMAGE_URL,user.profile_image_url);
      accountValues.put(Accounts.PROFILE_BANNER_URL,user.profile_banner_url);
      accountValues.put(Accounts.ACCOUNT_USER,JsonSerializer.serialize(user,ParcelableUser.class));
      accountValues.put(Accounts.ACCOUNT_KEY,String.valueOf(new AccountKey(user.id,user.user_host)));
      final String accountWhere=Expression.equals(Accounts.ACCOUNT_KEY,userId).getSQL();
      resolver.update(Accounts.CONTENT_URI,accountValues,accountWhere,null);
    }
    user.account_color=accountColor;
    return SingleResponse.getInstance(user);
  }
 catch (  final TwitterException e) {
    Log.w(LOGTAG,e);
    return SingleResponse.getInstance(e);
  }
}
