{
  long[] deleteBound=new long[2];
  Arrays.fill(deleteBound,-1);
  List<ContentValues> valuesList=new ArrayList<>();
  for (  Activity activity : activities) {
    final ParcelableActivity parcelableActivity=ParcelableActivityUtils.fromActivity(activity,accountId,false);
    if (deleteBound[0] < 0) {
      deleteBound[0]=parcelableActivity.min_position;
    }
 else {
      deleteBound[0]=Math.min(deleteBound[0],parcelableActivity.min_position);
    }
    if (deleteBound[1] < 0) {
      deleteBound[1]=parcelableActivity.max_position;
    }
 else {
      deleteBound[1]=Math.max(deleteBound[1],parcelableActivity.max_position);
    }
    final ContentValues values=ContentValuesCreator.createActivity(parcelableActivity);
    values.put(Statuses.INSERTED_DATE,System.currentTimeMillis());
    valuesList.add(values);
  }
  if (deleteBound[0] > 0 && deleteBound[1] > 0) {
    Expression where=Expression.and(Expression.equals(Activities.ACCOUNT_ID,accountId),Expression.greaterEquals(Activities.MIN_POSITION,deleteBound[0]),Expression.lesserEquals(Activities.MAX_POSITION,deleteBound[1]));
    int rowsDeleted=cr.delete(getContentUri(),where.getSQL(),null);
    boolean insertGap=valuesList.size() >= loadItemLimit && !noItemsBefore && rowsDeleted <= 0;
    if (insertGap && !valuesList.isEmpty()) {
      valuesList.get(valuesList.size() - 1).put(Activities.IS_GAP,true);
    }
  }
  ContentResolverUtils.bulkInsert(cr,getContentUri(),valuesList);
}
