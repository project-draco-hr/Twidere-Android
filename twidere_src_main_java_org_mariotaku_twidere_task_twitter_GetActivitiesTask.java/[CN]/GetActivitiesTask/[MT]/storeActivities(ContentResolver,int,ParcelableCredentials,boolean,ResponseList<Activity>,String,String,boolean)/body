{
  long[] deleteBound=new long[2];
  Arrays.fill(deleteBound,-1);
  List<ContentValues> valuesList=new ArrayList<>();
  int minIdx=-1;
  long minPositionKey=-1;
  if (!activities.isEmpty()) {
    final long firstSortId=activities.get(0).getCreatedAt().getTime();
    final long lastSortId=activities.get(activities.size() - 1).getCreatedAt().getTime();
    final long sortDiff=firstSortId - lastSortId;
    for (int i=0, j=activities.size(); i < j; i++) {
      Activity item=activities.get(i);
      final ParcelableActivity activity=ParcelableActivityUtils.fromActivity(item,credentials.account_key,false);
      activity.position_key=GetStatusesTask.getPositionKey(activity.timestamp,activity.timestamp,lastSortId,sortDiff,i,j);
      if (deleteBound[0] < 0) {
        deleteBound[0]=activity.min_sort_position;
      }
 else {
        deleteBound[0]=Math.min(deleteBound[0],activity.min_sort_position);
      }
      if (deleteBound[1] < 0) {
        deleteBound[1]=activity.max_sort_position;
      }
 else {
        deleteBound[1]=Math.max(deleteBound[1],activity.max_sort_position);
      }
      if (minIdx == -1 || item.compareTo(activities.get(minIdx)) < 0) {
        minIdx=i;
        minPositionKey=activity.position_key;
      }
      activity.inserted_date=System.currentTimeMillis();
      final ContentValues values=ContentValuesCreator.createActivity(activity,credentials,userColorNameManager);
      valuesList.add(values);
    }
  }
  int olderCount=-1;
  if (minPositionKey > 0) {
    olderCount=DataStoreUtils.getActivitiesCount(context,getContentUri(),minPositionKey,Activities.POSITION_KEY,false,credentials.account_key);
  }
  final Uri writeUri=UriUtils.appendQueryParameters(getContentUri(),QUERY_PARAM_NOTIFY,notify);
  if (deleteBound[0] > 0 && deleteBound[1] > 0) {
    final Expression where=Expression.and(Expression.equalsArgs(Activities.ACCOUNT_KEY),Expression.greaterEqualsArgs(Activities.MIN_SORT_POSITION),Expression.lesserEqualsArgs(Activities.MAX_SORT_POSITION));
    final String[] whereArgs={credentials.account_key.toString(),String.valueOf(deleteBound[0]),String.valueOf(deleteBound[1])};
    int rowsDeleted=cr.delete(writeUri,where.getSQL(),whereArgs);
    boolean insertGap=valuesList.size() >= loadItemLimit && !noItemsBefore && olderCount > 0 && rowsDeleted <= 0 && activities.size() > loadItemLimit / 2;
    if (insertGap && !valuesList.isEmpty()) {
      valuesList.get(valuesList.size() - 1).put(Activities.IS_GAP,true);
    }
  }
  ContentResolverUtils.bulkInsert(cr,writeUri,valuesList);
  if (maxId != null && sinceId == null) {
    final ContentValues noGapValues=new ContentValues();
    noGapValues.put(Activities.IS_GAP,false);
    final String noGapWhere=Expression.and(Expression.equalsArgs(Activities.ACCOUNT_KEY),Expression.equalsArgs(Activities.MIN_REQUEST_POSITION),Expression.equalsArgs(Activities.MAX_REQUEST_POSITION)).getSQL();
    final String[] noGapWhereArgs={credentials.toString(),maxId,maxId};
    cr.update(writeUri,noGapValues,noGapWhere,noGapWhereArgs);
  }
}
