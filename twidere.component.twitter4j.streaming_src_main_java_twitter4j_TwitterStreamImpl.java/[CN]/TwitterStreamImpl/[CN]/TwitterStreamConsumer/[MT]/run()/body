{
  int timeToSleep=NO_WAIT;
  boolean connected=false;
  while (!closed) {
    try {
      if (!closed && null == stream) {
        logger.info("Establishing connection.");
        setStatus("[Establishing connection]");
        stream=(StatusStreamBase)getStream();
        connected=true;
        logger.info("Connection established.");
        for (        final ConnectionLifeCycleListener listener : lifeCycleListeners) {
          try {
            listener.onConnect();
          }
 catch (          final Exception e) {
            logger.warn(e.getMessage());
          }
        }
        timeToSleep=NO_WAIT;
        logger.info("Receiving status stream.");
        setStatus("[Receiving stream]");
        while (!closed) {
          try {
            stream.next(streamListeners,rawStreamListeners);
          }
 catch (          final IllegalStateException ise) {
            logger.warn(ise.getMessage());
            break;
          }
catch (          final TwitterException e) {
            logger.info(e.getMessage());
            stream.onException(e,streamListeners,rawStreamListeners);
            throw e;
          }
catch (          final Exception e) {
            logger.info(e.getMessage());
            stream.onException(e,streamListeners,rawStreamListeners);
            closed=true;
            break;
          }
        }
      }
    }
 catch (    final TwitterException te) {
      logger.info(te.getMessage());
      if (!closed) {
        if (NO_WAIT == timeToSleep) {
          if (te.getStatusCode() == FORBIDDEN) {
            logger.warn("This account is not in required role. ",te.getMessage());
            closed=true;
            for (            final StreamListener statusListener : streamListeners) {
              statusListener.onException(te);
            }
            break;
          }
          if (te.getStatusCode() == NOT_ACCEPTABLE) {
            logger.warn("Parameter not accepted with the role. ",te.getMessage());
            closed=true;
            for (            final StreamListener statusListener : streamListeners) {
              statusListener.onException(te);
            }
            break;
          }
          connected=false;
          for (          final ConnectionLifeCycleListener listener : lifeCycleListeners) {
            try {
              listener.onDisconnect();
            }
 catch (            final Exception e) {
              logger.warn(e.getMessage());
            }
          }
          if (te.getStatusCode() > 200) {
            timeToSleep=HTTP_ERROR_INITIAL_WAIT;
          }
 else           if (0 == timeToSleep) {
            timeToSleep=TCP_ERROR_INITIAL_WAIT;
          }
        }
        if (te.getStatusCode() > 200 && timeToSleep < HTTP_ERROR_INITIAL_WAIT) {
          timeToSleep=HTTP_ERROR_INITIAL_WAIT;
        }
        if (connected) {
          for (          final ConnectionLifeCycleListener listener : lifeCycleListeners) {
            try {
              listener.onDisconnect();
            }
 catch (            final Exception e) {
              logger.warn(e.getMessage());
            }
          }
        }
        for (        final StreamListener statusListener : streamListeners) {
          statusListener.onException(te);
        }
        if (!closed) {
          logger.info("Waiting for " + timeToSleep + " milliseconds");
          setStatus("[Waiting for " + timeToSleep + " milliseconds]");
          try {
            Thread.sleep(timeToSleep);
          }
 catch (          final InterruptedException ignore) {
          }
          timeToSleep=Math.min(timeToSleep * 2,te.getStatusCode() > 200 ? HTTP_ERROR_WAIT_CAP : TCP_ERROR_WAIT_CAP);
        }
        stream=null;
        logger.debug(te.getMessage());
        connected=false;
      }
    }
  }
  if (stream != null && connected) {
    try {
      stream.close();
    }
 catch (    final IOException ignore) {
    }
catch (    final Exception e) {
      e.printStackTrace();
      logger.warn(e.getMessage());
    }
 finally {
      for (      final ConnectionLifeCycleListener listener : lifeCycleListeners) {
        try {
          listener.onDisconnect();
        }
 catch (        final Exception e) {
          logger.warn(e.getMessage());
        }
      }
    }
  }
  for (  final ConnectionLifeCycleListener listener : lifeCycleListeners) {
    try {
      listener.onCleanUp();
    }
 catch (    final Exception e) {
      logger.warn(e.getMessage());
    }
  }
}
