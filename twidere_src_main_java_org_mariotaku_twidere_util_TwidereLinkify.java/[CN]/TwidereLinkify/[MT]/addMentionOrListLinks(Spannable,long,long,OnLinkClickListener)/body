{
  boolean hasMatches=false;
  final Matcher matcher=Regex.VALID_MENTION_OR_LIST.matcher(spannable);
  while (matcher.find()) {
    final int start=matcherStart(matcher,Regex.VALID_MENTION_OR_LIST_GROUP_AT);
    final int username_end=matcherEnd(matcher,Regex.VALID_MENTION_OR_LIST_GROUP_USERNAME);
    final int listStart=matcherStart(matcher,Regex.VALID_MENTION_OR_LIST_GROUP_LIST);
    final int listEnd=matcherEnd(matcher,Regex.VALID_MENTION_OR_LIST_GROUP_LIST);
    final String username=matcherGroup(matcher,Regex.VALID_MENTION_OR_LIST_GROUP_USERNAME);
    final String list=matcherGroup(matcher,Regex.VALID_MENTION_OR_LIST_GROUP_LIST);
    applyLink(username,start,username_end,spannable,accountId,extraId,LINK_TYPE_MENTION,false,listener);
    if (listStart >= 0 && listEnd >= 0) {
      applyLink(String.format("%s/%s",username,list.substring(list.startsWith("/") ? 1 : 0)),listStart,listEnd,spannable,accountId,extraId,LINK_TYPE_LIST,false,listener);
    }
    hasMatches=true;
  }
  final URLSpan[] spans=spannable.getSpans(0,spannable.length(),URLSpan.class);
  for (  final URLSpan span : spans) {
    final Matcher m=PATTERN_TWITTER_LIST.matcher(span.getURL());
    if (m.matches()) {
      final int start=spannable.getSpanStart(span);
      final int end=spannable.getSpanEnd(span);
      final String screenName=matcherGroup(m,GROUP_ID_TWITTER_LIST_SCREEN_NAME);
      final String listName=matcherGroup(m,GROUP_ID_TWITTER_LIST_LIST_NAME);
      spannable.removeSpan(span);
      applyLink(screenName + "/" + listName,start,end,spannable,accountId,extraId,LINK_TYPE_LIST,false,listener);
      hasMatches=true;
    }
  }
  return hasMatches;
}
