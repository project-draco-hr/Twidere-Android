{
  boolean hasMatches=false;
  final Matcher matcher=Regex.VALID_MENTION_OR_LIST.matcher(spannable);
  while (matcher.find()) {
    final int start=matcherStart(matcher,Regex.VALID_MENTION_OR_LIST_GROUP_AT);
    final int usernameEnd=matcherEnd(matcher,Regex.VALID_MENTION_OR_LIST_GROUP_USERNAME);
    final int listStart=matcherStart(matcher,Regex.VALID_MENTION_OR_LIST_GROUP_LIST);
    final int listEnd=matcherEnd(matcher,Regex.VALID_MENTION_OR_LIST_GROUP_LIST);
    final String username=matcherGroup(matcher,Regex.VALID_MENTION_OR_LIST_GROUP_USERNAME);
    final String list=matcherGroup(matcher,Regex.VALID_MENTION_OR_LIST_GROUP_LIST);
    applyLink(username,null,start,usernameEnd,spannable,accountKey,extraId,LINK_TYPE_MENTION,false,highlightOption,listener);
    if (listStart >= 0 && listEnd >= 0 && list != null && username != null) {
      StringBuilder sb=new StringBuilder(username);
      if (!list.startsWith("/")) {
        sb.append("/");
      }
      sb.append(list);
      applyLink(sb.toString(),null,listStart,listEnd,spannable,accountKey,extraId,LINK_TYPE_LIST,false,highlightOption,listener);
    }
    hasMatches=true;
  }
  final URLSpan[] spans=spannable.getSpans(0,spannable.length(),URLSpan.class);
  for (  final URLSpan span : spans) {
    final Matcher m=PATTERN_TWITTER_LIST.matcher(span.getURL());
    if (m.matches()) {
      final int start=spannable.getSpanStart(span);
      final int end=spannable.getSpanEnd(span);
      final String screenName=matcherGroup(m,GROUP_ID_TWITTER_LIST_SCREEN_NAME);
      final String listName=matcherGroup(m,GROUP_ID_TWITTER_LIST_LIST_NAME);
      spannable.removeSpan(span);
      applyLink(screenName + "/" + listName,null,start,end,spannable,accountKey,extraId,LINK_TYPE_LIST,false,highlightOption,listener);
      hasMatches=true;
    }
  }
  return hasMatches;
}
