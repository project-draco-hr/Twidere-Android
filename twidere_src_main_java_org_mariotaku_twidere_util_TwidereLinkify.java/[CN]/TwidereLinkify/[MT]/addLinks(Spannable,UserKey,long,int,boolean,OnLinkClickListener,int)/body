{
switch (type) {
case LINK_TYPE_MENTION:
{
      addMentionOrListLinks(string,accountKey,extraId,highlightOption,listener);
      break;
    }
case LINK_TYPE_HASHTAG:
{
    addHashtagLinks(string,accountKey,extraId,listener,highlightOption);
    break;
  }
case LINK_TYPE_ENTITY_URL:
{
  final int length=string.length();
  final URLSpan[] spans=string.getSpans(0,length,URLSpan.class);
  for (  final URLSpan span : spans) {
    int start=string.getSpanStart(span), end=string.getSpanEnd(span);
    if (span instanceof TwidereURLSpan || start < 0 || end > length || start > end) {
      continue;
    }
    string.removeSpan(span);
    String url=span.getURL();
    if (accountKey != null && USER_TYPE_FANFOU_COM.equals(accountKey.getHost())) {
      if (url.startsWith("/")) {
        url="http://fanfou.com" + url;
      }
      if ("fanfou.com".equals(UriUtils.getAuthority(url)) && start > 0) {
        final char ch=string.charAt(start - 1);
        if (isAtSymbol(ch)) {
          start=start - 1;
        }
 else         if (isHashSymbol(ch) && end < length - 1 && isHashSymbol(string.charAt(end))) {
          start=start - 1;
          end=end + 1;
        }
      }
    }
    applyLink(url,String.valueOf(string.subSequence(start,end)),start,end,string,accountKey,extraId,LINK_TYPE_ENTITY_URL,sensitive,highlightOption,listener);
  }
  break;
}
case LINK_TYPE_LINK_IN_TEXT:
{
final List<Extractor.Entity> urls=mExtractor.extractURLsWithIndices(ParseUtils.parseString(string));
for (final Extractor.Entity entity : urls) {
  final int start=entity.getStart(), end=entity.getEnd();
  if (entity.getType() != Extractor.Entity.Type.URL || string.getSpans(start,end,URLSpan.class).length > 0) {
    continue;
  }
  applyLink(entity.getValue(),null,start,end,string,accountKey,extraId,LINK_TYPE_LINK_IN_TEXT,sensitive,highlightOption,listener);
}
break;
}
case LINK_TYPE_STATUS:
{
if (accountKey == null || !USER_TYPE_TWITTER_COM.equals(accountKey.getHost())) {
break;
}
final int length=string.length();
final URLSpan[] spans=string.getSpans(0,length,URLSpan.class);
for (final URLSpan span : spans) {
final Matcher matcher=PATTERN_TWITTER_STATUS.matcher(span.getURL());
if (matcher.matches()) {
  final int start=string.getSpanStart(span);
  final int end=string.getSpanEnd(span);
  final String url=matcherGroup(matcher,GROUP_ID_TWITTER_STATUS_STATUS_ID);
  string.removeSpan(span);
  applyLink(url,null,start,end,string,accountKey,extraId,LINK_TYPE_STATUS,sensitive,highlightOption,listener);
}
}
break;
}
case LINK_TYPE_CASHTAG:
{
addCashtagLinks(string,accountKey,extraId,listener,highlightOption);
break;
}
}
}
