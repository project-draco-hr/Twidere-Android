{
  if (imageFile == null || !imageFile.isFile())   return false;
  final String path=imageFile.getAbsolutePath();
  final BitmapFactory.Options o=new BitmapFactory.Options();
  o.inJustDecodeBounds=true;
  BitmapFactory.decodeFile(path,o);
  if (o.outWidth <= 0 || o.outHeight <= 0)   return false;
  o.inJustDecodeBounds=false;
  if (o.outWidth > TwidereConstants.TWITTER_MAX_IMAGE_WIDTH || o.outHeight > TwidereConstants.TWITTER_MAX_IMAGE_HEIGHT) {
    o.inSampleSize=Utils.calculateInSampleSize(o.outWidth,o.outHeight,TwidereConstants.TWITTER_MAX_IMAGE_WIDTH,TwidereConstants.TWITTER_MAX_IMAGE_HEIGHT);
    FileOutputStream fos=null;
    try {
      final Bitmap b=BitmapDecodeHelper.decode(path,o);
      final Bitmap.CompressFormat format=Utils.getBitmapCompressFormatByMimetype(o.outMimeType,Bitmap.CompressFormat.PNG);
      fos=new FileOutputStream(imageFile);
      return b.compress(format,quality,fos);
    }
 catch (    final OutOfMemoryError e) {
      return false;
    }
catch (    final FileNotFoundException e) {
    }
catch (    final IllegalArgumentException e) {
      return false;
    }
 finally {
      IoUtils.closeSilently(fos);
    }
  }
 else   if (imageFile.length() > TwidereConstants.TWITTER_MAX_IMAGE_SIZE) {
    FileOutputStream fos=null;
    try {
      final Bitmap b=BitmapDecodeHelper.decode(path,o);
      fos=new FileOutputStream(imageFile);
      return b.compress(Bitmap.CompressFormat.JPEG,80,fos);
    }
 catch (    final OutOfMemoryError e) {
      return false;
    }
catch (    final FileNotFoundException e) {
    }
 finally {
      IoUtils.closeSilently(fos);
    }
  }
  return true;
}
