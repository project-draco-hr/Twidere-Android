{
  final MediaLoaderWrapper loader=adapter.getMediaLoader();
  final AsyncTwitterWrapper twitter=adapter.getTwitterWrapper();
  final TwidereLinkify linkify=adapter.getTwidereLinkify();
  final UserColorNameManager manager=adapter.getUserColorNameManager();
  final Context context=adapter.getContext();
  final boolean nameFirst=adapter.isNameFirst();
  final long reply_count=status.reply_count;
  final long retweet_count;
  final long favorite_count;
  if (status.retweet_id > 0) {
    final String retweetedBy=manager.getDisplayName(status.retweeted_by_user_id,status.retweeted_by_user_name,status.retweeted_by_user_screen_name,nameFirst,false);
    replyRetweetView.setText(context.getString(R.string.name_retweeted,retweetedBy));
    replyRetweetIcon.setImageResource(R.drawable.ic_activity_action_retweet);
    replyRetweetView.setVisibility(View.VISIBLE);
    replyRetweetIcon.setVisibility(View.VISIBLE);
  }
 else   if (status.in_reply_to_status_id > 0 && status.in_reply_to_user_id > 0 && displayInReplyTo) {
    final String inReplyTo=manager.getDisplayName(status.in_reply_to_user_id,status.in_reply_to_name,status.in_reply_to_screen_name,nameFirst,false);
    replyRetweetView.setText(context.getString(R.string.in_reply_to_name,inReplyTo));
    replyRetweetIcon.setImageResource(R.drawable.ic_activity_action_reply);
    replyRetweetView.setVisibility(View.VISIBLE);
    replyRetweetIcon.setVisibility(View.VISIBLE);
  }
 else {
    replyRetweetView.setVisibility(View.GONE);
    replyRetweetIcon.setVisibility(View.GONE);
  }
  final int typeIconRes;
  if (status.is_quote) {
    quotedPrimaryNameView.setText(manager.getUserNickname(status.user_id,status.user_name,false));
    quotedSecondaryNameView.setText("@" + status.user_screen_name);
    timeView.setTime(status.quote_timestamp);
    primaryNameView.setText(manager.getUserNickname(status.quoted_by_user_id,status.quoted_by_user_name,false));
    secondaryNameView.setText("@" + status.quoted_by_user_screen_name);
    final int idx=status.quote_text_unescaped.lastIndexOf(" twitter.com");
    if (translation != null) {
      quoteTextView.setText(translation.getText());
    }
 else     if (adapter.getLinkHighlightingStyle() == VALUE_LINK_HIGHLIGHT_OPTION_CODE_NONE) {
      final String text=status.quote_text_unescaped;
      quoteTextView.setText(idx > 0 ? text.substring(0,idx) : text);
    }
 else {
      final Spanned text=Html.fromHtml(status.quote_text_html);
      quoteTextView.setText(idx > 0 ? text.subSequence(0,idx) : text);
      linkify.applyAllLinks(quoteTextView,status.account_id,getLayoutPosition(),status.is_possibly_sensitive,adapter.getLinkHighlightingStyle());
      quoteTextView.setMovementMethod(null);
    }
    quotedNameContainer.setVisibility(View.VISIBLE);
    quoteTextView.setVisibility(View.VISIBLE);
    quoteIndicator.setVisibility(View.VISIBLE);
    quoteIndicator.setColor(manager.getUserColor(status.user_id,false));
    if (adapter.isProfileImageEnabled()) {
      profileTypeView.setVisibility(View.VISIBLE);
      profileImageView.setVisibility(View.VISIBLE);
      loader.displayProfileImage(profileImageView,status.quoted_by_user_profile_image);
      typeIconRes=getUserTypeIconRes(status.quoted_by_user_is_verified,status.quoted_by_user_is_protected);
    }
 else {
      profileTypeView.setVisibility(View.GONE);
      profileImageView.setVisibility(View.GONE);
      loader.cancelDisplayTask(profileImageView);
      typeIconRes=0;
    }
    itemContent.drawStart(manager.getUserColor(status.quoted_by_user_id,false),manager.getUserColor(status.user_id,false));
  }
 else {
    primaryNameView.setText(manager.getUserNickname(status.user_id,status.user_name,false));
    secondaryNameView.setText("@" + status.user_screen_name);
    if (status.is_retweet) {
      timeView.setTime(status.retweet_timestamp);
    }
 else {
      timeView.setTime(status.timestamp);
    }
    quotedNameContainer.setVisibility(View.GONE);
    quoteTextView.setVisibility(View.GONE);
    quoteIndicator.setVisibility(View.GONE);
    if (adapter.isProfileImageEnabled()) {
      profileImageView.setVisibility(View.VISIBLE);
      final String user_profile_image_url=status.user_profile_image_url;
      loader.displayProfileImage(profileImageView,user_profile_image_url);
      typeIconRes=getUserTypeIconRes(status.user_is_verified,status.user_is_protected);
    }
 else {
      profileTypeView.setVisibility(View.GONE);
      profileImageView.setVisibility(View.GONE);
      loader.cancelDisplayTask(profileImageView);
      typeIconRes=0;
    }
    if (status.is_retweet) {
      itemContent.drawStart(manager.getUserColor(status.retweeted_by_user_id,false),manager.getUserColor(status.user_id,false));
    }
 else {
      itemContent.drawStart(manager.getUserColor(status.user_id,false));
    }
  }
  if (typeIconRes != 0) {
    profileTypeView.setImageResource(typeIconRes);
    profileTypeView.setVisibility(View.VISIBLE);
  }
 else {
    profileTypeView.setImageDrawable(null);
    profileTypeView.setVisibility(View.GONE);
  }
  if (adapter.shouldShowAccountsColor()) {
    itemContent.drawEnd(Utils.getAccountColor(context,status.account_id));
  }
 else {
    itemContent.drawEnd();
  }
  if (adapter.isMediaPreviewEnabled()) {
    mediaPreview.setStyle(adapter.getMediaPreviewStyle());
    final boolean hasMedia=status.media != null && status.media.length > 0;
    if (hasMedia && (adapter.isSensitiveContentEnabled() || !status.is_possibly_sensitive)) {
      mediaPreview.setVisibility(View.VISIBLE);
      mediaPreview.displayMedia(status.media,loader,status.account_id,this,adapter.getMediaLoadingHandler());
    }
 else {
      mediaPreview.setVisibility(View.GONE);
    }
  }
 else {
    mediaPreview.setVisibility(View.GONE);
  }
  if (!status.is_quote && translation != null) {
    textView.setText(translation.getText());
  }
 else   if (adapter.getLinkHighlightingStyle() == VALUE_LINK_HIGHLIGHT_OPTION_CODE_NONE) {
    textView.setText(status.text_unescaped);
  }
 else {
    textView.setText(Html.fromHtml(status.text_html));
    linkify.applyAllLinks(textView,status.account_id,getLayoutPosition(),status.is_possibly_sensitive,adapter.getLinkHighlightingStyle());
    textView.setMovementMethod(null);
  }
  final Locale locale=Locale.getDefault();
  if (reply_count > 0) {
    replyCountView.setText(Utils.getLocalizedNumber(locale,reply_count));
  }
 else {
    replyCountView.setText(null);
  }
  if (twitter.isDestroyingStatus(status.account_id,status.my_retweet_id)) {
    retweetCountView.setActivated(false);
    retweet_count=Math.max(0,status.retweet_count - 1);
  }
 else {
    final boolean creatingRetweet=twitter.isCreatingRetweet(status.account_id,status.id);
    retweetCountView.setActivated(creatingRetweet || Utils.isMyRetweet(status.account_id,status.retweeted_by_user_id,status.my_retweet_id));
    retweet_count=status.retweet_count + (creatingRetweet ? 1 : 0);
  }
  if (retweet_count > 0) {
    retweetCountView.setText(Utils.getLocalizedNumber(locale,retweet_count));
  }
 else {
    retweetCountView.setText(null);
  }
  if (twitter.isDestroyingFavorite(status.account_id,status.id)) {
    favoriteCountView.setActivated(false);
    favorite_count=Math.max(0,status.favorite_count - 1);
  }
 else {
    final boolean creatingFavorite=twitter.isCreatingFavorite(status.account_id,status.id);
    favoriteCountView.setActivated(creatingFavorite || status.is_favorite);
    favorite_count=status.favorite_count + (creatingFavorite ? 1 : 0);
  }
  if (favorite_count > 0) {
    favoriteCountView.setText(Utils.getLocalizedNumber(locale,favorite_count));
  }
 else {
    favoriteCountView.setText(null);
  }
  if (shouldDisplayExtraType) {
    displayExtraTypeIcon(status.card_name,status.media,status.location,status.place_full_name,status.is_possibly_sensitive);
  }
 else {
    extraTypeView.setVisibility(View.GONE);
  }
}
