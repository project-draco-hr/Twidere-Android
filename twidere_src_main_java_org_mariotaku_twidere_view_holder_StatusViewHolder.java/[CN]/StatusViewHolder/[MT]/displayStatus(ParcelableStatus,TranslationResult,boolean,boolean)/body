{
  final Context context=adapter.getContext();
  final MediaLoaderWrapper loader=adapter.getImageLoader();
  final ImageLoadingHandler handler=adapter.getImageLoadingHandler();
  final AsyncTwitterWrapper twitter=adapter.getTwitterWrapper();
  final TwidereLinkify linkify=adapter.getTwidereLinkify();
  final boolean displayProfileImage=adapter.isProfileImageEnabled();
  final boolean displayMediaPreview=adapter.isMediaPreviewEnabled();
  final boolean displayAccountsColor=adapter.shouldShowAccountsColor();
  final boolean nameFirst=adapter.isNameFirst();
  final int profileImageStyle=adapter.getProfileImageStyle();
  final int mediaPreviewStyle=adapter.getMediaPreviewStyle();
  final int linkHighlightingStyle=adapter.getLinkHighlightingStyle();
  final ParcelableMedia[] media=status.media;
  replyRetweetIcon.setColorFilter(replyRetweetView.getCurrentTextColor(),Mode.SRC_ATOP);
  if (status.retweet_id > 0) {
    replyRetweetView.setVisibility(View.VISIBLE);
    replyRetweetIcon.setVisibility(View.VISIBLE);
    final String retweetedBy=UserColorNameUtils.getDisplayName(context,status.retweeted_by_id,status.retweeted_by_name,status.retweeted_by_screen_name,nameFirst);
    replyRetweetView.setText(context.getString(R.string.name_retweeted,retweetedBy));
    replyRetweetIcon.setImageResource(R.drawable.ic_activity_action_retweet);
  }
 else   if (status.in_reply_to_status_id > 0 && status.in_reply_to_user_id > 0 && displayInReplyTo) {
    replyRetweetView.setVisibility(View.VISIBLE);
    replyRetweetIcon.setVisibility(View.VISIBLE);
    final String inReplyTo=UserColorNameUtils.getDisplayName(context,status.in_reply_to_user_id,status.in_reply_to_name,status.in_reply_to_screen_name,nameFirst);
    replyRetweetView.setText(context.getString(R.string.in_reply_to_name,inReplyTo));
    replyRetweetIcon.setImageResource(R.drawable.ic_activity_action_reply);
  }
 else {
    replyRetweetView.setVisibility(View.GONE);
    replyRetweetIcon.setVisibility(View.GONE);
    replyRetweetView.setText(null);
  }
  final int typeIconRes=getUserTypeIconRes(status.user_is_verified,status.user_is_protected);
  if (typeIconRes != 0) {
    profileTypeView.setImageResource(typeIconRes);
    profileTypeView.setVisibility(View.VISIBLE);
  }
 else {
    profileTypeView.setImageDrawable(null);
    profileTypeView.setVisibility(View.GONE);
  }
  nameView.setText(status.user_name);
  screenNameView.setText("@" + status.user_screen_name);
  timeView.setTime(status.timestamp);
  final int userColor=UserColorNameUtils.getUserColor(context,status.user_id);
  itemContent.drawStart(userColor);
  if (displayAccountsColor) {
    itemContent.drawEnd(Utils.getAccountColor(context,status.account_id));
  }
 else {
    itemContent.drawEnd();
  }
  profileImageView.setStyle(profileImageStyle);
  if (displayProfileImage) {
    profileTypeView.setVisibility(View.VISIBLE);
    profileImageView.setVisibility(View.VISIBLE);
    loader.displayProfileImage(profileImageView,status.user_profile_image_url);
  }
 else {
    profileTypeView.setVisibility(View.GONE);
    profileImageView.setVisibility(View.GONE);
    loader.cancelDisplayTask(profileImageView);
  }
  if (displayMediaPreview) {
    mediaPreviewContainer.setStyle(mediaPreviewStyle);
    if (media != null && media.length > 0) {
      mediaPreviewContainer.setVisibility(View.VISIBLE);
    }
 else {
      mediaPreviewContainer.setVisibility(View.GONE);
    }
    mediaPreviewContainer.displayMedia(media,loader,status.account_id,this,handler);
  }
 else {
    mediaPreviewContainer.setVisibility(View.GONE);
  }
  if (translation != null) {
    textView.setText(translation.getText());
  }
 else   if (linkHighlightingStyle == VALUE_LINK_HIGHLIGHT_OPTION_CODE_NONE) {
    textView.setText(status.text_unescaped);
  }
 else {
    textView.setText(Html.fromHtml(status.text_html));
    linkify.applyAllLinks(textView,status.account_id,getAdapterPosition(),status.is_possibly_sensitive);
  }
  if (status.reply_count > 0) {
    replyCountView.setText(Utils.getLocalizedNumber(Locale.getDefault(),status.reply_count));
  }
 else {
    replyCountView.setText(null);
  }
  final long retweet_count;
  if (twitter.isDestroyingStatus(status.account_id,status.my_retweet_id)) {
    retweetCountView.setActivated(false);
    retweet_count=Math.max(0,status.favorite_count - 1);
  }
 else {
    final boolean creatingRetweet=twitter.isCreatingRetweet(status.account_id,status.id);
    retweetCountView.setActivated(creatingRetweet || Utils.isMyRetweet(status));
    retweet_count=status.retweet_count + (creatingRetweet ? 1 : 0);
  }
  if (retweet_count > 0) {
    retweetCountView.setText(Utils.getLocalizedNumber(Locale.getDefault(),retweet_count));
  }
 else {
    retweetCountView.setText(null);
  }
  retweetCountView.setEnabled(!status.user_is_protected);
  final long favorite_count;
  if (twitter.isDestroyingFavorite(status.account_id,status.id)) {
    favoriteCountView.setActivated(false);
    favorite_count=Math.max(0,status.favorite_count - 1);
  }
 else {
    final boolean creatingFavorite=twitter.isCreatingFavorite(status.account_id,status.id);
    favoriteCountView.setActivated(creatingFavorite || status.is_favorite);
    favorite_count=status.favorite_count + (creatingFavorite ? 1 : 0);
  }
  if (favorite_count > 0) {
    favoriteCountView.setText(Utils.getLocalizedNumber(Locale.getDefault(),favorite_count));
  }
 else {
    favoriteCountView.setText(null);
  }
  if (shouldDisplayExtraType) {
    displayExtraTypeIcon(status.card_name,status.media,status.location,status.place_full_name);
  }
 else {
    extraTypeView.setVisibility(View.GONE);
  }
}
