{
  final MediaLoaderWrapper loader=adapter.getMediaLoader();
  final AsyncTwitterWrapper twitter=adapter.getTwitterWrapper();
  final TwidereLinkify linkify=adapter.getTwidereLinkify();
  final Context context=adapter.getContext();
  final boolean nameFirst=adapter.isNameFirst();
  final long reply_count=cursor.getLong(indices.reply_count);
  final long retweet_count;
  final long favorite_count;
  final long account_id=cursor.getLong(indices.account_id);
  final long user_id=cursor.getLong(indices.user_id);
  final long status_id=cursor.getLong(indices.status_id);
  final long retweet_id=cursor.getLong(indices.retweet_id);
  final long my_retweet_id=cursor.getLong(indices.my_retweet_id);
  final long in_reply_to_status_id=cursor.getLong(indices.in_reply_to_status_id);
  final long in_reply_to_user_id=cursor.getLong(indices.in_reply_to_user_id);
  final String user_name=cursor.getString(indices.user_name);
  final String user_screen_name=cursor.getString(indices.user_screen_name);
  final String card_name=cursor.getString(indices.card_name);
  final String place_full_name=cursor.getString(indices.place_full_name);
  final boolean sensitive=cursor.getShort(indices.is_possibly_sensitive) == 1;
  final ParcelableMedia[] media=ParcelableMedia.fromSerializedJson(cursor.getString(indices.media));
  final ParcelableLocation location=ParcelableLocation.fromString(cursor.getString(indices.location));
  if (retweet_id > 0) {
    final long retweeted_by_id=cursor.getLong(indices.retweeted_by_user_id);
    final String retweeted_by_name=cursor.getString(indices.retweeted_by_user_name);
    final String retweeted_by_screen_name=cursor.getString(indices.retweeted_by_user_screen_name);
    final String retweetedBy=UserColorNameUtils.getDisplayName(context,retweeted_by_id,retweeted_by_name,retweeted_by_screen_name,nameFirst);
    replyRetweetView.setText(context.getString(R.string.name_retweeted,retweetedBy));
    replyRetweetIcon.setImageResource(R.drawable.ic_activity_action_retweet);
    replyRetweetView.setVisibility(View.VISIBLE);
    replyRetweetIcon.setVisibility(View.VISIBLE);
  }
 else   if (in_reply_to_status_id > 0 && in_reply_to_user_id > 0 && displayInReplyTo) {
    final String in_reply_to_name=cursor.getString(indices.in_reply_to_user_name);
    final String in_reply_to_screen_name=cursor.getString(indices.in_reply_to_user_screen_name);
    final String inReplyTo=UserColorNameUtils.getDisplayName(context,in_reply_to_user_id,in_reply_to_name,in_reply_to_screen_name,nameFirst);
    replyRetweetView.setText(context.getString(R.string.in_reply_to_name,inReplyTo));
    replyRetweetIcon.setImageResource(R.drawable.ic_activity_action_reply);
    replyRetweetView.setVisibility(View.VISIBLE);
    replyRetweetIcon.setVisibility(View.VISIBLE);
  }
 else {
    replyRetweetView.setVisibility(View.GONE);
    replyRetweetIcon.setVisibility(View.GONE);
  }
  final int typeIconRes;
  if (cursor.getShort(indices.is_quote) == 1) {
    quotedNameView.setText(user_name);
    quotedScreenNameView.setText("@" + user_screen_name);
    timeView.setTime(cursor.getLong(indices.quote_timestamp));
    nameView.setText(cursor.getString(indices.quoted_by_user_name));
    screenNameView.setText("@" + cursor.getString(indices.quoted_by_user_screen_name));
    final String quote_text_unescaped=cursor.getString(indices.quote_text_unescaped);
    final int idx=quote_text_unescaped.lastIndexOf(" twitter.com");
    if (adapter.getLinkHighlightingStyle() == VALUE_LINK_HIGHLIGHT_OPTION_CODE_NONE) {
      quoteTextView.setText(idx > 0 ? quote_text_unescaped.substring(0,idx) : quote_text_unescaped);
    }
 else {
      final Spanned text=Html.fromHtml(cursor.getString(indices.quote_text_html));
      quoteTextView.setText(idx > 0 ? text.subSequence(0,idx) : text);
      linkify.applyAllLinks(quoteTextView,account_id,getLayoutPosition(),cursor.getShort(indices.is_possibly_sensitive) == 1,adapter.getLinkHighlightingStyle());
      quoteTextView.setMovementMethod(null);
    }
    quotedNameContainer.setVisibility(View.VISIBLE);
    quoteTextView.setVisibility(View.VISIBLE);
    quoteIndicator.setVisibility(View.VISIBLE);
    quoteIndicator.setColor(UserColorNameUtils.getUserColor(context,user_id));
    if (adapter.isProfileImageEnabled()) {
      profileImageView.setVisibility(View.VISIBLE);
      loader.displayProfileImage(profileImageView,cursor.getString(indices.quoted_by_user_profile_image));
      typeIconRes=getUserTypeIconRes(cursor.getShort(indices.quoted_by_user_is_verified) == 1,cursor.getShort(indices.quoted_by_user_is_protected) == 1);
    }
 else {
      profileImageView.setVisibility(View.GONE);
      loader.cancelDisplayTask(profileImageView);
      typeIconRes=0;
    }
    final int userColor=UserColorNameUtils.getUserColor(context,cursor.getLong(indices.quoted_by_user_id));
    itemContent.drawStart(userColor);
  }
 else {
    nameView.setText(user_name);
    screenNameView.setText("@" + user_screen_name);
    if (retweet_id > 0) {
      timeView.setTime(cursor.getLong(indices.retweet_timestamp));
    }
 else {
      timeView.setTime(cursor.getLong(indices.status_timestamp));
    }
    quotedNameContainer.setVisibility(View.GONE);
    quoteTextView.setVisibility(View.GONE);
    quoteIndicator.setVisibility(View.GONE);
    if (adapter.isProfileImageEnabled()) {
      profileImageView.setVisibility(View.VISIBLE);
      final String user_profile_image_url=cursor.getString(indices.user_profile_image_url);
      loader.displayProfileImage(profileImageView,user_profile_image_url);
      typeIconRes=getUserTypeIconRes(cursor.getShort(indices.is_verified) == 1,cursor.getShort(indices.is_protected) == 1);
    }
 else {
      profileImageView.setVisibility(View.GONE);
      loader.cancelDisplayTask(profileImageView);
      typeIconRes=0;
    }
    final int userColor=UserColorNameUtils.getUserColor(context,user_id);
    itemContent.drawStart(userColor);
  }
  if (typeIconRes != 0) {
    profileTypeView.setImageResource(typeIconRes);
    profileTypeView.setVisibility(View.VISIBLE);
  }
 else {
    profileTypeView.setImageDrawable(null);
    profileTypeView.setVisibility(View.GONE);
  }
  if (adapter.shouldShowAccountsColor()) {
    itemContent.drawEnd(Utils.getAccountColor(context,account_id));
  }
 else {
    itemContent.drawEnd();
  }
  if (adapter.isMediaPreviewEnabled()) {
    final boolean hasMedia=media != null && media.length > 0;
    if (hasMedia && (adapter.isSensitiveContentEnabled() || !sensitive)) {
      mediaPreview.setVisibility(hasMedia ? View.VISIBLE : View.GONE);
      mediaPreview.displayMedia(media,loader,account_id,this,adapter.getMediaLoadingHandler());
    }
 else {
      mediaPreview.setVisibility(View.GONE);
    }
  }
 else {
    mediaPreview.setVisibility(View.GONE);
  }
  if (adapter.getLinkHighlightingStyle() == VALUE_LINK_HIGHLIGHT_OPTION_CODE_NONE) {
    textView.setText(cursor.getString(indices.text_unescaped));
  }
 else {
    textView.setText(Html.fromHtml(cursor.getString(indices.text_html)));
    linkify.applyAllLinks(textView,account_id,getLayoutPosition(),cursor.getShort(indices.is_possibly_sensitive) == 1,adapter.getLinkHighlightingStyle());
    textView.setMovementMethod(null);
  }
  if (reply_count > 0) {
    replyCountView.setText(Utils.getLocalizedNumber(Locale.getDefault(),reply_count));
  }
 else {
    replyCountView.setText(null);
  }
  if (twitter.isDestroyingStatus(account_id,my_retweet_id)) {
    retweetCountView.setActivated(false);
    retweet_count=Math.max(0,cursor.getLong(indices.retweet_count) - 1);
  }
 else {
    final boolean creatingRetweet=twitter.isCreatingRetweet(account_id,status_id);
    final long retweeted_by_id=cursor.getLong(indices.retweeted_by_user_id);
    retweetCountView.setActivated(creatingRetweet || Utils.isMyRetweet(account_id,retweeted_by_id,my_retweet_id));
    retweet_count=cursor.getLong(indices.retweet_count) + (creatingRetweet ? 1 : 0);
  }
  if (retweet_count > 0) {
    retweetCountView.setText(Utils.getLocalizedNumber(Locale.getDefault(),retweet_count));
  }
 else {
    retweetCountView.setText(null);
  }
  if (twitter.isDestroyingFavorite(account_id,status_id)) {
    favoriteCountView.setActivated(false);
    favorite_count=Math.max(0,cursor.getLong(indices.favorite_count) - 1);
  }
 else {
    final boolean creatingFavorite=twitter.isCreatingFavorite(account_id,status_id);
    favoriteCountView.setActivated(creatingFavorite || cursor.getShort(indices.is_favorite) == 1);
    favorite_count=cursor.getLong(indices.favorite_count) + (creatingFavorite ? 1 : 0);
  }
  if (favorite_count > 0) {
    favoriteCountView.setText(Utils.getLocalizedNumber(Locale.getDefault(),favorite_count));
  }
 else {
    favoriteCountView.setText(null);
  }
  displayExtraTypeIcon(card_name,media,location,place_full_name,sensitive);
}
