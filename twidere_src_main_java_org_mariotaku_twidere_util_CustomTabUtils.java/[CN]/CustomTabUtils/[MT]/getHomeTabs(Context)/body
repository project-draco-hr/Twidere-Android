{
  if (context == null)   return Collections.emptyList();
  final ContentResolver resolver=context.getContentResolver();
  final Cursor cur=resolver.query(Tabs.CONTENT_URI,Tabs.COLUMNS,null,null,Tabs.DEFAULT_SORT_ORDER);
  if (cur == null)   return Collections.emptyList();
  final ArrayList<SupportTabSpec> tabs=new ArrayList<>();
  cur.moveToFirst();
  TabCursorIndices indices=new TabCursorIndices(cur);
  final int idxArguments=cur.getColumnIndex(Tabs.ARGUMENTS);
  final int idxExtras=cur.getColumnIndex(Tabs.EXTRAS);
  while (!cur.isAfterLast()) {
    @CustomTabType final String type=getTabTypeAlias(cur.getString(indices.type));
    final int position=cur.getInt(indices.position);
    final String iconType=cur.getString(indices.icon);
    final String name=cur.getString(indices.name);
    final Bundle args=new Bundle();
    final TabArguments tabArguments=parseTabArguments(type,cur.getString(idxArguments));
    if (tabArguments != null) {
      tabArguments.copyToBundle(args);
    }
    @ReadPositionTag final String tag=getTagByType(type);
    args.putInt(EXTRA_TAB_POSITION,position);
    args.putLong(EXTRA_TAB_ID,cur.getLong(indices.id));
    final TabExtras tabExtras=parseTabExtras(type,cur.getString(idxExtras));
    if (tabExtras != null) {
      args.putParcelable(EXTRA_EXTRAS,tabExtras);
    }
    final CustomTabConfiguration conf=getTabConfiguration(type);
    final Class<? extends Fragment> cls=conf != null ? conf.getFragmentClass() : InvalidTabFragment.class;
    final String tabTypeName=getTabTypeName(context,type);
    final Object tabIconObject=getTabIconObject(iconType);
    tabs.add(new SupportTabSpec(TextUtils.isEmpty(name) ? tabTypeName : name,tabIconObject,type,cls,args,position,tag));
    cur.moveToNext();
  }
  cur.close();
  Collections.sort(tabs);
  return tabs;
}
