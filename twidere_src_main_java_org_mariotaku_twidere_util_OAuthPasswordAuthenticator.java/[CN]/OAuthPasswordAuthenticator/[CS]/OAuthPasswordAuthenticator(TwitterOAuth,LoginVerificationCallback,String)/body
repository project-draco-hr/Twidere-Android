{
  final RestClient restClient=RestAPIFactory.getRestClient(oauth);
  this.oauth=oauth;
  this.client=(OkHttpRestClient)restClient.getRestClient();
  final OkHttpClient.Builder builder=client.getClient().newBuilder();
  builder.cookieJar(new JavaNetCookieJar(new CookieManager()));
  builder.addNetworkInterceptor(new Interceptor(){
    @Override public Response intercept(    Chain chain) throws IOException {
      final Response response=chain.proceed(chain.request());
      if (!response.isRedirect()) {
        return response;
      }
      final String location=response.header("Location");
      final Response.Builder builder=response.newBuilder();
      if (!TextUtils.isEmpty(location) && !endpoint.checkEndpoint(location)) {
        final HttpUrl originalLocation=HttpUrl.get(URI.create("https://api.twitter.com/").resolve(location));
        final HttpUrl.Builder locationBuilder=HttpUrl.parse(endpoint.getUrl()).newBuilder();
        for (        String pathSegments : originalLocation.pathSegments()) {
          locationBuilder.addPathSegment(pathSegments);
        }
        for (int i=0, j=originalLocation.querySize(); i < j; i++) {
          final String name=originalLocation.queryParameterName(i);
          final String value=originalLocation.queryParameterValue(i);
          locationBuilder.addQueryParameter(name,value);
        }
        final String encodedFragment=originalLocation.encodedFragment();
        if (encodedFragment != null) {
          locationBuilder.encodedFragment(encodedFragment);
        }
        final HttpUrl newLocation=locationBuilder.build();
        builder.header("Location",newLocation.toString());
      }
      return builder.build();
    }
  }
);
  this.endpoint=restClient.getEndpoint();
  this.loginVerificationCallback=loginVerificationCallback;
  this.userAgent=userAgent;
}
