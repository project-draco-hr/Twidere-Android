{
  final HtmlParsingConfiguration conf=new HtmlParsingConfiguration();
  final IAttoHandler handler=new AbstractStandardNonValidatingHtmlAttoHandler(conf){
    boolean isOAuthFormOpened;
    @Override public void handleHtmlStandaloneElement(    IHtmlElement element,    boolean minimized,    String elementName,    Map<String,String> attributes,    int line,    int col){
      handleHtmlOpenElement(element,elementName,attributes,line,col);
      handleHtmlCloseElement(element,elementName,line,col);
    }
    @Override public void handleHtmlOpenElement(    IHtmlElement element,    String elementName,    Map<String,String> attributes,    int line,    int col){
switch (elementName) {
case "form":
{
          if (attributes != null && "oauth_form".equals(attributes.get("id"))) {
            isOAuthFormOpened=true;
          }
          break;
        }
case "input":
{
        if (isOAuthFormOpened && attributes != null) {
          final String name=attributes.get("name");
          if (TextUtils.isEmpty(name))           break;
          final String value=attributes.get("value");
          if (name.equals("authenticity_token")) {
            data.authenticityToken=value;
          }
 else           if (name.equals("redirect_after_login")) {
            data.redirectAfterLogin=value;
          }
        }
        break;
      }
  }
}
@Override public void handleHtmlCloseElement(IHtmlElement element,String elementName,int line,int col){
  if ("form".equals(elementName)) {
    isOAuthFormOpened=false;
  }
}
}
;
PARSER.parse(BaseBody.reader(response.getBody()),handler);
}
