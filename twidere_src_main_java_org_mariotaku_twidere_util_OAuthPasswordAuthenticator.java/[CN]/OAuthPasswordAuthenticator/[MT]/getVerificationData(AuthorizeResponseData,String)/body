{
  HttpResponse response=null;
  try {
    final AuthorizeRequestData data=new AuthorizeRequestData();
    final MultiValueMap<String> params=new MultiValueMap<>();
    final AuthorizeResponseData.Verification verification=authorizeResponseData.verification;
    params.add("authenticity_token",verification.authenticityToken);
    params.add("user_id",verification.userId);
    params.add("challenge_id",verification.challengeId);
    params.add("challenge_type",verification.challengeType);
    params.add("platform",verification.platform);
    params.add("redirect_after_login",verification.redirectAfterLogin);
    final MultiValueMap<String> requestHeaders=new MultiValueMap<>();
    requestHeaders.add("User-Agent",userAgent);
    if (!TextUtils.isEmpty(challengeResponse)) {
      params.add("challenge_response",challengeResponse);
    }
    final FormBody authorizationResultBody=new FormBody(params);
    final HttpRequest.Builder authorizeResultBuilder=new HttpRequest.Builder();
    authorizeResultBuilder.method(POST.METHOD);
    authorizeResultBuilder.url(endpoint.construct("/account/login_verification"));
    authorizeResultBuilder.headers(requestHeaders);
    authorizeResultBuilder.body(authorizationResultBody);
    response=client.newCall(authorizeResultBuilder.build()).execute();
    parseAuthorizeRequestData(response,data);
    if (TextUtils.isEmpty(data.authenticityToken)) {
      throw new LoginVerificationException();
    }
    return data;
  }
 catch (  AttoParseException e) {
    throw new LoginVerificationException("Login verification challenge failed",e);
  }
 finally {
    Utils.closeSilently(response);
  }
}
