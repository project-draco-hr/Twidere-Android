{
  final RequestToken requestToken;
  try {
    requestToken=twitter.getOAuthRequestToken(OAUTH_CALLBACK_OOB);
  }
 catch (  final TwitterException e) {
    if (e.isCausedByNetworkIssue())     throw new AuthenticationException(e);
    throw new AuthenticityTokenException();
  }
  HttpResponse authorizePage=null, authorizeResult=null;
  try {
    final String oauthToken=requestToken.getToken();
    final String authorizationUrl=requestToken.getAuthorizationURL();
    final HashMap<String,String> inputMap=new HashMap<>();
    authorizePage=client.get(authorizationUrl,authorizationUrl,null,null,null);
    final List<String> cookieHeaders=authorizePage.getResponseHeaders("Set-Cookie");
    readInputFromHtml(authorizePage.asReader(),inputMap,INPUT_AUTHENTICITY_TOKEN,INPUT_REDIRECT_AFTER_LOGIN);
    final Configuration conf=twitter.getConfiguration();
    final List<HttpParameter> params=new ArrayList<>();
    params.add(new HttpParameter("oauth_token",oauthToken));
    params.add(new HttpParameter(INPUT_AUTHENTICITY_TOKEN,inputMap.get(INPUT_AUTHENTICITY_TOKEN)));
    if (inputMap.containsKey(INPUT_REDIRECT_AFTER_LOGIN)) {
      params.add(new HttpParameter(INPUT_REDIRECT_AFTER_LOGIN,inputMap.get(INPUT_REDIRECT_AFTER_LOGIN)));
    }
    params.add(new HttpParameter("session[username_or_email]",username));
    params.add(new HttpParameter("session[password]",password));
    final HeaderMap requestHeaders=new HeaderMap();
    requestHeaders.addHeader("Origin","https://twitter.com");
    requestHeaders.addHeader("Referer","https://twitter.com/oauth/authorize?oauth_token=" + requestToken.getToken());
    final List<String> modifiedCookieHeaders=new ArrayList<>();
    final String oAuthAuthorizationUrl=conf.getOAuthAuthorizationURL();
    final String host=parseUrlHost(oAuthAuthorizationUrl);
    for (    String cookieHeader : cookieHeaders) {
      for (      HttpCookie cookie : HttpCookie.parse(cookieHeader)) {
        if (HttpCookie.domainMatches(cookie.getDomain(),host)) {
          cookie.setVersion(1);
          cookie.setDomain("twitter.com");
        }
        modifiedCookieHeaders.add(cookie.toString());
      }
    }
    requestHeaders.put("Cookie",modifiedCookieHeaders);
    authorizeResult=client.post(oAuthAuthorizationUrl,oAuthAuthorizationUrl,params.toArray(new HttpParameter[params.size()]),requestHeaders);
    final String oauthPin=readOAuthPINFromHtml(authorizeResult.asReader());
    if (isEmpty(oauthPin))     throw new WrongUserPassException();
    return twitter.getOAuthAccessToken(requestToken,oauthPin);
  }
 catch (  final IOException|TwitterException|NullPointerException|XmlPullParserException e) {
    throw new AuthenticationException(e);
  }
 finally {
    if (authorizePage != null) {
      try {
        authorizePage.disconnect();
      }
 catch (      IOException ignore) {
      }
    }
    if (authorizeResult != null) {
      try {
        authorizeResult.disconnect();
      }
 catch (      IOException ignore) {
      }
    }
  }
}
