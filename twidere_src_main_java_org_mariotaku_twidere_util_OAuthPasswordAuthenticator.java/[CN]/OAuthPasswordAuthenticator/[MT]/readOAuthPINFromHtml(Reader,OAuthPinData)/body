{
  final HtmlParsingConfiguration conf=new HtmlParsingConfiguration();
  final IAttoHandler handler=new AbstractStandardNonValidatingHtmlAttoHandler(conf){
    boolean isOAuthPinDivOpened;
    @Override public void handleHtmlStandaloneElement(    IHtmlElement element,    boolean minimized,    String elementName,    Map<String,String> attributes,    int line,    int col) throws AttoParseException {
      handleHtmlOpenElement(element,elementName,attributes,line,col);
      handleHtmlCloseElement(element,elementName,line,col);
    }
    @Override public void handleHtmlOpenElement(    IHtmlElement element,    String elementName,    Map<String,String> attributes,    int line,    int col) throws AttoParseException {
switch (elementName) {
case "div":
{
          if (attributes != null && "oauth_pin".equals(attributes.get("id"))) {
            isOAuthPinDivOpened=true;
          }
          break;
        }
    }
  }
  @Override public void handleHtmlCloseElement(  IHtmlElement element,  String elementName,  int line,  int col) throws AttoParseException {
    if ("div".equals(elementName)) {
      isOAuthPinDivOpened=false;
    }
  }
  @Override public void handleText(  char[] buffer,  int offset,  int len,  int line,  int col) throws AttoParseException {
    if (isOAuthPinDivOpened) {
      final String s=new String(buffer,offset,len);
      if (TextUtils.isDigitsOnly(s)) {
        data.oauthPin=s;
      }
    }
  }
}
;
PARSER.parse(reader,handler);
}
