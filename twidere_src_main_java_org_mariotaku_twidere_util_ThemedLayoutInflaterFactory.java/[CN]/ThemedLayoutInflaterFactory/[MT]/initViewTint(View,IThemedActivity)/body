{
  final int noTintColor, accentColor, backgroundTintColor, actionBarColor;
  final boolean isColorTint;
  final Resources resources=((Activity)activity).getResources();
  final boolean isActionBarContext=isActionBarContext(view.getContext(),getActionBarContext((Activity)activity));
  final int themeResourceId=activity.getCurrentThemeResourceId();
  final boolean isDarkTheme=ThemeUtils.isDarkTheme(themeResourceId);
  final int backgroundColorApprox;
  if (!isActionBarContext) {
    accentColor=actionBarColor=activity.getCurrentThemeColor();
    noTintColor=TwidereColorUtils.getContrastYIQ(accentColor,ThemeUtils.ACCENT_COLOR_THRESHOLD);
    backgroundTintColor=accentColor;
    backgroundColorApprox=isDarkTheme ? Color.BLACK : Color.WHITE;
    isColorTint=true;
  }
 else   if (isDarkTheme) {
    actionBarColor=resources.getColor(R.color.background_color_action_bar_dark);
    noTintColor=Color.WHITE;
    accentColor=activity.getCurrentThemeColor();
    backgroundTintColor=noTintColor;
    backgroundColorApprox=Color.BLACK;
    isColorTint=true;
  }
 else {
    actionBarColor=activity.getCurrentThemeColor();
    accentColor=TwidereColorUtils.getContrastYIQ(actionBarColor,ThemeUtils.ACCENT_COLOR_THRESHOLD);
    noTintColor=TwidereColorUtils.getContrastYIQ(accentColor,ThemeUtils.ACCENT_COLOR_THRESHOLD);
    backgroundTintColor=accentColor;
    backgroundColorApprox=Color.WHITE;
    isColorTint=false;
  }
  final boolean isAccentOptimal=Math.abs(TwidereColorUtils.getYIQContrast(backgroundColorApprox,accentColor)) > 64;
  if (view instanceof TextView) {
    final TextView textView=(TextView)view;
    if (isAccentOptimal) {
      textView.setLinkTextColor(accentColor);
    }
  }
  if (view instanceof IThemeAccentView) {
    if (isAccentOptimal || !isColorTint) {
      ((IThemeAccentView)view).setAccentTintColor(ColorStateList.valueOf(accentColor));
    }
 else {
      final int defaultAccentColor=ThemeUtils.getColorFromAttribute(view.getContext(),R.attr.colorAccent,resources.getColor(R.color.branding_color));
      ((IThemeAccentView)view).setAccentTintColor(ColorStateList.valueOf(defaultAccentColor));
    }
  }
 else   if (view instanceof IThemeBackgroundTintView) {
    if (isAccentOptimal || !isColorTint) {
      ((IThemeBackgroundTintView)view).setBackgroundTintColor(ColorStateList.valueOf(backgroundTintColor));
    }
  }
 else   if (view instanceof TintableBackgroundView) {
    final TintableBackgroundView tintable=(TintableBackgroundView)view;
    if (isAccentOptimal || !isColorTint) {
      applyTintableBackgroundViewTint(tintable,accentColor,noTintColor,backgroundTintColor,isColorTint);
    }
  }
 else   if (view instanceof TwidereToolbar) {
    final int itemColor=ThemeUtils.getContrastActionBarItemColor((Context)activity,themeResourceId,actionBarColor);
    ((TwidereToolbar)view).setItemColor(itemColor);
  }
 else   if (view instanceof EditText) {
    if (isAccentOptimal || !isColorTint) {
      ViewCompat.setBackgroundTintList(view,ColorStateList.valueOf(backgroundTintColor));
    }
  }
 else   if (view instanceof ProgressBar) {
    if (isAccentOptimal) {
      ViewSupport.setProgressTintList((ProgressBar)view,ColorStateList.valueOf(accentColor));
      ViewSupport.setProgressBackgroundTintList((ProgressBar)view,ColorStateList.valueOf(accentColor));
    }
  }
}
