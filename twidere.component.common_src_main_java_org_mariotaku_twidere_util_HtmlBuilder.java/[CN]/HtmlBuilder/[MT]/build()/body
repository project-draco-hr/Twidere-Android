{
  if (links.isEmpty())   return escapeSource(source);
  Collections.sort(links);
  final StringBuilder builder=new StringBuilder();
  final int linksSize=links.size();
  for (int i=0; i < linksSize; i++) {
    final LinkSpec spec=links.get(i);
    if (spec == null) {
      continue;
    }
    final int start=spec.start, end=spec.end;
    if (i == 0) {
      if (start >= 0 && start <= codePointsLength) {
        appendSource(builder,0,start);
      }
    }
 else     if (i > 0) {
      final int lastEnd=links.get(i - 1).end;
      if (lastEnd >= 0 && lastEnd <= start && start <= codePointsLength) {
        appendSource(builder,lastEnd,start);
      }
    }
    builder.append("<a href=\"");
    builder.append(spec.link);
    builder.append("\">");
    if (start >= 0 && start <= end && end <= codePointsLength) {
      builder.append(!isEmpty(spec.display) ? spec.display_is_html ? spec.display : toHtml(spec.display) : spec.link);
    }
    builder.append("</a>");
    if (i == linksSize - 1 && end >= 0 && end <= codePointsLength) {
      appendSource(builder,end,codePointsLength);
    }
  }
  return builder.toString();
}
