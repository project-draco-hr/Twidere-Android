{
  if (!(endpoint instanceof OAuthEndpoint))   throw new IllegalArgumentException("OAuthEndpoint required");
  final OAuthEndpoint oauthEndpoint=(OAuthEndpoint)endpoint;
  final String method=request.getMethod();
  final String url=Endpoint.constructUrl(oauthEndpoint.getSignUrl(),request);
  final String oauthNonce=generateOAuthNonce();
  final long timestamp=System.currentTimeMillis() / 1000;
  final Map<String,Object> extras=request.getExtras();
  final String oauthToken, oauthTokenSecret;
  if (this.oauthToken != null) {
    oauthToken=this.oauthToken.getOauthToken();
    oauthTokenSecret=this.oauthToken.getOauthTokenSecret();
  }
 else {
    oauthToken=(String)extras.get("oauth_token");
    oauthTokenSecret=(String)extras.get("oauth_token_secret");
  }
  final String oauthSignature=generateOAuthSignature(method,url,oauthNonce,timestamp,oauthToken,oauthTokenSecret,request.getQueries(),request.getForms());
  final List<Pair<String,String>> encodeParams=new ArrayList<>();
  encodeParams.add(Pair.create("oauth_consumer_key",consumerKey));
  encodeParams.add(Pair.create("oauth_nonce",oauthNonce));
  encodeParams.add(Pair.create("oauth_signature",encode(oauthSignature)));
  encodeParams.add(Pair.create("oauth_signature_method",OAUTH_SIGNATURE_METHOD));
  encodeParams.add(Pair.create("oauth_timestamp",String.valueOf(timestamp)));
  encodeParams.add(Pair.create("oauth_version",OAUTH_VERSION));
  if (oauthToken != null) {
    encodeParams.add(Pair.create("oauth_token",oauthToken));
  }
  Collections.sort(encodeParams,new Comparator<Pair<String,String>>(){
    @Override public int compare(    Pair<String,String> lhs,    Pair<String,String> rhs){
      return lhs.first.compareTo(rhs.first);
    }
  }
);
  final StringBuilder headerBuilder=new StringBuilder();
  headerBuilder.append("OAuth ");
  for (int i=0, j=encodeParams.size(); i < j; i++) {
    if (i != 0) {
      headerBuilder.append(", ");
    }
    final Pair<String,String> keyValuePair=encodeParams.get(i);
    headerBuilder.append(keyValuePair.first);
    headerBuilder.append("=\"");
    headerBuilder.append(keyValuePair.second);
    headerBuilder.append('\"');
  }
  return headerBuilder.toString();
}
