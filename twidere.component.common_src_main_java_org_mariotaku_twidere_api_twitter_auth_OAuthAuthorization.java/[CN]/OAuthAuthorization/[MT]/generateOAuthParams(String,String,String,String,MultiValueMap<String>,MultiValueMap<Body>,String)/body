{
  final String oauthNonce=generateOAuthNonce();
  final long timestamp=System.currentTimeMillis() / 1000;
  final String oauthSignature=generateOAuthSignature(method,url,oauthNonce,timestamp,oauthToken,oauthTokenSecret,queries,params,bodyType);
  final List<Pair<String,String>> encodeParams=new ArrayList<>();
  encodeParams.add(Pair.create("oauth_consumer_key",consumerKey));
  encodeParams.add(Pair.create("oauth_nonce",oauthNonce));
  encodeParams.add(Pair.create("oauth_signature",encode(oauthSignature)));
  encodeParams.add(Pair.create("oauth_signature_method",OAUTH_SIGNATURE_METHOD));
  encodeParams.add(Pair.create("oauth_timestamp",String.valueOf(timestamp)));
  encodeParams.add(Pair.create("oauth_version",OAUTH_VERSION));
  if (oauthToken != null) {
    encodeParams.add(Pair.create("oauth_token",oauthToken));
  }
  Collections.sort(encodeParams,new Comparator<Pair<String,String>>(){
    @Override public int compare(    Pair<String,String> lhs,    Pair<String,String> rhs){
      return lhs.first.compareTo(rhs.first);
    }
  }
);
  return encodeParams;
}
