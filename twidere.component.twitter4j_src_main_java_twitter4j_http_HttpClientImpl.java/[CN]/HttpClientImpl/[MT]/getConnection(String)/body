{
  final HttpURLConnection con;
  final Proxy proxy;
  if (isProxyConfigured()) {
    if (CONF.getHttpProxyUser() != null && !CONF.getHttpProxyUser().equals("")) {
      if (logger.isDebugEnabled()) {
        logger.debug("Proxy AuthUser: " + CONF.getHttpProxyUser());
        logger.debug("Proxy AuthPassword: " + InternalStringUtil.maskString(CONF.getHttpProxyPassword()));
      }
      Authenticator.setDefault(new Authenticator(){
        @Override protected PasswordAuthentication getPasswordAuthentication(){
          if (getRequestorType().equals(RequestorType.PROXY))           return new PasswordAuthentication(CONF.getHttpProxyUser(),CONF.getHttpProxyPassword().toCharArray());
 else           return null;
        }
      }
);
    }
    proxy=new Proxy(Proxy.Type.HTTP,InetSocketAddress.createUnresolved(CONF.getHttpProxyHost(),CONF.getHttpProxyPort()));
    if (logger.isDebugEnabled()) {
      logger.debug("Opening proxied connection(" + CONF.getHttpProxyHost() + ":"+ CONF.getHttpProxyPort()+ ")");
    }
  }
 else {
    proxy=Proxy.NO_PROXY;
  }
  final HostAddressResolver resolver=FactoryUtils.getHostAddressResolver(CONF);
  final URI url_orig;
  try {
    url_orig=new URI(url_string);
  }
 catch (  final URISyntaxException e) {
    throw new IOException("Invalid URI " + url_string);
  }
  final String host=url_orig.getHost(), authority=url_orig.getAuthority();
  final String resolved_host=resolver != null ? resolver.resolve(host) : null;
  con=(HttpURLConnection)new URL(resolved_host != null ? url_string.replace("://" + host,"://" + resolved_host) : url_string).openConnection(proxy);
  if (resolved_host != null && !host.equals(resolved_host)) {
    con.setRequestProperty("Host",authority);
  }
  if (CONF.getHttpConnectionTimeout() > 0) {
    con.setConnectTimeout(CONF.getHttpConnectionTimeout());
  }
  if (CONF.getHttpReadTimeout() > 0) {
    con.setReadTimeout(CONF.getHttpReadTimeout());
  }
  con.setInstanceFollowRedirects(false);
  if (con instanceof HttpsURLConnection && CONF.isSSLErrorIgnored()) {
    ((HttpsURLConnection)con).setHostnameVerifier(ALLOW_ALL_HOSTNAME_VERIFIER);
    if (IGNORE_ERROR_SSL_FACTORY != null) {
      ((HttpsURLConnection)con).setSSLSocketFactory(IGNORE_ERROR_SSL_FACTORY);
    }
  }
  return con;
}
