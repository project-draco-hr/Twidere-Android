{
  if (handleFragmentKeyboardShortcutSingle(handler,keyCode,event))   return true;
  String action=handler.getKeyAction(CONTEXT_TAG_HOME,keyCode,event);
  if (action != null) {
switch (action) {
case ACTION_HOME_ACCOUNTS_DASHBOARD:
{
        if (mDrawerLayout.isDrawerOpen(GravityCompat.START)) {
          mDrawerLayout.closeDrawers();
        }
 else {
          mDrawerLayout.openDrawer(GravityCompat.START);
          setControlBarVisibleAnimate(true);
        }
        return true;
      }
  }
}
action=handler.getKeyAction(CONTEXT_TAG_NAVIGATION,keyCode,event);
if (action != null) {
switch (action) {
case ACTION_NAVIGATION_PREVIOUS_TAB:
{
      final int previous=mViewPager.getCurrentItem() - 1;
      if (previous < 0 && DrawerLayoutTrojan.findDrawerWithGravity(mDrawerLayout,Gravity.START) != null) {
        mDrawerLayout.openDrawer(GravityCompat.START);
        setControlBarVisibleAnimate(true);
      }
 else       if (previous < mPagerAdapter.getCount()) {
        if (mDrawerLayout.isDrawerOpen(GravityCompat.END)) {
          mDrawerLayout.closeDrawers();
        }
 else {
          mViewPager.setCurrentItem(previous,true);
        }
      }
      return true;
    }
case ACTION_NAVIGATION_NEXT_TAB:
{
    final int next=mViewPager.getCurrentItem() + 1;
    if (next >= mPagerAdapter.getCount() && DrawerLayoutTrojan.findDrawerWithGravity(mDrawerLayout,Gravity.END) != null) {
      mDrawerLayout.openDrawer(GravityCompat.END);
      setControlBarVisibleAnimate(true);
    }
 else     if (next >= 0) {
      if (mDrawerLayout.isDrawerOpen(GravityCompat.START)) {
        mDrawerLayout.closeDrawers();
      }
 else {
        mViewPager.setCurrentItem(next,true);
      }
    }
    return true;
  }
}
}
return handler.handleKey(this,null,keyCode,event);
}
