{
  LongSparseMap<Status> quotes=new LongSparseMap<>();
  for (  Status status : list) {
    if (status.isQuote())     continue;
    final UrlEntity[] entities=status.getUrlEntities();
    if (entities == null || entities.length <= 0)     continue;
    for (int i=entities.length - 1; i >= 0; i--) {
      final Matcher m=PATTERN_TWITTER_STATUS_LINK.matcher(entities[i].getExpandedUrl());
      if (!m.matches())       continue;
      final long quoteId=ParseUtils.parseLong(m.group(3),-1);
      if (quoteId > 0) {
        quotes.put(quoteId,status);
      }
      break;
    }
  }
  final long[] quoteIds=quotes.keys();
  for (int currentBulkIdx=0, totalLength=quoteIds.length; currentBulkIdx < totalLength; currentBulkIdx+=TWITTER_BULK_QUERY_COUNT) {
    final int currentBulkCount=Math.min(totalLength,currentBulkIdx + TWITTER_BULK_QUERY_COUNT) - currentBulkIdx;
    final long[] ids=new long[currentBulkCount];
    System.arraycopy(quoteIds,currentBulkIdx,ids,0,currentBulkCount);
    for (    Status quoted : twitter.lookupStatuses(ids)) {
      final Set<Status> orig=quotes.get(quoted.getId());
      if (orig == null)       continue;
      for (      Status status : orig) {
        StatusImpl.setQuotedStatus(status,quoted);
      }
    }
  }
  return list;
}
