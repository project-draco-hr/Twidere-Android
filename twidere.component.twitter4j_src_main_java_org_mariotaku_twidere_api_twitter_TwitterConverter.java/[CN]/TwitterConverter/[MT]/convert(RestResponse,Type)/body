{
  final TypedData body=response.getBody();
  if (!response.isSuccessful()) {
    final ByteArrayOutputStream os=new ByteArrayOutputStream();
    body.writeTo(os);
    os.flush();
    final ContentType contentType=body.contentType();
    Charset charset=null;
    if (contentType != null) {
      charset=contentType.getCharset();
    }
    if (charset == null)     charset=Charset.defaultCharset();
    throw new TwitterException(os.toString(charset.name()));
  }
  final ContentType contentType=body.contentType();
  final InputStream stream=body.stream();
  if (type instanceof Class<?>) {
    final Class<?> cls=(Class<?>)type;
    if (OAuthToken.class.isAssignableFrom(cls)) {
      final ByteArrayOutputStream os=new ByteArrayOutputStream();
      body.writeTo(os);
      Charset charset=contentType != null ? contentType.getCharset() : null;
      if (charset == null) {
        charset=Charset.defaultCharset();
      }
      try {
        return new OAuthToken(os.toString(charset.name()),charset);
      }
 catch (      ParseException e) {
        throw new IOException(e);
      }
    }
    LoganSquare.parse(stream,cls);
  }
 else   if (type instanceof ParameterizedType) {
    final Type rawType=((ParameterizedType)type).getRawType();
    if (rawType instanceof Class<?>) {
      final Class<?> rawClass=(Class<?>)rawType;
      if (ResponseList.class.isAssignableFrom(rawClass)) {
        final Type elementType=((ParameterizedType)type).getActualTypeArguments()[0];
        return new ResponseListImpl<>(LoganSquare.parseList(stream,(Class<?>)elementType));
      }
    }
  }
  throw new UnsupportedTypeException(type);
}
