{
switch (credentials.auth_type) {
case ParcelableCredentials.AUTH_TYPE_OAUTH:
case ParcelableCredentials.AUTH_TYPE_XAUTH:
{
      final String consumerKey=TextUtils.isEmpty(credentials.consumer_key) ? TWITTER_CONSUMER_KEY_LEGACY : credentials.consumer_key;
      final String consumerSecret=TextUtils.isEmpty(credentials.consumer_secret) ? TWITTER_CONSUMER_SECRET_LEGACY : credentials.consumer_secret;
      final OAuthToken accessToken=new OAuthToken(credentials.oauth_token,credentials.oauth_token_secret);
      return new OAuthAuthorization(consumerKey,consumerSecret,accessToken);
    }
case ParcelableCredentials.AUTH_TYPE_BASIC:
{
    final String screenName=credentials.screen_name;
    final String username=credentials.basic_auth_username;
    final String loginName=username != null ? username : screenName;
    final String password=credentials.basic_auth_password;
    if (isEmpty(loginName) || isEmpty(password))     return null;
    return new BasicAuthorization(loginName,password);
  }
}
return new EmptyAuthorization();
}
