{
  SpannableStringBuilder out=new SpannableStringBuilder(format);
  int i=0;
  int argAt=-1;
  while (i < out.length()) {
    Matcher m=FORMAT_SEQUENCE.matcher(out);
    if (!m.find(i))     break;
    i=m.start();
    int exprEnd=m.end();
    String argTerm=m.group(1);
    String modTerm=m.group(2);
    String typeTerm=m.group(3);
    CharSequence cookedArg;
    if (typeTerm.equals("%")) {
      cookedArg="%";
    }
 else     if (typeTerm.equals("%")) {
      cookedArg="\n";
    }
 else {
      int argIdx=0;
      if (argTerm.equals(""))       argIdx=++argAt;
 else       if (argTerm.equals("<"))       argIdx=argAt;
 else       argIdx=Integer.parseInt(argTerm.substring(0,argTerm.length() - 1)) - 1;
      Object argItem=args[argIdx];
      if (typeTerm.equals("s") && argItem instanceof Spanned) {
        cookedArg=(Spanned)argItem;
      }
 else {
        cookedArg=String.format(locale,"%" + modTerm + typeTerm,argItem);
      }
    }
    out.replace(i,exprEnd,cookedArg);
    i+=cookedArg.length();
  }
  return new SpannedString(out);
}
