{
  final Context context=getContext();
  if (card == null || status == null || context == null)   return;
  mCard=card;
  final int choicesCount=getChoicesCount(card);
  int votesSum=0;
  final boolean countsAreFinal=ParcelableCardEntityUtils.getAsBoolean(card,"counts_are_final",false);
  final int selectedChoice=ParcelableCardEntityUtils.getAsInteger(card,"selected_choice",-1);
  final Date endDatetimeUtc=ParcelableCardEntityUtils.getAsDate(card,"end_datetime_utc",new Date());
  final boolean hasChoice=selectedChoice != -1;
  final boolean isMyPoll=status.account_key.equals(status.user_key);
  final boolean showResult=countsAreFinal || isMyPoll || hasChoice;
  for (int i=0; i < choicesCount; i++) {
    final int choiceIndex=i + 1;
    votesSum+=ParcelableCardEntityUtils.getAsInteger(card,"choice" + choiceIndex + "_count",0);
  }
  final View.OnClickListener clickListener=new View.OnClickListener(){
    private boolean clickedChoice;
    @Override public void onClick(    View v){
      if (hasChoice || clickedChoice)       return;
      for (int i=0, j=mPollContainer.getChildCount(); i < j; i++) {
        final View pollItem=mPollContainer.getChildAt(i);
        pollItem.setClickable(false);
        clickedChoice=true;
        final RadioButton choiceRadioButton=(RadioButton)pollItem.findViewById(R.id.choice_button);
        final boolean checked=v == pollItem;
        choiceRadioButton.setChecked(checked);
        if (checked) {
          final CardDataMap cardData=new CardDataMap();
          cardData.putLong("original_tweet_id",NumberUtils.toLong(status.id));
          cardData.putString("card_uri",card.url);
          cardData.putString("cards_platform",MicroBlogAPIFactory.CARDS_PLATFORM_ANDROID_12);
          cardData.putString("response_card_name",card.name);
          cardData.putString("selected_choice",String.valueOf(i + 1));
          AbstractTask<CardDataMap,ParcelableCardEntity,CardPollFragment> task=new AbstractTask<CardDataMap,ParcelableCardEntity,CardPollFragment>(){
            @Override public void afterExecute(            CardPollFragment handler,            ParcelableCardEntity result){
              handler.displayAndReloadPoll(result,status);
            }
            @Override public ParcelableCardEntity doLongOperation(            CardDataMap cardDataMap){
              final Context context=getContext();
              if (context == null)               return null;
              final TwitterCaps caps=MicroBlogAPIFactory.getTwitterInstance(context,card.account_key,true,true,TwitterCaps.class);
              if (caps == null)               return null;
              try {
                final CardEntity cardEntity=caps.sendPassThrough(cardDataMap).getCard();
                return ParcelableCardEntityUtils.fromCardEntity(cardEntity,card.account_key);
              }
 catch (              TwitterException e) {
                Log.w(LOGTAG,e);
              }
              return null;
            }
          }
;
          task.setResultHandler(CardPollFragment.this);
          task.setParams(cardData);
          TaskStarter.execute(task);
        }
      }
    }
  }
;
  final int color=ContextCompat.getColor(context,R.color.material_light_blue_a200);
  final float radius=getResources().getDimension(R.dimen.element_spacing_small);
  for (int i=0; i < choicesCount; i++) {
    final View pollItem=mPollContainer.getChildAt(i);
    final TextView choicePercentView=(TextView)pollItem.findViewById(R.id.choice_percent);
    final TextView choiceLabelView=(TextView)pollItem.findViewById(R.id.choice_label);
    final RadioButton choiceRadioButton=(RadioButton)pollItem.findViewById(R.id.choice_button);
    final int choiceIndex=i + 1;
    final String label=ParcelableCardEntityUtils.getAsString(card,"choice" + choiceIndex + "_label",null);
    final int value=ParcelableCardEntityUtils.getAsInteger(card,"choice" + choiceIndex + "_count",0);
    if (label == null)     throw new NullPointerException();
    final float choicePercent=votesSum == 0 ? 0 : value / (float)votesSum;
    choiceLabelView.setText(label);
    choicePercentView.setText(String.format(Locale.US,"%d%%",Math.round(choicePercent * 100)));
    pollItem.setOnClickListener(clickListener);
    final boolean isSelected=selectedChoice == choiceIndex;
    if (showResult) {
      choicePercentView.setVisibility(View.VISIBLE);
      choiceRadioButton.setVisibility(hasChoice && isSelected ? View.VISIBLE : View.INVISIBLE);
      ViewSupport.setBackground(choiceLabelView,new PercentDrawable(choicePercent,radius,color));
    }
 else {
      choicePercentView.setVisibility(View.GONE);
      choiceRadioButton.setVisibility(View.VISIBLE);
      ViewSupport.setBackground(choiceLabelView,null);
    }
    choiceRadioButton.setChecked(isSelected);
    pollItem.setClickable(selectedChoice == -1);
  }
  final String nVotes=getResources().getQuantityString(R.plurals.N_votes,votesSum,votesSum);
  final CharSequence timeLeft=DateUtils.getRelativeTimeSpanString(context,endDatetimeUtc.getTime(),true);
  mPollSummary.setText(getString(R.string.poll_summary_format,nVotes,timeLeft));
}
