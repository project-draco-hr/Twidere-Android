{
  final Resolver dns=getResolver();
  final Lookup lookup=new Lookup(new Name(host),Type.A,DClass.IN);
  lookup.setResolver(dns);
  lookup.run();
  final int result=lookup.getResult();
  if (result != Lookup.SUCCESSFUL) {
    throw new UnknownHostException("Unable to resolve " + host + ", "+ lookup.getErrorString());
  }
  final Record[] records=lookup.getAnswers();
  final ArrayList<InetAddress> resolvedAddresses=new ArrayList<>();
  long ttl=-1;
  for (  final Record record : records) {
    if (ttl == -1) {
      ttl=record.getTTL();
    }
    final InetAddress inetAddress;
    if (record instanceof ARecord) {
      inetAddress=((ARecord)record).getAddress();
    }
 else     if (record instanceof AAAARecord) {
      inetAddress=((AAAARecord)record).getAddress();
    }
 else {
      continue;
    }
    if (mConnnectTimeout == 0 || inetAddress.isReachable(TwidereMathUtils.clamp((int)mConnnectTimeout / 2,1000,3000))) {
      resolvedAddresses.add(InetAddress.getByAddress(originalHost,inetAddress.getAddress()));
    }
  }
  if (!resolvedAddresses.isEmpty()) {
    final InetAddress[] hostAddr=resolvedAddresses.toArray(new InetAddress[resolvedAddresses.size()]);
    putCache(originalHost,hostAddr,ttl,TimeUnit.SECONDS);
    return hostAddr;
  }
  return null;
}
