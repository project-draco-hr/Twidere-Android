{
  if (isValidIpAddress(host)) {
    final InetAddress[] inetAddresses=fromAddressString(originalHost,host);
    if (inetAddresses != null)     return inetAddresses;
  }
  final InetAddress[] cachedHostAddr=mHostCache.get(host);
  if (cachedHostAddr != null) {
    if (BuildConfig.DEBUG && Log.isLoggable(RESOLVER_LOGTAG,Log.VERBOSE)) {
      Log.v(RESOLVER_LOGTAG,"Got cached " + Arrays.toString(cachedHostAddr));
      return cachedHostAddr;
    }
  }
  final String customMappedHost=findHost(host);
  if (customMappedHost != null) {
    final InetAddress[] hostAddr=fromAddressString(originalHost,customMappedHost);
    putCache(originalHost,hostAddr);
    if (BuildConfig.DEBUG && Log.isLoggable(RESOLVER_LOGTAG,Log.VERBOSE)) {
      Log.v(RESOLVER_LOGTAG,"Got mapped address " + customMappedHost + " for host "+ host);
    }
    if (hostAddr != null) {
      return hostAddr;
    }
  }
  try {
    final InetAddress[] hostAddr=mResolver.resolve(host);
    putCache(originalHost,hostAddr);
    if (BuildConfig.DEBUG && Log.isLoggable(RESOLVER_LOGTAG,Log.VERBOSE)) {
      Log.v(RESOLVER_LOGTAG,"Got hosts " + Arrays.toString(hostAddr));
    }
    return hostAddr;
  }
 catch (  UnknownHostException e) {
  }
  if (BuildConfig.DEBUG && Log.isLoggable(RESOLVER_LOGTAG,Log.VERBOSE)) {
    Log.v(RESOLVER_LOGTAG,"Resolve address " + host + " failed, using original host");
  }
  final InetAddress[] defaultAddresses=InetAddress.getAllByName(host);
  putCache(host,defaultAddresses);
  return defaultAddresses;
}
