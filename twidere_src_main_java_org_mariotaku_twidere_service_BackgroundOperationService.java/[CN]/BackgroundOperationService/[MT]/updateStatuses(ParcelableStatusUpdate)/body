{
  final Builder builder=new Builder(this);
  startForeground(NOTIFICATION_ID_UPDATE_STATUS,updateUpdateStatusNotification(this,builder,0,null));
  for (  final ParcelableStatusUpdate item : statuses) {
    mNotificationManager.notify(NOTIFICATION_ID_UPDATE_STATUS,updateUpdateStatusNotification(this,builder,0,item));
    final ContentValues draftValues=ContentValuesCreator.createStatusDraft(item,ParcelableAccount.getAccountIds(item.accounts));
    final Uri draftUri=mResolver.insert(Drafts.CONTENT_URI,draftValues);
    final long draftId=draftUri != null ? ParseUtils.parseLong(draftUri.getLastPathSegment(),-1) : -1;
    mTwitter.addSendingDraftId(draftId);
    final List<SingleResponse<ParcelableStatus>> result=updateStatus(builder,item);
    boolean failed=false;
    Exception exception=null;
    final Expression where=Expression.equals(Drafts._ID,draftId);
    final List<Long> failedAccountIds=ListUtils.fromArray(ParcelableAccount.getAccountIds(item.accounts));
    for (    final SingleResponse<ParcelableStatus> response : result) {
      final ParcelableStatus data=response.getData();
      if (data == null) {
        failed=true;
        if (exception == null) {
          exception=response.getException();
        }
      }
 else       if (data.account_id > 0) {
        failedAccountIds.remove(data.account_id);
        final TweetEvent event=TweetEvent.create(this,data,TimelineType.OTHER);
        event.setAction(TweetEvent.Action.TWEET);
        HotMobiLogger.getInstance(this).log(data.account_id,event);
      }
    }
    if (result.isEmpty()) {
      showErrorMessage(R.string.action_updating_status,getString(R.string.no_account_selected),false);
    }
 else     if (failed) {
      if (exception instanceof TwitterException && ((TwitterException)exception).getErrorCode() == StatusCodeMessageUtils.STATUS_IS_DUPLICATE) {
        showErrorMessage(getString(R.string.status_is_duplicate),false);
      }
 else {
        final ContentValues accountIdsValues=new ContentValues();
        accountIdsValues.put(Drafts.ACCOUNT_IDS,ListUtils.toString(failedAccountIds,',',false));
        mResolver.update(Drafts.CONTENT_URI,accountIdsValues,where.getSQL(),null);
        showErrorMessage(R.string.action_updating_status,exception,true);
        final ContentValues notifValues=new ContentValues();
        notifValues.put(BaseColumns._ID,draftId);
        mResolver.insert(Drafts.CONTENT_URI_NOTIFICATIONS,notifValues);
      }
    }
 else {
      showOkMessage(R.string.status_updated,false);
      mResolver.delete(Drafts.CONTENT_URI,where.getSQL(),null);
      if (item.media != null) {
        for (        final ParcelableMediaUpdate media : item.media) {
          final String path=getImagePathFromUri(this,Uri.parse(media.uri));
          if (path != null) {
            if (!new File(path).delete()) {
              Log.d(LOGTAG,String.format("unable to delete %s",path));
            }
          }
        }
      }
    }
    mTwitter.removeSendingDraftId(draftId);
    if (mPreferences.getBoolean(KEY_REFRESH_AFTER_TWEET,false)) {
      mHandler.post(new Runnable(){
        @Override public void run(){
          mTwitter.refreshAll();
        }
      }
);
    }
  }
  stopForeground(false);
  mNotificationManager.cancel(NOTIFICATION_ID_UPDATE_STATUS);
}
