{
  final ParcelableCredentials credentials=ParcelableCredentialsUtils.getCredentials(this,accountKey);
  if (credentials == null)   return SingleResponse.getInstance();
  final MicroBlog twitter=MicroBlogAPIFactory.getInstance(this,credentials,true,true);
  final TwitterUpload twitterUpload=MicroBlogAPIFactory.getInstance(this,credentials,true,true,TwitterUpload.class);
  if (twitter == null || twitterUpload == null)   return SingleResponse.getInstance();
  try {
    final ParcelableDirectMessage directMessage;
switch (ParcelableAccountUtils.getAccountType(credentials)) {
case ParcelableAccount.Type.FANFOU:
{
        if (imageUri != null) {
          throw new MicroBlogException("Can't send image DM on Fanfou");
        }
        final DirectMessage dm=twitter.sendFanfouDirectMessage(recipientId,text);
        directMessage=ParcelableDirectMessageUtils.fromDirectMessage(dm,accountKey,true);
        break;
      }
default :
{
      if (imageUri != null) {
        final Uri mediaUri=Uri.parse(imageUri);
        FileBody body=null;
        try {
          body=UpdateStatusTask.getBodyFromMedia(getContentResolver(),mediaUri,new MessageMediaUploadListener(this,mNotificationManager,builder,text));
          final MediaUploadResponse uploadResp=uploadMedia(twitterUpload,body);
          final DirectMessage response=twitter.sendDirectMessage(recipientId,text,uploadResp.getId());
          directMessage=ParcelableDirectMessageUtils.fromDirectMessage(response,accountKey,true);
        }
  finally {
          Utils.closeSilently(body);
        }
        final String path=getImagePathFromUri(this,mediaUri);
        if (path != null) {
          final File file=new File(path);
          if (!file.delete()) {
            Log.d(LOGTAG,String.format("unable to delete %s",path));
          }
        }
      }
 else {
        final DirectMessage response=twitter.sendDirectMessage(recipientId,text);
        directMessage=ParcelableDirectMessageUtils.fromDirectMessage(response,accountKey,true);
      }
      break;
    }
}
Utils.setLastSeen(this,new UserKey(recipientId,accountKey.getHost()),System.currentTimeMillis());
return SingleResponse.getInstance(directMessage);
}
 catch (final IOException e) {
return SingleResponse.getInstance(e);
}
catch (final MicroBlogException e) {
return SingleResponse.getInstance(e);
}
}
