{
  final String mediaType=body.contentType().getContentType();
  final long length=body.length();
  final InputStream stream=body.stream();
  MediaUploadResponse response=upload.initUploadMedia(mediaType,length,null);
  final int segments=length == 0 ? 0 : (int)(length / BULK_SIZE + 1);
  for (int segmentIndex=0; segmentIndex < segments; segmentIndex++) {
    final int currentBulkSize=(int)Math.min(BULK_SIZE,length - segmentIndex * BULK_SIZE);
    final SimpleBody bulk=new SimpleBody(ContentType.OCTET_STREAM,null,currentBulkSize,stream);
    upload.appendUploadMedia(response.getId(),segmentIndex,bulk);
  }
  response=upload.finalizeUploadMedia(response.getId());
  for (ProcessingInfo info=response.getProcessingInfo(); shouldWaitForProcess(info); info=response.getProcessingInfo()) {
    final long checkAfterSecs=info.getCheckAfterSecs();
    if (checkAfterSecs <= 0) {
      break;
    }
    try {
      Thread.sleep(TimeUnit.SECONDS.toMillis(checkAfterSecs));
    }
 catch (    InterruptedException e) {
      break;
    }
    response=upload.getUploadMediaStatus(response.getId());
  }
  ProcessingInfo info=response.getProcessingInfo();
  if (info != null && ProcessingInfo.State.FAILED.equals(info.getState())) {
    final MicroBlogException exception=new MicroBlogException();
    ErrorInfo errorInfo=info.getError();
    if (errorInfo != null) {
      exception.setErrors(new ErrorInfo[]{errorInfo});
    }
    throw exception;
  }
  return response;
}
