{
  final Twitter twitter=getTwitterInstance(this,accountId,true,true);
  try {
    final ParcelableDirectMessage directMessage;
    if (imageUri != null) {
      final String path=getImagePathFromUri(this,Uri.parse(imageUri));
      if (path == null)       throw new FileNotFoundException();
      final BitmapFactory.Options o=new BitmapFactory.Options();
      o.inJustDecodeBounds=true;
      BitmapFactory.decodeFile(path,o);
      final File file=new File(path);
      Utils.downscaleImageIfNeeded(file,100);
      final ContentLengthInputStream is=new ContentLengthInputStream(file);
      is.setReadListener(new MessageMediaUploadListener(this,mNotificationManager,builder,text));
      final MediaUploadResponse uploadResp=twitter.uploadMedia(file.getName(),is,o.outMimeType);
      directMessage=new ParcelableDirectMessage(twitter.sendDirectMessage(recipientId,text,uploadResp.getId()),accountId,true);
      if (!file.delete()) {
        Log.d(LOGTAG,String.format("unable to delete %s",path));
      }
    }
 else {
      directMessage=new ParcelableDirectMessage(twitter.sendDirectMessage(recipientId,text),accountId,true);
    }
    Utils.setLastSeen(this,recipientId,System.currentTimeMillis());
    return SingleResponse.getInstance(directMessage);
  }
 catch (  final IOException e) {
    return SingleResponse.getInstance(e);
  }
catch (  final TwitterException e) {
    return SingleResponse.getInstance(e);
  }
}
