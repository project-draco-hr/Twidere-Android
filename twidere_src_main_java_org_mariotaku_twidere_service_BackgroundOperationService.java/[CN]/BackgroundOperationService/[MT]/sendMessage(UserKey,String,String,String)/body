{
  final String title=getString(R.string.sending_direct_message);
  final Builder builder=new Builder(this);
  builder.setSmallIcon(R.drawable.ic_stat_send);
  builder.setProgress(100,0,true);
  builder.setTicker(title);
  builder.setContentTitle(title);
  builder.setContentText(text);
  builder.setCategory(NotificationCompat.CATEGORY_PROGRESS);
  builder.setOngoing(true);
  final Notification notification=builder.build();
  startForeground(NOTIFICATION_ID_SEND_DIRECT_MESSAGE,notification);
  final SingleResponse<ParcelableDirectMessage> result=sendDirectMessage(builder,accountId,recipientId,text,imageUri);
  final ContentResolver resolver=getContentResolver();
  if (result.hasData()) {
    final ParcelableDirectMessage message=result.getData();
    final ContentValues values=ContentValuesCreator.createDirectMessage(message);
    final String deleteWhere=Expression.and(Expression.equalsArgs(DirectMessages.ACCOUNT_KEY),Expression.equalsArgs(DirectMessages.MESSAGE_ID)).getSQL();
    String[] deleteWhereArgs={message.account_key.toString(),message.id};
    resolver.delete(DirectMessages.Outbox.CONTENT_URI,deleteWhere,deleteWhereArgs);
    resolver.insert(DirectMessages.Outbox.CONTENT_URI,values);
    showOkMessage(R.string.direct_message_sent,false);
  }
 else {
    final ContentValues values=createMessageDraft(accountId,recipientId,text,imageUri);
    resolver.insert(Drafts.CONTENT_URI,values);
    showErrorMessage(R.string.action_sending_direct_message,result.getException(),true);
  }
  stopForeground(false);
  mNotificationManager.cancel(NOTIFICATION_ID_SEND_DIRECT_MESSAGE);
}
