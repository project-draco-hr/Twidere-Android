{
  final ArrayList<ContentValues> hashTagValues=new ArrayList<>();
  final Collection<String> hashTags=extractor.extractHashtags(statusUpdate.text);
  for (  final String hashTag : hashTags) {
    final ContentValues values=new ContentValues();
    values.put(CachedHashtags.NAME,hashTag);
    hashTagValues.add(values);
  }
  final boolean hasEasterEggTriggerText=statusUpdate.text.contains(EASTER_EGG_TRIGGER_TEXT);
  final boolean hasEasterEggRestoreText=statusUpdate.text.contains(EASTER_EGG_RESTORE_TEXT_PART1) && statusUpdate.text.contains(EASTER_EGG_RESTORE_TEXT_PART2) && statusUpdate.text.contains(EASTER_EGG_RESTORE_TEXT_PART3);
  boolean mentionedHondaJOJO=false, notReplyToOther=false;
  mResolver.bulkInsert(CachedHashtags.CONTENT_URI,hashTagValues.toArray(new ContentValues[hashTagValues.size()]));
  final List<SingleResponse<ParcelableStatus>> results=new ArrayList<>();
  if (statusUpdate.accounts.length == 0)   return Collections.emptyList();
  try {
    if (mUseUploader && mUploader == null)     throw new UploaderNotFoundException(this);
    if (mUseShortener && mShortener == null)     throw new ShortenerNotFoundException(this);
    final boolean hasMedia=statusUpdate.media != null && statusUpdate.media.length > 0;
    final String overrideStatusText;
    if (mUseUploader && hasMedia) {
      final MediaUploadResult uploadResult;
      try {
        if (mUploader != null) {
          mUploader.waitForService();
        }
        uploadResult=mUploader.upload(statusUpdate,UploaderMediaItem.getFromStatusUpdate(this,statusUpdate));
      }
 catch (      final Exception e) {
        throw new UploadException(this);
      }
      if (mUseUploader && hasMedia && uploadResult == null)       throw new UploadException(this);
      if (uploadResult.error_code != 0)       throw new UploadException(uploadResult.error_message);
      overrideStatusText=getImageUploadStatus(this,uploadResult.media_uris,statusUpdate.text);
    }
 else {
      overrideStatusText=null;
    }
    final String unShortenedText=isEmpty(overrideStatusText) ? statusUpdate.text : overrideStatusText;
    final boolean shouldShorten=mValidator.getTweetLength(unShortenedText) > mValidator.getMaxTweetLength();
    final String shortenedText;
    if (shouldShorten) {
      if (mUseShortener) {
        final StatusShortenResult shortenedResult;
        mShortener.waitForService();
        try {
          shortenedResult=mShortener.shorten(statusUpdate,unShortenedText);
        }
 catch (        final Exception e) {
          throw new ShortenException(this);
        }
        if (shortenedResult == null || shortenedResult.shortened == null)         throw new ShortenException(this);
        shortenedText=shortenedResult.shortened;
      }
 else       throw new StatusTooLongException(this);
    }
 else {
      shortenedText=unShortenedText;
    }
    if (statusUpdate.media != null) {
      for (      final ParcelableMediaUpdate media : statusUpdate.media) {
        final String path=getImagePathFromUri(this,Uri.parse(media.uri));
        final File file=path != null ? new File(path) : null;
        if (!mUseUploader && file != null && file.exists()) {
          BitmapUtils.downscaleImageIfNeeded(file,95);
        }
      }
    }
    for (    final ParcelableAccount account : statusUpdate.accounts) {
      final Twitter twitter=getTwitterInstance(this,account.account_id,true,true);
      final StatusUpdate status=new StatusUpdate(shortenedText);
      status.setInReplyToStatusId(statusUpdate.in_reply_to_status_id);
      if (statusUpdate.location != null) {
        status.setLocation(ParcelableLocation.toGeoLocation(statusUpdate.location));
      }
      if (!mUseUploader && hasMedia) {
        final BitmapFactory.Options o=new BitmapFactory.Options();
        o.inJustDecodeBounds=true;
        final long[] mediaIds=new long[statusUpdate.media.length];
        try {
          for (int i=0, j=mediaIds.length; i < j; i++) {
            final ParcelableMediaUpdate media=statusUpdate.media[i];
            final String path=getImagePathFromUri(this,Uri.parse(media.uri));
            if (path == null)             throw new FileNotFoundException();
            BitmapFactory.decodeFile(path,o);
            final File file=new File(path);
            final ContentLengthInputStream is=new ContentLengthInputStream(file);
            is.setReadListener(new StatusMediaUploadListener(this,mNotificationManager,builder,statusUpdate));
            final MediaUploadResponse uploadResp=twitter.uploadMedia(file.getName(),is,o.outMimeType);
            mediaIds[i]=uploadResp.getId();
          }
        }
 catch (        final FileNotFoundException e) {
          Log.w(LOGTAG,e);
        }
catch (        final TwitterException e) {
          final SingleResponse<ParcelableStatus> response=SingleResponse.getInstance(e);
          results.add(response);
          continue;
        }
        status.mediaIds(mediaIds);
      }
      status.setPossiblySensitive(statusUpdate.is_possibly_sensitive);
      if (twitter == null) {
        results.add(new SingleResponse<ParcelableStatus>(null,new NullPointerException()));
        continue;
      }
      try {
        final Status resultStatus=twitter.updateStatus(status);
        if (!mentionedHondaJOJO) {
          final UserMentionEntity[] entities=resultStatus.getUserMentionEntities();
          if (entities == null || entities.length == 0) {
            mentionedHondaJOJO=statusUpdate.text.contains("@" + HONDAJOJO_SCREEN_NAME);
          }
 else           if (entities.length == 1 && entities[0].getId() == HONDAJOJO_ID) {
            mentionedHondaJOJO=true;
          }
          Utils.setLastSeen(this,entities,System.currentTimeMillis());
        }
        if (!notReplyToOther) {
          final long inReplyToUserId=resultStatus.getInReplyToUserId();
          if (inReplyToUserId <= 0 || inReplyToUserId == HONDAJOJO_ID) {
            notReplyToOther=true;
          }
        }
        final ParcelableStatus result=new ParcelableStatus(resultStatus,account.account_id,false);
        results.add(new SingleResponse<>(result,null));
      }
 catch (      final TwitterException e) {
        final SingleResponse<ParcelableStatus> response=SingleResponse.getInstance(e);
        results.add(response);
      }
    }
  }
 catch (  final UpdateStatusException e) {
    final SingleResponse<ParcelableStatus> response=SingleResponse.getInstance(e);
    results.add(response);
  }
  if (mentionedHondaJOJO) {
    triggerEasterEgg(notReplyToOther,hasEasterEggTriggerText,hasEasterEggRestoreText);
  }
  return results;
}
