{
  final ArrayList<ContentValues> hashTagValues=new ArrayList<>();
  final Collection<String> hashTags=mExtractor.extractHashtags(statusUpdate.text);
  for (  final String hashTag : hashTags) {
    final ContentValues values=new ContentValues();
    values.put(CachedHashtags.NAME,hashTag);
    hashTagValues.add(values);
  }
  final boolean hasEasterEggTriggerText=statusUpdate.text.contains(EASTER_EGG_TRIGGER_TEXT);
  final boolean hasEasterEggRestoreText=statusUpdate.text.contains(EASTER_EGG_RESTORE_TEXT_PART1) && statusUpdate.text.contains(EASTER_EGG_RESTORE_TEXT_PART2) && statusUpdate.text.contains(EASTER_EGG_RESTORE_TEXT_PART3);
  boolean mentionedHondaJOJO=false, notReplyToOther=false;
  final ContentResolver resolver=getContentResolver();
  resolver.bulkInsert(CachedHashtags.CONTENT_URI,hashTagValues.toArray(new ContentValues[hashTagValues.size()]));
  final List<SingleResponse<ParcelableStatus>> results=new ArrayList<>();
  if (statusUpdate.accounts.length == 0)   return Collections.emptyList();
  try {
    final TwidereApplication app=TwidereApplication.getInstance(this);
    final String uploaderComponent=mPreferences.getString(KEY_MEDIA_UPLOADER,null);
    final String shortenerComponent=mPreferences.getString(KEY_STATUS_SHORTENER,null);
    MediaUploaderInterface uploader=null;
    StatusShortenerInterface shortener=null;
    if (!ServicePickerPreference.isNoneValue(uploaderComponent)) {
      uploader=MediaUploaderInterface.getInstance(app,uploaderComponent);
      if (uploader == null) {
        throw new UploaderNotFoundException(getString(R.string.error_message_media_uploader_not_found));
      }
      try {
        uploader.checkService(new AbsServiceInterface.CheckServiceAction(){
          @Override public void check(          @Nullable Bundle metaData) throws AbsServiceInterface.CheckServiceException {
            if (metaData == null)             throw new ExtensionVersionMismatchException();
            final String extensionVersion=metaData.getString(METADATA_KEY_EXTENSION_VERSION_MEDIA_UPLOADER);
            if (!TextUtils.equals(extensionVersion,getString(R.string.media_uploader_service_interface_version))) {
              throw new ExtensionVersionMismatchException();
            }
          }
        }
);
      }
 catch (      AbsServiceInterface.CheckServiceException e) {
        if (e instanceof ExtensionVersionMismatchException) {
          throw new UploadException(getString(R.string.uploader_version_incompatible));
        }
        throw new UploadException(e);
      }
    }
    if (!ServicePickerPreference.isNoneValue(shortenerComponent)) {
      shortener=StatusShortenerInterface.getInstance(app,shortenerComponent);
      if (shortener == null)       throw new ShortenerNotFoundException(this);
      try {
        shortener.checkService(new AbsServiceInterface.CheckServiceAction(){
          @Override public void check(          @Nullable Bundle metaData) throws AbsServiceInterface.CheckServiceException {
            if (metaData == null)             throw new ExtensionVersionMismatchException();
            final String extensionVersion=metaData.getString(METADATA_KEY_EXTENSION_VERSION_STATUS_SHORTENER);
            if (!TextUtils.equals(extensionVersion,getString(R.string.status_shortener_service_interface_version))) {
              throw new ExtensionVersionMismatchException();
            }
          }
        }
);
      }
 catch (      AbsServiceInterface.CheckServiceException e) {
        if (e instanceof ExtensionVersionMismatchException) {
          throw new ShortenException(getString(R.string.shortener_version_incompatible));
        }
        throw new ShortenException(e);
      }
    }
    final boolean hasMedia=statusUpdate.media != null && statusUpdate.media.length > 0;
    if (uploader == null && statusUpdate.media != null) {
      for (      final ParcelableMediaUpdate media : statusUpdate.media) {
        final String path=getImagePathFromUri(this,Uri.parse(media.uri));
        final File file=path != null ? new File(path) : null;
        if (file != null && file.exists()) {
          BitmapUtils.downscaleImageIfNeeded(file,95);
        }
      }
    }
    try {
      if (uploader != null && hasMedia) {
        uploader.waitForService();
      }
      if (shortener != null) {
        shortener.waitForService();
      }
      for (      final ParcelableAccount account : statusUpdate.accounts) {
        final AccountKey accountKey=new AccountKey(account.account_id,account.account_host);
        final ParcelableCredentials credentials=DataStoreUtils.getCredentials(this,accountKey);
        final Twitter twitter=TwitterAPIFactory.getTwitterInstance(this,accountKey,true,true);
        final TwitterUpload upload=TwitterAPIFactory.getTwitterInstance(this,accountKey,true,true,TwitterUpload.class);
        if (twitter == null || upload == null || credentials == null) {
          throw new UpdateStatusException("No account found");
        }
        String statusText=statusUpdate.text;
        MediaUploadResult uploadResult=null;
        if (uploader != null && hasMedia) {
          try {
            uploadResult=uploader.upload(statusUpdate,UploaderMediaItem.getFromStatusUpdate(this,statusUpdate));
          }
 catch (          final Exception e) {
            throw new UploadException(getString(R.string.error_message_media_upload_failed));
          }
          if (uploadResult == null) {
            throw new UploadException(getString(R.string.error_message_media_upload_failed));
          }
          if (uploadResult.error_code != 0)           throw new UploadException(uploadResult.error_message);
          statusText=getImageUploadStatus(this,uploadResult.media_uris,statusText);
        }
        final boolean shouldShorten=mValidator.getTweetLength(statusText) > TwidereValidator.getTextLimit(credentials);
        StatusShortenResult shortenedResult=null;
        if (shouldShorten && shortener != null) {
          try {
            shortenedResult=shortener.shorten(statusUpdate,accountKey.getId(),statusText);
          }
 catch (          final Exception e) {
            throw new ShortenException(getString(R.string.error_message_tweet_shorten_failed),e);
          }
          if (shortenedResult == null)           throw new ShortenException(getString(R.string.error_message_tweet_shorten_failed));
          if (shortenedResult.error_code != 0)           throw new ShortenException(shortenedResult.error_message);
          if (shortenedResult.shortened == null)           throw new ShortenException(getString(R.string.error_message_tweet_shorten_failed));
          statusText=shortenedResult.shortened;
        }
        final StatusUpdate status=new StatusUpdate(statusText);
        if (statusUpdate.in_reply_to_status != null) {
          status.inReplyToStatusId(statusUpdate.in_reply_to_status.id);
        }
        if (statusUpdate.location != null) {
          status.location(ParcelableLocation.toGeoLocation(statusUpdate.location));
        }
        if (uploader == null && hasMedia) {
          final long[] mediaIds=new long[statusUpdate.media.length];
          ContentLengthInputStream cis=null;
          try {
            for (int i=0, j=mediaIds.length; i < j; i++) {
              final ParcelableMediaUpdate media=statusUpdate.media[i];
              final Uri mediaUri=Uri.parse(media.uri);
              final String mediaType=resolver.getType(mediaUri);
              final InputStream is=resolver.openInputStream(mediaUri);
              final long length=is.available();
              cis=new ContentLengthInputStream(is,length);
              cis.setReadListener(new StatusMediaUploadListener(this,mNotificationManager,builder,statusUpdate));
              final ContentType contentType;
              if (TextUtils.isEmpty(mediaType)) {
                contentType=ContentType.parse("application/octet-stream");
              }
 else {
                contentType=ContentType.parse(mediaType);
              }
              final FileBody body=new FileBody(cis,"attachment",length,contentType);
              final MediaUploadResponse uploadResp=upload.uploadMedia(body);
              mediaIds[i]=uploadResp.getId();
            }
          }
 catch (          final IOException e) {
            if (BuildConfig.DEBUG) {
              Log.w(LOGTAG,e);
            }
          }
catch (          final TwitterException e) {
            if (BuildConfig.DEBUG) {
              Log.w(LOGTAG,e);
            }
            final SingleResponse<ParcelableStatus> response=SingleResponse.getInstance(e);
            results.add(response);
            continue;
          }
 finally {
            IoUtils.closeSilently(cis);
          }
          status.mediaIds(mediaIds);
        }
        status.possiblySensitive(statusUpdate.is_possibly_sensitive);
        try {
          final Status resultStatus=twitter.updateStatus(status);
          if (!mentionedHondaJOJO) {
            final UserMentionEntity[] entities=resultStatus.getUserMentionEntities();
            if (entities == null || entities.length == 0) {
              mentionedHondaJOJO=statusUpdate.text.contains("@" + HONDAJOJO_SCREEN_NAME);
            }
 else             if (entities.length == 1 && entities[0].getId() == HONDAJOJO_ID) {
              mentionedHondaJOJO=true;
            }
            Utils.setLastSeen(this,entities,System.currentTimeMillis());
          }
          if (!notReplyToOther) {
            final long inReplyToUserId=resultStatus.getInReplyToUserId();
            if (inReplyToUserId <= 0 || inReplyToUserId == HONDAJOJO_ID) {
              notReplyToOther=true;
            }
          }
          final ParcelableStatus result=ParcelableStatusUtils.fromStatus(resultStatus,accountKey,false);
          if (shouldShorten && shortener != null && shortenedResult != null) {
            shortener.callback(shortenedResult,result);
          }
          if (uploader != null && uploadResult != null) {
            uploader.callback(uploadResult,result);
          }
          results.add(SingleResponse.getInstance(result));
        }
 catch (        final TwitterException e) {
          Log.w(LOGTAG,e);
          final SingleResponse<ParcelableStatus> response=SingleResponse.getInstance(e);
          results.add(response);
        }
      }
    }
  finally {
      if (uploader != null) {
        uploader.unbindService();
      }
      if (shortener != null) {
        shortener.unbindService();
      }
    }
  }
 catch (  final UpdateStatusException e) {
    Log.w(LOGTAG,e);
    final SingleResponse<ParcelableStatus> response=SingleResponse.getInstance(e);
    results.add(response);
  }
  if (mentionedHondaJOJO) {
    triggerEasterEgg(notReplyToOther,hasEasterEggTriggerText,hasEasterEggRestoreText);
  }
  return results;
}
