{
  final int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  int widthSize;
  int heightSize;
  mSpinnerPadding.left=getPaddingLeft() > mSelectionLeftPadding ? getPaddingLeft() : mSelectionLeftPadding;
  mSpinnerPadding.top=getPaddingTop() > mSelectionTopPadding ? getPaddingTop() : mSelectionTopPadding;
  mSpinnerPadding.right=getPaddingRight() > mSelectionRightPadding ? getPaddingRight() : mSelectionRightPadding;
  mSpinnerPadding.bottom=getPaddingBottom() > mSelectionBottomPadding ? getPaddingBottom() : mSelectionBottomPadding;
  if (mDataChanged) {
    handleDataChanged();
  }
  int preferredHeight=0;
  int preferredWidth=0;
  boolean needsMeasuring=true;
  final int selectedPosition=getSelectedItemPosition();
  if (selectedPosition >= 0 && mAdapter != null) {
    View view=mRecycler.get(selectedPosition);
    if (view == null) {
      view=mAdapter.getView(selectedPosition,null,this);
    }
    if (view != null) {
      mRecycler.put(selectedPosition,view);
    }
    if (view != null) {
      if (view.getLayoutParams() == null) {
        mBlockLayoutRequests=true;
        view.setLayoutParams(generateDefaultLayoutParams());
        mBlockLayoutRequests=false;
      }
      measureChild(view,widthMeasureSpec,heightMeasureSpec);
      preferredHeight=getChildHeight(view) + mSpinnerPadding.top + mSpinnerPadding.bottom;
      preferredWidth=getChildWidth(view) + mSpinnerPadding.left + mSpinnerPadding.right;
      needsMeasuring=false;
    }
  }
  if (needsMeasuring) {
    preferredHeight=mSpinnerPadding.top + mSpinnerPadding.bottom;
    if (widthMode == MeasureSpec.UNSPECIFIED) {
      preferredWidth=mSpinnerPadding.left + mSpinnerPadding.right;
    }
  }
  preferredHeight=Math.max(preferredHeight,getSuggestedMinimumHeight());
  preferredWidth=Math.max(preferredWidth,getSuggestedMinimumWidth());
  heightSize=resolveSize(preferredHeight,heightMeasureSpec);
  widthSize=resolveSize(preferredWidth,widthMeasureSpec);
  setMeasuredDimension(widthSize,heightSize);
  mHeightMeasureSpec=heightMeasureSpec;
  mWidthMeasureSpec=widthMeasureSpec;
}
