{
  if (!response.isSuccessful()) {
    final TwitterException cause=new TwitterException();
    cause.setHttpResponse(response);
    onException(cause);
    return;
  }
  final CRLFLineReader reader=new CRLFLineReader(new InputStreamReader(response.getBody().stream(),"UTF-8"));
  try {
    for (String line; (line=reader.readLine()) != null && !disconnected; ) {
      if (!connected) {
        onConnected();
        connected=true;
      }
      if (TextUtils.isEmpty(line))       continue;
      final TwitterStreamObject object=LoganSquare.parse(line,TwitterStreamObject.class);
switch (object.determine()) {
case Type.SENDER:
{
          break;
        }
case Type.STATUS:
{
        onStatus(LoganSquareMapperFinder.mapperFor(Status.class).parse(line));
        break;
      }
case Type.DIRECT_MESSAGE:
{
      onDirectMessage(object.getDirectMessage());
      break;
    }
case Type.DELETE:
{
    final TwitterStreamObject.Delete delete=object.getDelete();
    if (delete.getStatus() != null) {
      onStatusDeleted(delete.getStatus());
    }
 else     if (delete.getDirectMessage() != null) {
      onDirectMessageDeleted(delete.getDirectMessage());
    }
    break;
  }
case Type.LIMIT:
break;
case Type.STALL_WARNING:
break;
case Type.SCRUB_GEO:
break;
case Type.FRIENDS:
break;
case Type.FAVORITE:
{
StatusFavoriteEvent event=LoganSquareMapperFinder.mapperFor(StatusFavoriteEvent.class).parse(line);
onFavorite(event.getSource(),event.getTarget(),event.getTargetObject());
break;
}
case Type.UNFAVORITE:
{
StatusFavoriteEvent event=LoganSquareMapperFinder.mapperFor(StatusFavoriteEvent.class).parse(line);
onUnfavorite(event.getSource(),event.getTarget(),event.getTargetObject());
break;
}
case Type.FOLLOW:
break;
case Type.UNFOLLOW:
break;
case Type.USER_LIST_MEMBER_ADDED:
break;
case Type.USER_LIST_MEMBER_DELETED:
break;
case Type.USER_LIST_SUBSCRIBED:
break;
case Type.USER_LIST_UNSUBSCRIBED:
break;
case Type.USER_LIST_CREATED:
break;
case Type.USER_LIST_UPDATED:
break;
case Type.USER_LIST_DESTROYED:
break;
case Type.USER_UPDATE:
break;
case Type.USER_DELETE:
break;
case Type.USER_SUSPEND:
break;
case Type.BLOCK:
break;
case Type.UNBLOCK:
break;
case Type.DISCONNECTION:
break;
case Type.UNKNOWN:
break;
}
}
}
 catch (IOException e) {
onException(e);
}
 finally {
Log.d("Twidere.Stream","Cleaning up...");
reader.close();
response.close();
}
}
