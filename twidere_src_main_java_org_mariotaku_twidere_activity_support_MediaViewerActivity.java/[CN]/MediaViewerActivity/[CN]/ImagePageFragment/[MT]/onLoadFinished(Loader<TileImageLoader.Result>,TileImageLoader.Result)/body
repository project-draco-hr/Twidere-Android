{
  if (data.hasData()) {
    mImageView.setVisibility(View.VISIBLE);
    mImageView.setTag(data.file);
    if (data.useDecoder) {
      TileBitmapDrawable.attachTileBitmapDrawable(mImageView,data.file.getAbsolutePath(),null,new OnInitializeListener(){
        @Override public void onStartInitialization(){
        }
        @Override public void onEndInitialization(){
          mImageView.post(new Runnable(){
            @Override public void run(){
              updateScaleLimit();
            }
          }
);
        }
      }
);
    }
 else     if ("image/gif".equals(data.options.outMimeType)) {
      try {
        final FileDescriptor fd=new RandomAccessFile(data.file,"r").getFD();
        mImageView.setImageDrawable(new GifDrawable(fd));
      }
 catch (      IOException e) {
        mImageView.setImageDrawable(null);
        mImageView.setTag(null);
        mImageView.setVisibility(View.GONE);
        Utils.showErrorMessage(getActivity(),null,e,true);
      }
      updateScaleLimit();
    }
 else {
      mImageView.setImageBitmap(data.bitmap);
      updateScaleLimit();
    }
  }
 else {
    mImageView.setImageDrawable(null);
    mImageView.setTag(null);
    mImageView.setVisibility(View.GONE);
    Utils.showErrorMessage(getActivity(),null,data.exception,true);
  }
  mProgressBar.setVisibility(View.GONE);
  mProgressBar.setProgress(0);
  invalidateOptionsMenu();
}
